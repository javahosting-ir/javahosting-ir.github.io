{"meta":{"title":"جاواهاستینگ","subtitle":null,"description":null,"author":"جاواهاستینگ","url":"http://javahosting.ir"},"pages":[{"title":"صفحه مورد نظر یافت نشد.","date":"2017-03-12T23:42:23.018Z","updated":"2017-03-12T23:42:23.002Z","comments":false,"path":"/404.html","permalink":"http://javahosting.ir//404.html","excerpt":"","text":""},{"title":"خانه","date":"2017-01-13T20:30:00.000Z","updated":"2017-03-12T22:39:40.064Z","comments":true,"path":"home.html","permalink":"http://javahosting.ir/home.html","excerpt":"","text":"جاواهاستینگجاواهاستینگ اولین سامانه متمرکز ارائه خدمات هاستینگ بر روی پلت فرم جاوا جاوا است.کلید اصلی آن زمانی که ما در حال راه اندازی پروژه های جاوا در سال های ۸۵ الی ۸۶ به دنبال هاست جاوا بودیم، زده شد، و در نهایت بعد از فرازها و فرودهای بسیار در سال ۹۵ راه اندازی شد.هدف اصلی ما ارائه هاست جاوا به برنامه نویسان جاوا در ایران می باشد.ما با همکاری شرکت پارس آنلاین سرورهای خود را برای هاستینگ قدرتمند تجهیز کرده ایم، استفاده از سرورهای موجود در داخل کشور هزینه های جاواهاستینگ را بالا برده است اما در کنار آن سرعت بالا را به مشتریانمان ارائه می کنیم که از این بابت بسیار خرسندیم. تعرفهتعرفه های جاواهاستینگ به شکل یک رابطه برد برد می باشد، سعی شده که تا جایی که امکان دارد برنامه نویسان مختلف با سطوح مختلف را در نظر داشته باشیم. لیست تعرفه ها خدمات دیگرجاواهاستینگ به عنوان یک تیم جاوا کار حرفه ای پروژه های بسیاری را پیاده سازی و ارائه کرده است. بیشتر این پروژه ها در زیر لیست شده اند. خدمات آموزش جاواگروه جاواهاستینگ با ارائه سورس کدهای مرتب در دو ویرایش استاندارد و سازمانی سعی در کمک به برنامه نویسان ایرانی در حوزه جاوا را دارد.آموزش جاوا"}],"posts":[{"title":"فایل‌ها و  کتابخانه های جاوایی","slug":"learning/dependency/index","date":"2017-03-21T19:30:00.000Z","updated":"2017-03-23T07:04:55.653Z","comments":true,"path":"1396/01/01/learning/dependency/index/","link":"","permalink":"http://javahosting.ir/1396/01/01/learning/dependency/index/","excerpt":"","text":"شماره نام فایل +","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"دیپندنسی","slug":"آموزش-جاوا/دیپندنسی","permalink":"http://javahosting.ir/category/آموزش-جاوا/دیپندنسی/"}],"tags":[{"name":"فایل کتابخانه","slug":"فایل-کتابخانه","permalink":"http://javahosting.ir/tag/فایل-کتابخانه/"},{"name":"jar","slug":"jar","permalink":"http://javahosting.ir/tag/jar/"},{"name":"IDE","slug":"IDE","permalink":"http://javahosting.ir/tag/IDE/"}]},{"title":"کتابها و اقلام آموزشی","slug":"learning/books/index","date":"2017-03-21T19:30:00.000Z","updated":"2017-03-22T14:04:05.675Z","comments":true,"path":"1396/01/01/learning/books/index/","link":"","permalink":"http://javahosting.ir/1396/01/01/learning/books/index/","excerpt":"","text":"","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"کتاب و اقلام آموزشی","slug":"آموزش-جاوا/کتاب-و-اقلام-آموزشی","permalink":"http://javahosting.ir/category/آموزش-جاوا/کتاب-و-اقلام-آموزشی/"}],"tags":[{"name":"کتاب","slug":"کتاب","permalink":"http://javahosting.ir/tag/کتاب/"},{"name":"مقاله","slug":"مقاله","permalink":"http://javahosting.ir/tag/مقاله/"},{"name":"فیلم آموزشی","slug":"فیلم-آموزشی","permalink":"http://javahosting.ir/tag/فیلم-آموزشی/"},{"name":"چیت‌شیت","slug":"چیت‌شیت","permalink":"http://javahosting.ir/tag/چیت‌شیت/"}]},{"title":"نمونه پروژه فروشگاه","slug":"learning/EE/projects/shop","date":"2017-03-13T20:30:00.000Z","updated":"2017-03-22T14:44:41.776Z","comments":true,"path":"1395/12/24/learning/EE/projects/shop/","link":"","permalink":"http://javahosting.ir/1395/12/24/learning/EE/projects/shop/","excerpt":"","text":"نمونه پروژه جاوا برای فروشگاه آنلاین.این فروشگاه بر پایه spring نوشته شده است.برای اجرا کافیست دستور زیر را وارد کنید: 1./mvnw spring-boot:run دانلود سورس کد","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش سازمانی J2EE","slug":"آموزش-جاوا/نگارش-سازمانی-J2EE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-سازمانی-J2EE/"},{"name":"نمونه پروژه‌ها","slug":"آموزش-جاوا/نگارش-سازمانی-J2EE/نمونه-پروژه‌ها","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-سازمانی-J2EE/نمونه-پروژه‌ها/"}],"tags":[{"name":"نمونه پروژه j2ee","slug":"نمونه-پروژه-j2ee","permalink":"http://javahosting.ir/tag/نمونه-پروژه-j2ee/"}]},{"title":"نمونه پروژه دیگر","slug":"learning/EE/projects/cms","date":"2017-03-13T20:30:00.000Z","updated":"2017-03-22T14:08:02.004Z","comments":true,"path":"1395/12/24/learning/EE/projects/cms/","link":"","permalink":"http://javahosting.ir/1395/12/24/learning/EE/projects/cms/","excerpt":"","text":"","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش سازمانی J2EE","slug":"آموزش-جاوا/نگارش-سازمانی-J2EE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-سازمانی-J2EE/"},{"name":"نمونه پروژه‌ها","slug":"آموزش-جاوا/نگارش-سازمانی-J2EE/نمونه-پروژه‌ها","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-سازمانی-J2EE/نمونه-پروژه‌ها/"}],"tags":[{"name":"نمونه پروژه j2ee","slug":"نمونه-پروژه-j2ee","permalink":"http://javahosting.ir/tag/نمونه-پروژه-j2ee/"}]},{"title":"مشتریان ما","slug":"about/customers","date":"2017-02-13T20:30:00.000Z","updated":"2017-04-27T20:03:48.019Z","comments":true,"path":"1395/11/26/about/customers/","link":"","permalink":"http://javahosting.ir/1395/11/26/about/customers/","excerpt":"","text":"سیاست گروه جاواهاستینگ ایجاد فضای همکاری به شکل برد برد است،در زیر بخشی از مشتریان مستقیم جاواهاستینگ لیست شده اند. خزشگر نسخه انگلیسیخزشگرفروشگاه محصولات مدیریت فرایندسیستم مدیریت پروژهفروشگاه متن باز بر پایه جاواوب سایت شخصی مدیر!اولین دایرکتوری آگهی ایرانموتور جستجوی محتوای فارسیناشرآژانس ۲۴تجارت ایرانپرداخت برای خریدجیزنافلفروشگاه کتاب منریپازیتوری جاواجاواگسترانجی‌۲‌ای‌ای‌ دوردیس شاپو…","categories":[{"name":"درباره جاواهاستینگ","slug":"درباره-جاواهاستینگ","permalink":"http://javahosting.ir/category/درباره-جاواهاستینگ/"},{"name":"مشتریان ما","slug":"درباره-جاواهاستینگ/مشتریان-ما","permalink":"http://javahosting.ir/category/درباره-جاواهاستینگ/مشتریان-ما/"}],"tags":[{"name":"مشتریان ما","slug":"مشتریان-ما","permalink":"http://javahosting.ir/tag/مشتریان-ما/"}]},{"title":"پرتال و طراحی سیستم مدیریت محتوا","slug":"services/free/portal","date":"2017-02-13T20:30:00.000Z","updated":"2017-03-12T20:12:01.928Z","comments":true,"path":"1395/11/26/services/free/portal/","link":"","permalink":"http://javahosting.ir/1395/11/26/services/free/portal/","excerpt":"","text":"برنامه نویسی پرتال های بر پایه جاوا و استفاده از سیستم های متن بازبرخی از این سرویس ها به شکل زیر است:پروژه متن باز پرتال پیشرفته لایفری که برای آن ماژول ها یا به اصطلاح پرتلت‌های حرفه ای طراحی می کنیمنمونه پرتلت‌ها.پروژه متن باز پرتال پیشرفته سیستم مدیریت محتوا آلفرسکوپروژه طراحی شده از پایه توسط جاواهاستینگ:جیزپروژه طراحی شده از پایه توسط جاواهاستینگ:ناشر برای درخواست این سرویس از لینک زیر می توانید استفاده کنید.","categories":[{"name":"خدمات","slug":"خدمات","permalink":"http://javahosting.ir/category/خدمات/"},{"name":"رایگان","slug":"خدمات/رایگان","permalink":"http://javahosting.ir/category/خدمات/رایگان/"}],"tags":[{"name":"سیستم مدیریت محتوا","slug":"سیستم-مدیریت-محتوا","permalink":"http://javahosting.ir/tag/سیستم-مدیریت-محتوا/"},{"name":"پرتال","slug":"پرتال","permalink":"http://javahosting.ir/tag/پرتال/"}]},{"title":"تماس با ما","slug":"about/contactus","date":"2017-02-13T20:30:00.000Z","updated":"2017-03-12T19:49:48.917Z","comments":true,"path":"1395/11/26/about/contactus/","link":"","permalink":"http://javahosting.ir/1395/11/26/about/contactus/","excerpt":"","text":"ارتباط با جاواهاستینگ: info@javahosting.ir , admin@javahosting.irتلفن سرویس دهی: ۰۹۳۸۷۷۱۹۳۵۱-۰۲۵۳۶۶۴۸۴۹۸(ساعات تماس ۸ صبح تا ۱۶)آدرس : قم-هفت تیر-کوچه ۱۶-پلاک ۱۱(مراجعه با هماهنگی قبلی)پشتیبانی تلگرام: ۰۹۳۸۷۷۱۹۳۵۱","categories":[{"name":"درباره جاواهاستینگ","slug":"درباره-جاواهاستینگ","permalink":"http://javahosting.ir/category/درباره-جاواهاستینگ/"},{"name":"تماس با ما","slug":"درباره-جاواهاستینگ/تماس-با-ما","permalink":"http://javahosting.ir/category/درباره-جاواهاستینگ/تماس-با-ما/"}],"tags":[{"name":"راه های ارتباطی","slug":"راه-های-ارتباطی","permalink":"http://javahosting.ir/tag/راه-های-ارتباطی/"}]},{"title":"فروشگاه اینترنتی","slug":"services/free/shop","date":"2017-01-13T20:30:00.000Z","updated":"2017-03-12T20:11:48.659Z","comments":true,"path":"1395/10/25/services/free/shop/","link":"","permalink":"http://javahosting.ir/1395/10/25/services/free/shop/","excerpt":"","text":"برنامه نویسی فروشگاه وبی بر پایه جاوا و استفاده از سیستم های متن بازبرخی از این سرویس ها به شکل زیر است:پروژه متن باز فروشگاه پیشرفته برودلیف .پروژه متن باز فروشگاه و مدیریت مشتری و مدیریت منابع پیشرفته آفبیزپروژه طراحی شده از پایه توسط جاواهاستینگ:جاواکارتپروژه طراحی شده از پایه توسط جاواهاستینگ:ردیس شاپ برای درخواست این سرویس از لینک زیر می توانید استفاده کنید.","categories":[{"name":"خدمات","slug":"خدمات","permalink":"http://javahosting.ir/category/خدمات/"},{"name":"رایگان","slug":"خدمات/رایگان","permalink":"http://javahosting.ir/category/خدمات/رایگان/"}],"tags":[{"name":"سیستم فروشگاه اینترنتی","slug":"سیستم-فروشگاه-اینترنتی","permalink":"http://javahosting.ir/tag/سیستم-فروشگاه-اینترنتی/"}]},{"title":"جاوانگارش استاندارد SE","slug":"learning/SE/index","date":"2017-01-13T20:30:00.000Z","updated":"2017-03-12T21:45:39.267Z","comments":true,"path":"1395/10/25/learning/SE/index/","link":"","permalink":"http://javahosting.ir/1395/10/25/learning/SE/index/","excerpt":"","text":"آموزش جاوا 12345678910111213141516171819202122232425262728293031323334package org.javacore.base.String; /* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author BYSocket * @since 2016-01-06 19:51:00 * 常见面试题：String作为方法参数传递,另外一个例子 $&#123;@link StringT2&#125; * 这就叫做“值传递”，即方法操作的是参数变量（也就是原型变量的一个值的拷贝） * 改变的也只是原型变量的一个拷贝而已，而非变量本身 */public class StringT &#123; public static void main(String[] args) &#123; String str = \"123\"; change(str); System.out.println(str); &#125; public static void change(String str) &#123; str = \"456\"; &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/tag/آموزش-جاوا/"}]},{"title":"سیستم مدیریت فرایند تجاری","slug":"services/free/bpms","date":"2017-01-13T20:30:00.000Z","updated":"2017-03-12T20:15:49.105Z","comments":true,"path":"1395/10/25/services/free/bpms/","link":"","permalink":"http://javahosting.ir/1395/10/25/services/free/bpms/","excerpt":"","text":"برنامه نویسی سیستم مدیریت فرایند تجاری یا BPMS بر پایه جاوا و استفاده از سیستم های متن بازبرخی از این سرویس ها به شکل زیر است:پروژه متن باز اکتیویتی Activitiپروژه متن باز jBPMSبرای درخواست این سرویس از لینک زیر می توانید استفاده کنید.","categories":[{"name":"خدمات","slug":"خدمات","permalink":"http://javahosting.ir/category/خدمات/"},{"name":"رایگان","slug":"خدمات/رایگان","permalink":"http://javahosting.ir/category/خدمات/رایگان/"}],"tags":[{"name":"مدیریت فرایند تجاری","slug":"مدیریت-فرایند-تجاری","permalink":"http://javahosting.ir/tag/مدیریت-فرایند-تجاری/"},{"name":"BPMS","slug":"BPMS","permalink":"http://javahosting.ir/tag/BPMS/"},{"name":"فرایند تجاری","slug":"فرایند-تجاری","permalink":"http://javahosting.ir/tag/فرایند-تجاری/"}]},{"title":"کتابخوانی","slug":"services/free/book","date":"2017-01-13T20:30:00.000Z","updated":"2017-03-12T20:22:54.050Z","comments":true,"path":"1395/10/25/services/free/book/","link":"","permalink":"http://javahosting.ir/1395/10/25/services/free/book/","excerpt":"","text":"برنامه نویسی سیستم کتابخوانی بر پایه جاوا و استفاده از سیستم های متن بازبرخی از این سرویس ها به شکل زیر است:پروژه طراحی شده از پایه توسط جاواهاستینگ: ketabfishبرای درخواست این سرویس از لینک زیر می توانید استفاده کنید.","categories":[{"name":"خدمات","slug":"خدمات","permalink":"http://javahosting.ir/category/خدمات/"},{"name":"رایگان","slug":"خدمات/رایگان","permalink":"http://javahosting.ir/category/خدمات/رایگان/"}],"tags":[{"name":"کتابخوانی","slug":"کتابخوانی","permalink":"http://javahosting.ir/tag/کتابخوانی/"}]},{"title":"محاسبات ابری","slug":"services/free/cloud","date":"2017-01-13T20:30:00.000Z","updated":"2017-03-12T20:26:23.042Z","comments":true,"path":"1395/10/25/services/free/cloud/","link":"","permalink":"http://javahosting.ir/1395/10/25/services/free/cloud/","excerpt":"","text":"برنامه نویسی سیستم محاسبات ابری بر پایه جاوا و استفاده از سیستم های متن بازبرخی از این سرویس ها به شکل زیر است:پروژه متن باز openstackبرای درخواست این سرویس از لینک زیر می توانید استفاده کنید.","categories":[{"name":"خدمات","slug":"خدمات","permalink":"http://javahosting.ir/category/خدمات/"},{"name":"رایگان","slug":"خدمات/رایگان","permalink":"http://javahosting.ir/category/خدمات/رایگان/"}],"tags":[{"name":"محاسبات ابری","slug":"محاسبات-ابری","permalink":"http://javahosting.ir/tag/محاسبات-ابری/"}]},{"title":"مدیریت مناقصات","slug":"services/free/hire","date":"2017-01-13T20:30:00.000Z","updated":"2017-03-12T20:27:03.832Z","comments":true,"path":"1395/10/25/services/free/hire/","link":"","permalink":"http://javahosting.ir/1395/10/25/services/free/hire/","excerpt":"","text":"برنامه نویسی سیستم مدیریت مناقصات بر پایه جاوا و استفاده از سیستم های متن بازبرخی از این سرویس ها به شکل زیر است:پروژه طراحی شده از پایه توسط جاواهاستینگ: نافلبرای درخواست این سرویس از لینک زیر می توانید استفاده کنید.","categories":[{"name":"خدمات","slug":"خدمات","permalink":"http://javahosting.ir/category/خدمات/"},{"name":"رایگان","slug":"خدمات/رایگان","permalink":"http://javahosting.ir/category/خدمات/رایگان/"}],"tags":[{"name":"مدیریت مناقصات","slug":"مدیریت-مناقصات","permalink":"http://javahosting.ir/tag/مدیریت-مناقصات/"}]},{"title":"سامانه خبری","slug":"services/free/news","date":"2017-01-13T20:30:00.000Z","updated":"2017-03-12T20:13:13.379Z","comments":true,"path":"1395/10/25/services/free/news/","link":"","permalink":"http://javahosting.ir/1395/10/25/services/free/news/","excerpt":"","text":"برنامه نویسی وب سایت خبری بر پایه جاوا و استفاده از سیستم های متن بازبرخی از این سرویس ها به شکل زیر است:پروژه متن باز نیوز‌پرتال پیشرفتهپروژه طراحی شده از پایه توسط جاواهاستینگ:ناشرپروژه طراحی شده از پایه توسط جاواهاستینگ:جیز برای درخواست این سرویس از لینک زیر می توانید استفاده کنید.","categories":[{"name":"خدمات","slug":"خدمات","permalink":"http://javahosting.ir/category/خدمات/"},{"name":"رایگان","slug":"خدمات/رایگان","permalink":"http://javahosting.ir/category/خدمات/رایگان/"}],"tags":[{"name":"وب سایت خبری","slug":"وب-سایت-خبری","permalink":"http://javahosting.ir/tag/وب-سایت-خبری/"}]},{"title":"مدیریت پروژه","slug":"services/free/pm","date":"2017-01-13T20:30:00.000Z","updated":"2017-03-12T20:16:54.185Z","comments":true,"path":"1395/10/25/services/free/pm/","link":"","permalink":"http://javahosting.ir/1395/10/25/services/free/pm/","excerpt":"","text":"برنامه نویسی سیستم مدیریت پروژه بر پایه جاوا و استفاده از سیستم های متن بازبرخی از این سرویس ها به شکل زیر است:پروژه طراحی شده از پایه توسط جاواهاستینگ:iProManبرای درخواست این سرویس از لینک زیر می توانید استفاده کنید.","categories":[{"name":"خدمات","slug":"خدمات","permalink":"http://javahosting.ir/category/خدمات/"},{"name":"رایگان","slug":"خدمات/رایگان","permalink":"http://javahosting.ir/category/خدمات/رایگان/"}],"tags":[{"name":"مدیریت پروژه","slug":"مدیریت-پروژه","permalink":"http://javahosting.ir/tag/مدیریت-پروژه/"}]},{"title":"تعرفه ارائه هاست گلس‌فیش","slug":"prices/glassfish","date":"2017-01-13T20:30:00.000Z","updated":"2017-03-12T20:44:05.820Z","comments":true,"path":"1395/10/25/prices/glassfish/","link":"","permalink":"http://javahosting.ir/1395/10/25/prices/glassfish/","excerpt":"","text":"وب سرور میزان رم مدت زمان میزان هارد پشتیبانی بها گلس‌فیش ۲۵۶مگ یک‌ماه ۱۲۸مگ ایمیل ۶۹هزارتومان گلس‌فیش ۲۵۶مگ یک‌ماه ۲۵۶مگ ایمیل ۹۹هزارتومان گلس‌فیش ۲۵۶مگ یک‌ماه ۵۱۲مگ ایمیل ۱۴۵هزارتومان","categories":[{"name":"تعرفه‌ها","slug":"تعرفه‌ها","permalink":"http://javahosting.ir/category/تعرفه‌ها/"},{"name":"Glassfish 4.1 Server","slug":"تعرفه‌ها/Glassfish-4-1-Server","permalink":"http://javahosting.ir/category/تعرفه‌ها/Glassfish-4-1-Server/"}],"tags":[{"name":"Glassfish","slug":"Glassfish","permalink":"http://javahosting.ir/tag/Glassfish/"},{"name":"وب سرور گلس‌فیش","slug":"وب-سرور-گلس‌فیش","permalink":"http://javahosting.ir/tag/وب-سرور-گلس‌فیش/"}]},{"title":"موتور جستجو","slug":"services/free/searchengine","date":"2017-01-13T20:30:00.000Z","updated":"2017-03-12T20:22:07.232Z","comments":true,"path":"1395/10/25/services/free/searchengine/","link":"","permalink":"http://javahosting.ir/1395/10/25/services/free/searchengine/","excerpt":"","text":"برنامه نویسی سیستم موتور جستجو بر پایه جاوا و استفاده از سیستم های متن بازبرخی از این سرویس ها به شکل زیر است:پروژه متن باز سولار solr تیم جاواهاستینگ ماژول های بسیاری برای این پروژه به شکل متن بسته نوشته است.پروژه طراحی شده از پایه توسط جاواهاستینگ: PCSEبرای درخواست این سرویس از لینک زیر می توانید استفاده کنید.","categories":[{"name":"خدمات","slug":"خدمات","permalink":"http://javahosting.ir/category/خدمات/"},{"name":"رایگان","slug":"خدمات/رایگان","permalink":"http://javahosting.ir/category/خدمات/رایگان/"}],"tags":[{"name":"موتور جستجو","slug":"موتور-جستجو","permalink":"http://javahosting.ir/tag/موتور-جستجو/"}]},{"title":"تبلیغاتی اینترنتی","slug":"services/free/ads","date":"2017-01-13T20:30:00.000Z","updated":"2017-03-12T20:24:05.180Z","comments":true,"path":"1395/10/25/services/free/ads/","link":"","permalink":"http://javahosting.ir/1395/10/25/services/free/ads/","excerpt":"","text":"برنامه نویسی سیستم تبلیغاتی اینترنتی بر پایه جاوا و استفاده از سیستم های متن بازبرخی از این سرویس ها به شکل زیر است:پروژه طراحی شده از پایه توسط جاواهاستینگ: sodasellپروژه طراحی شده از پایه توسط جاواهاستینگ: tejaratiranپروژه طراحی شده از پایه توسط جاواهاستینگ: azhans24پروژه طراحی شده از پایه توسط جاواهاستینگ: sellmybookبرای درخواست این سرویس از لینک زیر می توانید استفاده کنید.","categories":[{"name":"خدمات","slug":"خدمات","permalink":"http://javahosting.ir/category/خدمات/"},{"name":"رایگان","slug":"خدمات/رایگان","permalink":"http://javahosting.ir/category/خدمات/رایگان/"}],"tags":[{"name":"تبلیغاتی اینترنتی","slug":"تبلیغاتی-اینترنتی","permalink":"http://javahosting.ir/tag/تبلیغاتی-اینترنتی/"}]},{"title":"شبکه‌های اجتماعی","slug":"services/free/social","date":"2017-01-13T20:30:00.000Z","updated":"2017-03-12T20:18:16.726Z","comments":true,"path":"1395/10/25/services/free/social/","link":"","permalink":"http://javahosting.ir/1395/10/25/services/free/social/","excerpt":"","text":"برنامه نویسی سیستم شبکه‌های مجازی بر پایه جاوا و استفاده از سیستم های متن بازبرخی از این سرویس ها به شکل زیر است:پروژه متن باز اگزو eXoبرای درخواست این سرویس از لینک زیر می توانید استفاده کنید.","categories":[{"name":"خدمات","slug":"خدمات","permalink":"http://javahosting.ir/category/خدمات/"},{"name":"رایگان","slug":"خدمات/رایگان","permalink":"http://javahosting.ir/category/خدمات/رایگان/"}],"tags":[{"name":"شبکه‌های مجازی","slug":"شبکه‌های-مجازی","permalink":"http://javahosting.ir/tag/شبکه‌های-مجازی/"}]},{"title":"ویدئو کنفرانس","slug":"services/free/video","date":"2017-01-13T20:30:00.000Z","updated":"2017-03-12T20:20:32.398Z","comments":true,"path":"1395/10/25/services/free/video/","link":"","permalink":"http://javahosting.ir/1395/10/25/services/free/video/","excerpt":"","text":"برنامه نویسی سیستم ویدئو کنفرانس بر پایه جاوا و استفاده از سیستم های متن بازبرخی از این سرویس ها به شکل زیر است:پروژه متن باز جی‌تسی jitsi تیم جاواهاستینگ ماژول های بسیاری برای این پروژه به شکل متن بسته نوشته است.پروژه متن باز BBBبرای درخواست این سرویس از لینک زیر می توانید استفاده کنید.","categories":[{"name":"خدمات","slug":"خدمات","permalink":"http://javahosting.ir/category/خدمات/"},{"name":"رایگان","slug":"خدمات/رایگان","permalink":"http://javahosting.ir/category/خدمات/رایگان/"}],"tags":[{"name":"ویدئو کنفرانس","slug":"ویدئو-کنفرانس","permalink":"http://javahosting.ir/tag/ویدئو-کنفرانس/"}]},{"title":"طراحی و برنامه نویسی پروژه های سفارشی","slug":"services/special/index","date":"2017-01-13T20:30:00.000Z","updated":"2017-03-12T20:30:45.743Z","comments":true,"path":"1395/10/25/services/special/index/","link":"","permalink":"http://javahosting.ir/1395/10/25/services/special/index/","excerpt":"","text":"گروه جاواهاستینگ با تکیه بر تجربه چند ساله در حوزه برنامه نویسی جاوا نگارش سازمانی و با سابقه انجام پروژه های مختلف برای افراد و شرکت های معتبر، آماده همکاری با شما می باشد.","categories":[{"name":"خدمات","slug":"خدمات","permalink":"http://javahosting.ir/category/خدمات/"},{"name":"ویژه","slug":"خدمات/ویژه","permalink":"http://javahosting.ir/category/خدمات/ویژه/"}],"tags":[{"name":"پروژه سفارشی","slug":"پروژه-سفارشی","permalink":"http://javahosting.ir/tag/پروژه-سفارشی/"},{"name":"درخواست پروژه جاوا","slug":"درخواست-پروژه-جاوا","permalink":"http://javahosting.ir/tag/درخواست-پروژه-جاوا/"},{"name":"درخواست پروژه","slug":"درخواست-پروژه","permalink":"http://javahosting.ir/tag/درخواست-پروژه/"},{"name":"پروژه شرکتی","slug":"پروژه-شرکتی","permalink":"http://javahosting.ir/tag/پروژه-شرکتی/"},{"name":"پروژه سازمانی","slug":"پروژه-سازمانی","permalink":"http://javahosting.ir/tag/پروژه-سازمانی/"},{"name":"پروژه متن باز","slug":"پروژه-متن-باز","permalink":"http://javahosting.ir/tag/پروژه-متن-باز/"}]},{"title":"معرفی زبان برنامه نویسی جاوا","slug":"learning/SE/benefit/introduction","date":"2017-01-13T20:30:00.000Z","updated":"2017-03-17T07:57:54.476Z","comments":true,"path":"1395/10/25/learning/SE/benefit/introduction/","link":"","permalink":"http://javahosting.ir/1395/10/25/learning/SE/benefit/introduction/","excerpt":"","text":"برگه تقلب برای نسخه ۸ جاوا! # Java CheatSheet1. the basics2. string manipulation3. working with data structures4. dates and times5. regular expressions6. dealing with numbers and math7. input - output operations8. working with files and directories9. network clients10. packaging and documenting11. sorting algorithms## the basics#### hello, world! :#### if-else:#### loops:#### do-while: do { System.out.println(“Count is: “ + count); count++; } while (count &lt; 11);#### switch-case:#### arrays:#### two-dimentional arrays:#### objects:#### classes:#### methods:#### Java IDE comparison:yes I took this from WikipediaI recommend IntelliJ IDEA it’s free for students.## string manipulation#### comparing strings:12boolean result = str1.equals(str2);boolean result = str1.equalsIgnoreCase(str2);#### searching and rerieving substrings:123int result = str1.indexOf(str2);int result = str1.indexOf(str2,5);String index = str1.substring(14);#### processing a string one character at a time:1234for (int i=0;i&lt;str1.length();i++)&#123;char aChar = str1.charAt(i);&#125;#### Reversing a String by Character:12345678910111213141516public class Main &#123; public static void main(String[] args) &#123; String str1 = &quot;whatever string something&quot;; StringBuffer str1buff = new StringBuffer(str1); String str1rev = str1buff.reverse().toString(); System.out.println(str1rev); &#125;&#125;#### Reversing a String by Word:1234567891011121314151617181920212223242526272829303132public class Main &#123;public static void main(String[] args) &#123; String str1 = &quot;reverse this string&quot;; Stack&lt;Object&gt; stack = new Stack&lt;&gt;(); StringTokenizer strTok = new StringTokenizer(str1); while(strTok.hasMoreTokens())&#123; stack.push(strTok.nextElement()); &#125; StringBuffer str1rev = new StringBuffer(); while(!stack.empty())&#123; str1rev.append(stack.pop()); str1rev.append(&quot; &quot;); &#125; System.out.println(str1rev);&#125;&#125;#### making a string upper or lowercase:1234String strUpper = str1.toUpperCase();String strLower = str1.toLowerCase();#### removing end and start spaces:123String str1 = &quot; asdfsdf &quot;;str1.trim(); //asdfsdf#### removing all spaces:1str1.replace(&quot; &quot;,&quot;&quot;);#### parsing a comma separated string:12String str = &quot;tim,kerry,timmy,camden&quot;;String[] results = str.split(&quot;,&quot;);## working with data structures#### resizing an array:123456789101112131415161718192021222324252627int[] myArray = new int[10];int[] tmp = new int[myArray.length + 10];System.arraycopy(myArray, 0, tmp, 0, myArray.length);myArray = tmp;``` #### iterating over a collection:``` for (Iterator it = map.entrySet().iterator();it.hasNext();)&#123; Map.Entry entry = (Map.Entry)it.next(); Object key = entry.getKey(); Object value = entry.getValue(); &#125;``` #### creating a mapped collection:``` HashMap map = new HashMap(); map.put(key1,obj1); map.put(key2,obj2); map.put(key2,obj2);``` #### sorting an array: int[] nums = {1,4,7,324,0,-4}; Arrays.sort(nums); System.out.println(Arrays.toString(nums));12#### sorting an arrayList: List unsortList = new ArrayList(); unsortList.add(“CCC”); unsortList.add(“111”); unsortList.add(“AAA”); Collections.sort(unsortList);1#### finding an object in arrayList:int index = arrayList.indexOf(obj);1#### finding an object by value in a hashmap:hashmap.containsValue(obj);1#### finding an object by key in a hashmap:hashmap.containsKey(obj);1#### binary search in an array:int[] nums = new int[]{7,5,1,3,6,8,9,2};Arrays.sort(nums);int index = Arrays.binarySearch(nums,6);System.out.println(“6 is at index: “+ index);1#### converting arrayList to array:Object[] objects = arrayList.toArray();1#### converting hashmap to array:Object[] objects = hashmap.entrySet().toArray();1234## dates and times#### printing date and time:Date todaysDate = new Date(); //todays dateSimpleDateFormat formatter = new SimpleDateFormat(“EEE, dd MMM yyyy HH:mm:ss”); //date formatString formattedDate = formatter.format(todaysDate);System.out.println(formattedDate);12#### converting date to calendar:Date mDate = new Date();Calendar mCal = Calendar.getInstance();mCal.setTime(mDate);12#### converting calendar to date:Calendar mCal = Calendar.getInstance();Date mDate = mCal.getTime();12#### parsing Strings into dates:public void StringtoDate(String x) throws ParseException{String date = “March 20, 1992 or 3:30:32pm”;DateFormat df = DateFormat.getDateInstance();Date newDate = df.parse(date); } 123456789 #### date arithmetic using date objects: ``` Date date = new Date();long time = date.getTime();time += 5*24*60*60*1000; //may give a numeric overflow error on IntelliJ IDEADate futureDate = new Date(time);System.out.println(futureDate);#### date arithmetic using calendar objects: 12Calendar today = Calendar.getInstance();today.add(Calendar.DATE,5);#### difference between two dates: 12long diff = time1 - time2;diff = diff/(1000*60*60*24);#### comparing dates: 1boolean result = date1.equals(date2);#### getting details from calendar: 12345678910 Calendar cal = Calendar.getInstance();cal.get(Calendar.MONTH);cal.get(Calendar.YEAR);cal.get(Calendar.DAY_OF_YEAR);cal.get(Calendar.WEEK_OF_YEAR);cal.get(Calendar.DAY_OF_MONTH);cal.get(Calendar.DAY_OF_WEEK_IN_MONTH);cal.get(Calendar.DAY_OF_MONTH);cal.get(Calendar.HOUR_OF_DAY);#### calculating the elapsed time: 12345long startTime = System.currentTimeMillis();//times flies by..long finishTime = System.currentTimeMillis();long timeElapsed = startTime-finishTime;System.out.println(timeElapsed);## regular expressions#### finding matching text using REGEX:12345678910String pattern = &quot;[TJ]im&quot;; Pattern regPat = Pattern.compile(pattern,Pattern.CASE_INSENSITIVE); String text = &quot;This is Jim and that&apos;s Tim&quot;; Matcher matcher = regPat.matcher(text); if (matcher.find())&#123; String matchedText = matcher.group(); System.out.println(matchedText); &#125;#### replacing a matched text:123456String pattern = &quot;[TJ]im&quot;; Pattern regPat = Pattern.compile(pattern,Pattern.CASE_INSENSITIVE); String text = &quot;This is jim and that&apos;s Tim&quot;; Matcher matcher = regPat.matcher(text); String text2 = matcher.replaceAll(&quot;Tom&quot;); System.out.println(text2);#### replacing a matched text using StringBuffer:1234567891011121314 Pattern p = Pattern.compile(&quot;My&quot;); Matcher m = p.matcher(&quot;My dad and My mom&quot;); StringBuffer sb = new StringBuffer(); boolean found = m.find(); while(found)&#123; m.appendReplacement(sb,&quot;Our&quot;); found = m.find(); &#125; m.appendTail(sb); System.out.println(sb);``` #### finding all occurences of a pattern:String pattern = “\\sa(\\w)t(\\w)“; //contains “at” Pattern regPat = Pattern.compile(pattern); String text = “words something at atte afdgdatdsf hey”; Matcher matcher = regPat.matcher(text); while(matcher.find()){ String matched = matcher.group(); System.out.println(matched); } 1#### printing lines containing a pattern: String pattern = “^a”; Pattern regPat = Pattern.compile(pattern); Matcher matcher = regPat.matcher(“”); BufferedReader reader = new BufferedReader(new FileReader(“file.txt”)); String line; while ((line = reader.readLine())!= null){ matcher.reset(line); if (matcher.find()){ System.out.println(line); } }1#### matching new lines in text:String pattern = “\\d$”; //any single digit String text = “line one\\n line two\\n line three\\n”; Pattern regPat = Pattern.compile(pattern, Pattern.MULTILINE); Matcher matcher = regPat.matcher(text); while (matcher.find()){ System.out.println(matcher.group()); } #### regex: * beginning of a string: ^ * end of a string: $ * 0 or 1 times: ? * 0 or more times: (*) //without brackets * 1 or more times: + * alternative characters: [...] * alternative patterns: | * any character: . * a digit: \\d * a non-digit: \\D * whitespace: \\s * non-whitespace: \\S * word character: \\w * non word character: \\W ## dealing with numbers and math #### built-in types: ![alt tag](https://s3.postimg.org/7ihyxdvar/Ekran_Resmi_2017_03_04_10_03_48.png) * byte: 8bits, Byte * short: 16bits, Short * long: 64bits, Long * float: 32bits, Float #### checking whether a string is valid number: String str = “dsfdfsd54353%%%”; try{ int result = Integer.parseInt(str); } catch (NumberFormatException e){ System.out.println(“not valid”); }#### comparing Double:Double a = 4.5; Double b= 4.5; boolean result = a.equals(b); if (result) System.out.println(“equal”); #### rounding:double doubleVal = 43.234234200000000234040324; float floatVal = 2.98f; long longResult = Math.round(doubleVal); int intResult = Math.round(floatVal); System.out.println(longResult + “ and “ + intResult); // 43 and 3#### formatting numbers:double value = 2343.8798; NumberFormat numberFormatter; String formattedValue; numberFormatter = NumberFormat.getNumberInstance(); formattedValue = numberFormatter.format(value); System.out.format(“%s%n”,formattedValue); //2.343,88#### formatting currencies:double currency = 234546457.99; NumberFormat currencyFormatter; String formattedCurrency; currencyFormatter = NumberFormat.getCurrencyInstance(); formattedCurrency = currencyFormatter.format(currency); System.out.format(“%s%n”,formattedCurrency); // $ 234.546.457,99#### binary, octal and hexadecimal conversion:int val = 25;String binaryStr = Integer.toBinaryString(val);String octalStr = Integer.toOctalString(val);String hexStr = Integer.toHexString(val);#### generating random numbers:double rn = Math.random(); int rint = (int) (Math.random()10); // random int between 0-10 System.out.println(rn); System.out.println(rint);#### calculating trigonometric functions:double cos = Math.cos(45); double sin = Math.sin(45); double tan = Math.tan(45);#### calculating logarithmdouble logVal = Math.log(125.5);#### Math library: [![Ekran Resmi 2017-03-04 10.42.52.png](https://s27.postimg.org/fuya7a83n/Ekran_Resmi_2017_03_04_10_42_52.png)](https://postimg.org/image/f5fhux7jz/) [![library-calls.png](https://s29.postimg.org/ux3o2zijb/library_calls.png)](https://postimg.org/image/ow5z5wvwz/) ## input - output operations: #### reading a text from input://throw IOexception firstBufferedReader inStream = new BufferedReader(new InputStreamReader(System.in)); String inline =””; while (!(inline.equalsIgnoreCase(“quit”))){ System.out.println(“prompt&gt; “); inline=inStream.readLine(); }#### formatting output:StringBuffer buffer = new StringBuffer(); Formatter formatter = new Formatter(buffer, Locale.US); formatter.format(“PI: “+Math.PI); System.out.println(buffer.toString());```#### formatter format calls:#### opening file by name: BufferedReader br = new BufferedReader(new FileReader(textFile.txt)); //for reading BufferedWriter bw = new BufferedWriter(new FileWriter(textFile.txt)); //for writing#### reading a binary data: InputStream is = new FileInputStream(fileName); int offset = 0; int bytesRead = is.read(bytes, ofset, bytes.length-offset);#### seeking in a file: File file = new File(something.bin); RandomAccessFile raf = new RandomAccessFile(file,”rw”); raf.seek(file.length());#### reading a Jar/zip/rar file: ZipFile file =new ZipFile(filename); Enumeration entries = file.entries(); while(entries.hasMoreElements()){ ZipEntry entry = (ZipEntry) entries.nextElement(); if (entry.isDirectory()){ //do something } else{ //do something } } file.close();## working with files and directories#### creating a file: File f = new File(“textFile.txt”); boolean result = f.createNewFile();#### renaming a file: File f = new File(“textFile.txt”); File newf = new File(“newTextFile.txt”); boolean result = f.renameto(newf);#### deleting a file: File f = new File(“somefile.txt”); f.delete();#### changing file attributes: File f = new File(“somefile.txt”); f.setReadOnly(); // making the file read only f.setLastModified(desired time);#### getting the size of a file: File f = new File(“somefile.txt”); long length = file.length();#### checking if a file exist or not: File f = new File(“somefile.txt”); boolean status = f.exists();#### moving a file to another directory: File f = new File(“somefile.txt”); File dir = new File(“directoryName”); boolean success = f.renameTo(new File(dir, file.getName()));#### getting an absolute filename path: File f = new File(“somefile.txt”); File absPath = f.getAbsoluteFile();#### determining if it’s a file or a directory: File f = new File(“somefile.txt”); boolean isDirectory = f.isDirectory(); System.out.println(isDirectory); //false#### listing a directory: File directory = new File(“users/ege”); String[] result = directory.list();#### creating a directory: boolean result = new File(“users/ege”).mkdir();## network clients#### contacting a server: String serverName = “www.egek.us”; Socket socket = new Socket(serverName, 80); System.out.println(socket);#### handling network errors: try { Socket sock = new Socket(server_name, tcp_port); System.out.println(“Connected to “ + server_name); sock.close( ); } catch (UnknownHostException e) { System.err.println(server_name + “ Unknown host”); return; } catch (NoRouteToHostException e) { System.err.println(server_name + “ Unreachable” ); return; } catch (ConnectException e) { System.err.println(server_name + “ connect refused”); return; } catch (java.io.IOException e) { System.err.println(server_name + ‘ ‘ + e.getMessage( )); return; }## packaging and documenting#### creating a package: package com.ege.example;#### documenting classes with JavaDoc: javadoc -d \\home\\html -sourcepath \\home\\src -subpackages java.net#### archiving classes with Jar: jar cf project.jar .class#### running a program from a Jar: java -jar something.jar## sorting algorithms Bubble Sort Linear Search Binary Search Selection Sort* Insertion SortOver here","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"},{"name":"نکات جالب","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE/نکات-جالب","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/نکات-جالب/"}],"tags":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/tag/آموزش-جاوا/"},{"name":"معرفی جاوا","slug":"معرفی-جاوا","permalink":"http://javahosting.ir/tag/معرفی-جاوا/"}]},{"title":"جاوا ۸","slug":"learning/SE/benefit/cheatsheet","date":"2017-01-13T20:30:00.000Z","updated":"2017-03-17T07:49:14.895Z","comments":true,"path":"1395/10/25/learning/SE/benefit/cheatsheet/","link":"","permalink":"http://javahosting.ir/1395/10/25/learning/SE/benefit/cheatsheet/","excerpt":"","text":"برگه تقلب برای نسخه ۸ جاوا! # JAVA 8 - Cheat Sheet## Lambda Expression12(int a) -&gt; a * 2; // Calculate the double of aa -&gt; a * 2; // or simply without type1(a, b) -&gt; a + b; // Sum of 2 parametersIf the lambda is more than one expression we can use { } and return12345(x, y) -&gt; &#123; int sum = x + y; int avg = sum / 2; return avg;&#125;A lambda expression cannot stand alone in Java, it need to be associated to a functional interface.123456interface MyMath &#123; int getDoubleOf(int a);&#125; MyMath d = a -&gt; a * 2; // associated to the interfaced.getDoubleOf(4); // is 8—All examples with “list” use :1List&lt;String&gt; list = [Bohr, Darwin, Galilei, Tesla, Einstein, Newton]## Collectionssort sort(list, comparator)1234list.sort((a, b) -&gt; a.length() - b.length())list.sort(Comparator.comparing(n -&gt; n.length())); // samelist.sort(Comparator.comparing(String::length)); // same//&gt; [Bohr, Tesla, Darwin, Newton, Galilei, Einstein]removeIf12list.removeIf(w -&gt; w.length() &lt; 6);//&gt; [Darwin, Galilei, Einstein, Newton]mergemerge(key, value, remappingFunction)123456789101112Map&lt;String, String&gt; names = new HashMap&lt;&gt;();names.put(\"Albert\", \"Ein?\");names.put(\"Marie\", \"Curie\");names.put(\"Max\", \"Plank\");// Value \"Albert\" exists// &#123;Marie=Curie, Max=Plank, Albert=Einstein&#125;names.merge(\"Albert\", \"stein\", (old, val) -&gt; old.substring(0, 3) + val);// Value \"Newname\" don't exists// &#123;Marie=Curie, Newname=stein, Max=Plank, Albert=Einstein&#125;names.merge(\"Newname\", \"stein\", (old, val) -&gt; old.substring(0, 3) + val);## Method Expressions Class::staticMethodAllows to reference methods (and constructors) without executing them12345// Lambda Form:getPrimes(numbers, a -&gt; StaticMethod.isPrime(a));// Method Reference:getPrimes(numbers, StaticMethod::isPrime);| Method Reference | Lambda Form || —————- | ———– || StaticMethod::isPrime | n -&gt; StaticMethod.isPrime(n) || String::toUpperCase | (String w) -&gt; w.toUpperCase() || String::compareTo | (String s, String t) -&gt; s.compareTo(t) || System.out::println | x -&gt; System.out.println(x) || Double::new | n -&gt; new Double(n) || String[]::new | (int n) -&gt; new String[n] |## StreamsSimilar to collections, but - They don’t store their own data - The data comes from elsewhere (collection, file, db, web, …) - immutable (produce new streams) - lazy (only computes what is necessary !)1234// Will compute just 3 \"filter\"Stream&lt;String&gt; longNames = list .filter(n -&gt; n.length() &gt; 8) .limit(3);Create a new stream1234567Stream&lt;Integer&gt; stream = Stream.of(1, 2, 3, 5, 7, 11);Stream&lt;String&gt; stream = Stream.of(\"Jazz\", \"Blues\", \"Rock\");Stream&lt;String&gt; stream = Stream.of(myArray); // or from an arraylist.stream(); // or from a list// Infinit stream [0; inf[Stream&lt;Integer&gt; integers = Stream.iterate(0, n -&gt; n + 1);Collecting results123456789// Collect into an array (::new is the constructor reference)String[] myArray = stream.toArray(String[]::new);// Collect into a List or SetList&lt;String&gt; myList = stream.collect(Collectors.toList());Set&lt;String&gt; mySet = stream.collect(Collectors.toSet());// Collect into a StringString str = list.collect(Collectors.joining(\", \"));map map(mapper)Applying a function to each element1234567// Apply \"toLowerCase\" for each elementres = stream.map(w -&gt; w.toLowerCase());res = stream.map(String::toLowerCase);//&gt; bohr darwin galilei tesla einstein newtonres = Stream.of(1,2,3,4,5).map(x -&gt; x + 1);//&gt; 2 3 4 5 6filter filter(predicate)Retains elements that match the predicate123456// Filter elements that begin with \"E\"res = stream.filter(n -&gt; n.substring(0, 1).equals(\"E\"));//&gt; Einsteinres = Stream.of(1,2,3,4,5).filter(x -&gt; x &lt; 3);//&gt; 1 2reduceReduce the elements to a single value123String reduced = stream .reduce(\"\", (acc, el) -&gt; acc + \"|\" + el);//&gt; |Bohr|Darwin|Galilei|Tesla|Einstein|Newtonlimit limit(maxSize)The n first elements12res = stream.limit(3);//&gt; Bohr Darwin GalileiskipDiscarding the first n elements12res = strem.skip(2); // skip Bohr and Darwin//&gt; Galilei Tesla Einstein NewtondistinctRemove duplicated elemetns12res = Stream.of(1,0,0,1,0,1).distinct();//&gt; 1 0sortedSort elements (must be Comparable)12res = stream.sorted();//&gt; Bohr Darwin Einstein Galilei Newton TeslaallMatch12// Check if there is a \"e\" in each elementsboolean res = words.allMatch(n -&gt; n.contains(\"e\"));anyMatch: Check if there is a “e” in an elementnoneMatch: Check if there is no “e” in elementsparallelReturns an equivalent stream that is parallelfindAnyfaster than findFirst on parallel streams### Primitive-Type StreamsWrappers (like Stream) are inefficients. It requires a lot of unboxing and boxing for each element. Better to use IntStream, DoubleStream, etc.Creation123456IntStream stream = IntStream.of(1, 2, 3, 5, 7);stream = IntStream.of(myArray); // from an arraystream = IntStream.range(5, 80); // range from 5 to 80Random gen = new Random();IntStream rand = gen(1, 9); // stream of randomsUse mapToX (mapToObj, mapToDouble, etc.) if the function yields Object, double, etc. values.### Grouping ResultsCollectors.groupingBy1234// Groupe by lengthMap&lt;Integer, List&lt;String&gt;&gt; groups = stream .collect(Collectors.groupingBy(w -&gt; w.length()));//&gt; 4=[Bohr], 5=[Tesla], 6=[Darwin, Newton], ...Collectors.toSet123// Same as before but with Set... Collectors.groupingBy( w -&gt; w.substring(0, 1), Collectors.toSet()) ...Collectors.countingCount the number of values in a groupCollectors.summing__summingInt, summingLong, summingDouble to sum group valuesCollectors.averaging__averagingInt, averagingLong, …12// Average length of each element of a groupCollectors.averagingInt(String::length)PS: Don’t forget Optional (like Map&lt;T, Optional&lt;T&gt;&gt;) with some Collection methods (like Collectors.maxBy).### Parallel StreamsCreation12Stream&lt;String&gt; parStream = list.parallelStream();Stream&lt;String&gt; parStream = Stream.of(myArray).parallel();unorderedCan speed up the limit or distinct1stream.parallelStream().unordered().distinct();PS: Work with the streams library. Eg. use filter(x -&gt; x.length() &lt; 9) instead of a forEach with an if.## OptionalIn Java, it is common to use null to denote absence of result.Problems when no checks: NullPointerException.12345678910// Optional&lt;String&gt; contains a string or nothingOptional&lt;String&gt; res = stream .filter(w -&gt; w.length() &gt; 10) .findFirst();// length of the value or \"\" if nothingint length = res.orElse(\"\").length();// run the lambda if there is a valueres.ifPresent(v -&gt; results.add(v));Return an Optional1234Optional&lt;Double&gt; squareRoot(double x) &#123; if (x &gt;= 0) &#123; return Optional.of(Math.sqrt(x)); &#125; else &#123; return Optional.empty(); &#125;&#125;—Note on inferance limitations1234interface Pair&lt;A, B&gt; &#123; A first(); B second();&#125;A steam of type Stream&lt;Pair&lt;String, Long&gt;&gt; : - stream.sorted(Comparator.comparing(Pair::first)) // ok - stream.sorted(Comparator.comparing(Pair::first).thenComparing(Pair::second)) // dont workJava cannot infer type for the .comparing(Pair::first) part and fallback to Object, on which Pair::first cannot be applied.The required type for the whole expression cannot be propagated through the method call (.thenComparing) and used to infer type of the first part.Type must be given explicitly.1234stream.sorted( Comparator.&lt;Pair&lt;String, Long&gt;, String&gt;comparing(Pair::first) .thenComparing(Pair::second)) // ok—This cheat sheet was based on the lecture of Cay Horstmannhttp://horstmann.com/heig-vd/spring2015/poo/","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"},{"name":"نکات جالب","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE/نکات-جالب","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/نکات-جالب/"}],"tags":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/tag/آموزش-جاوا/"},{"name":"جاوا ۸","slug":"جاوا-۸","permalink":"http://javahosting.ir/tag/جاوا-۸/"}]},{"title":"تاریخ فارسی","slug":"learning/SE/mycode/date","date":"2017-01-13T20:30:00.000Z","updated":"2017-03-16T22:04:09.945Z","comments":true,"path":"1395/10/25/learning/SE/mycode/date/","link":"","permalink":"http://javahosting.ir/1395/10/25/learning/SE/mycode/date/","excerpt":"","text":"چگونه می توان از تاریخ فارسی در کلاس جاوا به عنوان یک رشته استفاده کرد؟پاسخ سوالی که در این درس به آن می پردازیم، بسیار کاربردی و مورد نیاز است.برای اینکار شما کافیست دو کتابخانه زیر را به پروژه خود اضافه کنید و سپس با کدزیر یک رشته که شامل تاریخ امروز به شمسی می باشد در کلاس زیر تولید کنید.لینک کتابخانه ICU4Jلینک کتابخانه مبدل تقویم آقای قاسم‌کیانی 1234567891011121314151617181920212223242526import com.ghasemkiani.util.icu.PersianCalendar;import com.ibm.icu.text.DateFormat;import com.ibm.icu.text.SimpleDateFormat;import com.ibm.icu.util.ULocale;import java.util.Date;import java.util.TimeZone;/** * * @author mohammadghasemy */public class persian &#123; ULocale uLocale = new ULocale(\"fa_IR\"); TimeZone timeZone = TimeZone.getTimeZone(TimeZone.getDefault().getID()); PersianCalendar calendar = new PersianCalendar( uLocale); public String persiandate(Date d)&#123; calendar.setTime( d); SimpleDateFormat sds =(SimpleDateFormat)calendar.getDateTimeFormat(DateFormat.LONG,DateFormat.MEDIUM,uLocale); return sds.format(calendar.getTime()); &#125; public static void main(String a[])&#123; persian p=new persian(); String current_day_in_jalalli=p.persiandata(new Date()); System.out.println( current_day_in_jalalli); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"},{"name":"کدهای بهینه شدهٔ من","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE/کدهای-بهینه-شدهٔ-من","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/کدهای-بهینه-شدهٔ-من/"}],"tags":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/tag/آموزش-جاوا/"},{"name":"تقویم جلالی در جاوا","slug":"تقویم-جلالی-در-جاوا","permalink":"http://javahosting.ir/tag/تقویم-جلالی-در-جاوا/"}]},{"title":"درباره ما","slug":"about/about","date":"2017-01-13T20:30:00.000Z","updated":"2017-03-12T19:44:10.529Z","comments":true,"path":"1395/10/25/about/about/","link":"","permalink":"http://javahosting.ir/1395/10/25/about/about/","excerpt":"","text":"جاواهاستینگ اولین سامانه متمرکز ارائه خدمات هاستینگ بر روی پلت فرم جاوا جاوا است.کلید اصلی آن زمانی که ما در حال راه اندازی پروژه های جاوا در سال های ۸۵ الی ۸۶ به دنبال هاست جاوا بودیم، زده شد، و در نهایت بعد از فرازها و فرودهای بسیار در سال ۹۵ راه اندازی شد.هدف اصلی ما ارائه هاست جاوا به برنامه نویسان جاوا در ایران می باشد.ما با همکاری شرکت پارس آنلاین سرورهای خود را برای هاستینگ قدرتمند تجهیز کرده ایم، استفاده از سرورهای موجود در داخل کشور هزینه های جاواهاستینگ را بالا برده است اما در کنار آن سرعت بالا را به مشتریانمان ارائه می کنیم که از این بابت بسیار خرسندیم.","categories":[{"name":"درباره جاواهاستینگ","slug":"درباره-جاواهاستینگ","permalink":"http://javahosting.ir/category/درباره-جاواهاستینگ/"},{"name":"درباره ما","slug":"درباره-جاواهاستینگ/درباره-ما","permalink":"http://javahosting.ir/category/درباره-جاواهاستینگ/درباره-ما/"}],"tags":[{"name":"درباره‌ما","slug":"درباره‌ما","permalink":"http://javahosting.ir/tag/درباره‌ما/"}]},{"title":"تعرفه ارائه هاست WildFly 10","slug":"prices/wildfly","date":"2017-01-13T20:30:00.000Z","updated":"2017-03-12T20:45:13.583Z","comments":true,"path":"1395/10/25/prices/wildfly/","link":"","permalink":"http://javahosting.ir/1395/10/25/prices/wildfly/","excerpt":"","text":"وب سرور میزان رم مدت زمان میزان هارد پشتیبانی بها WildFly ۱۰۲۸مگ یک‌ماه ۶۴مگ ایمیل ۵۰هزارتومان WildFly ۱۰۲۸مگ یک‌ماه ۵۱۲مگ ایمیل ۹۹هزارتومان WildFly ۱۰۲۸مگ یک‌ماه ۲۰۴۸مگ ایمیل ۲۵۰هزارتومان","categories":[{"name":"تعرفه‌ها","slug":"تعرفه‌ها","permalink":"http://javahosting.ir/category/تعرفه‌ها/"},{"name":"Jboss Wildfly Server","slug":"تعرفه‌ها/Jboss-Wildfly-Server","permalink":"http://javahosting.ir/category/تعرفه‌ها/Jboss-Wildfly-Server/"}],"tags":[{"name":"WildFly","slug":"WildFly","permalink":"http://javahosting.ir/tag/WildFly/"}]},{"title":"قوانین استفاده از سرویس ها","slug":"about/law","date":"2017-01-13T20:30:00.000Z","updated":"2017-03-12T21:07:04.058Z","comments":true,"path":"1395/10/25/about/law/","link":"","permalink":"http://javahosting.ir/1395/10/25/about/law/","excerpt":"","text":"شرایط استفاده از سرویس هاکلیه مشتریان جاواهاستینگ موظف به رعایت شرایط و قوانین وضع شده زیر می باشند و استفاده از سرویس های جاواهاستینگ به منزله قبول قوانین ذیل می باشد. و در صورت نقض قوانین و اقدام به راه اندازی سایت هایی مغایر با قوانین جاواهاستینگ،سرویس متخلف بدون هماهنگی مسدود شده و بک آپ اطلاعات فقط و فقط در صورت پرداخت جریمه در اختیار کاربر قرار خواهد گرفت. ۱- Port Scan-Phishing-Scam– تلاش برای نفوذ غیر مجاز: در صورت شناسایی مشتریانی که به هر شکلی قصد نفوذ و دسترسی غیر مجاز به سرورها و اطلاعات سایر مشتریان را دارند ، سرویس مشتری متخلف بدون هماهنگی سریعا مسدود و کلیه اطلاعات حذف خواهد شد. ۲- ارسال انبوه ایمیل (Spam): سرویس مشتریانی که اقدام به ارسال ایمیل های تبلیغاتی و انبوه (به اصطلاح اسپم) می کنند بدون هماهنگی آن ها مسدود و کلیه اطلاعات حذف خواهد شد. ۳- فعالیت در زمینه هک ، کرک و امنیت: کلیه فعالیت ها در زمینه آموزش هک ، کرک ، امنیت و موارد خرابکارانه ، بر روی سرورها و میزبانی وب جاواهاستینگ قدغن می باشد و در صورت مشاهده ، سرویس مشتری سریعا مسدود و کلیه اطلاعات حذف خواهد شد. ۴- تروجان - ویروس – اسکریپت های مخرب : استفاده ازهر گونه تورجان ، شل و اسکریپت به زبان های مختلف برنامه نویسی برای ایجاد دسترسی غیر مجاز به منابع سرورها و سایت های متعلق به جاواهاستینگ مجاز نمی باشد و در صورت آپلود این گونه برنامه ها حتی فقط برای تست ، بدون هماهنگی سرویس مشتری مسدود و کلیه اطلاعات حذف خواهد شد. ۵- سایت های موزیک و فیلم : به دلیل سیاست های خاص وزارت ارشاد اسلامی به هیچ عنوان از سایت هایی که به هر نحو (تخصصی و غیر تخصصی) در زمینه های فیلم و موزیک فعالیت می کنند میزبانی نخواهند شد و در صورت تخلف ، سرویس مشتری بدون هماهنگی مسدود و کلیه اطلاعات حذف خواهد شد. ۶- سایت های ضد اخلاقی – دینی و سیاسی : جاواهاستینگ از کلیه سایت های ضد اخلاقی یا مخالف ادیان الهی و همچنین سایت هایی که فعالیت سیاسی دارند ، پشتیبانی نکرده و در صورت تخلف ، سرویس مشتری بدون هماهنگی مسدود و کلیه اطلاعات حذف خواهد شد. ۷- فلیتر شدن : در صورت فیلتر شدن سایت مشتریان به هر دلیلی دسترسی مشتری بدون هماهنگی مسدود شده و جاواهاستینگ در خصوص نگهداری فایل ها و اطلاعات سرویس مشتری هیچ تضمینی نخواهد داشت. ۸- نصب اسکریپت های دانلود فایل(Url Download-Leecher) : مشتریان سرویس هاست اشتراکی جاواهاستینگ مجاز به نصب اسکریپت هایی که از سایت های مثل rapidshare ،MegaUpload و Hotfile و Torrent و … فایل دانلود می کنند (معمولا به لیچر-Leecher معروف هستند) نمی باشند و در صورت مشاهده ، سرویس مشتری بدون هماهنگی مسدود و کلیه فایل های دانلود شده از روی سرور حذف خواهند شد. ۹- فایل هاستینگ : بر روی سرورهای هاست اشتراکی به هیچ وجه اجازه قرار دادن فایل و اطلاعات برای دانلود کاربران داده نخواهد شد و در صورت مشاهده بدون هماهنگی سرویس مشتری مسدود و کلیه اطلاعات حذف خواهد شد. ۱۰- سایت های ارائه خدمات میزبانی رایگان (فایل هاستینگ ، سایت هاستینگ و … ):این قبیل سایت ها بر روی سرویس های هاست اشتراکی جاواهاستینگ قابل میزبانی نبوده و به محض مشاهده بدون اطلاع قبلی سرویس مشتری مسدود و از روی سرور حذف خواهد شد. ۱۱- عدم رعایت حق کپی رایت: استفاده غیر قانونی از نرم افزار ها و اسکریپت های ایرانی و بین المللی که دارای حق کپی رایت می باشند به هر نحو بر روی سرویس های جاواهاستینگ قدغن می باشد و به محض مشاهده تخلف سرویس مشتری مسدود و کلیه اطلاعات حذف خواهد شد. ۱۲- سیستم های جامعه مجازی و چت روم و وبلاگ دهی: میزبانی سایت هایی در زمینه جامعه مجازی و چت روم و وبلاگ دهی فعالیت می کنند به دلیل استفاده بیش از حد از منابع بر روی هاست اشتراکی مقدور نخواهند بود و میزبانی این سایت ها بر روی سرورهای مجازی مشروط به عدم استفاده بیش از حد از منابع سرور خواهد بود. ۱۳- استفاده بیش از حد از منابع: کلیه مشتریان موظف هستند از منابع سرور متناسب با محدودیت های سرویس خود استفاده نمایند . در صورتی که به هر دلیل استفاده مشتری از منابع سرور بیش از حد معین سرویس او باشد ، سرویس مشتری مسدود خواهد شد و ملاک تشخیص استفاده بیش از حد ، سیستم های مانیتورینگ و تکنسین های فنی جاواهاستینگ خواهد بود. ۱۴- میزبانی سایت های تحلیلی و خبری و وب سرویس ها : میزبانی سایت های تحلیلی و خبری و وب سرویس ها بر روی هاست های اشتراکی معمولی غیر مجاز است و تنها بر روی هاست های حرفه و سرورهای مجازی و اختصاصی قابل میزبانی می باشند. برای مشتریان سرویس میزبانی وب حد مجاز استفاده از پردازش گر ۱۰ درصد و از رم ۱۰۰ مگابایت در بازه زمانی یک دقیقه می باشد و مشتریان سرورهای مجازی و اختصاصی طبق موارد مندرج در اطلاعات سرویس ها مجاز به استفاده از منابع می باشند.","categories":[{"name":"درباره جاواهاستینگ","slug":"درباره-جاواهاستینگ","permalink":"http://javahosting.ir/category/درباره-جاواهاستینگ/"},{"name":"درباره ما","slug":"درباره-جاواهاستینگ/درباره-ما","permalink":"http://javahosting.ir/category/درباره-جاواهاستینگ/درباره-ما/"}],"tags":[{"name":"قوانین","slug":"قوانین","permalink":"http://javahosting.ir/tag/قوانین/"}]},{"title":"تعرفه ارائه هاست تامکت","slug":"prices/tomcat","date":"2017-01-09T20:30:00.000Z","updated":"2017-03-12T20:42:09.881Z","comments":true,"path":"1395/10/21/prices/tomcat/","link":"","permalink":"http://javahosting.ir/1395/10/21/prices/tomcat/","excerpt":"","text":"وب سرور میزان رم مدت زمان میزان هارد پشتیبانی بها تام‌کت ۲۵۶مگ یک‌ماه ۳۲مگ ایمیل ۱۰هزارتومان تام‌کت ۲۵۶مگ یک‌ماه ۶۴مگ ایمیل ۲۵هزارتومان تام‌کت ۲۵۶مگ یک‌ماه ۱۲۸مگ ایمیل ۴۵هزارتومان","categories":[{"name":"تعرفه‌ها","slug":"تعرفه‌ها","permalink":"http://javahosting.ir/category/تعرفه‌ها/"},{"name":"Apache Tomcat Server","slug":"تعرفه‌ها/Apache-Tomcat-Server","permalink":"http://javahosting.ir/category/تعرفه‌ها/Apache-Tomcat-Server/"}],"tags":[{"name":"تامکت","slug":"تامکت","permalink":"http://javahosting.ir/tag/تامکت/"},{"name":"Apache Tomcat","slug":"Apache-Tomcat","permalink":"http://javahosting.ir/tag/Apache-Tomcat/"},{"name":"وب سرور آپاچی تامکت نسخه ۹","slug":"وب-سرور-آپاچی-تامکت-نسخه-۹","permalink":"http://javahosting.ir/tag/وب-سرور-آپاچی-تامکت-نسخه-۹/"}]},{"title":"SimpleConstructor","slug":"learning/SE/initAndCleanup/SimpleConstructor","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.704Z","comments":true,"path":"1395/10/17/learning/SE/initAndCleanup/SimpleConstructor/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/initAndCleanup/SimpleConstructor/","excerpt":"","text":"12345678910111213141516171819202122232425262728293031323334package org.javacore.initAndCleanup;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-9-7 16:54:19 * 简单构造器的展示 */public class SimpleConstructor &#123; public static void main(String[] args) &#123; for (int i = 0; i &lt; 10; i++) &#123; new Child(); &#125; &#125;&#125;// Child类class Child &#123; Child() &#123; // Child类的构造器 System.out.print(\"Child init... \"); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"SimpleConstructor2","slug":"learning/SE/initAndCleanup/SimpleConstructor2","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.703Z","comments":true,"path":"1395/10/17/learning/SE/initAndCleanup/SimpleConstructor2/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/initAndCleanup/SimpleConstructor2/","excerpt":"","text":"12345678910111213141516171819202122232425262728293031323334package org.javacore.initAndCleanup;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-9-7 16:54:19 * 带参数简单构造器的展示 */public class SimpleConstructor2 &#123; public static void main(String[] args) &#123; for (int i = 0; i &lt; 10; i++) &#123; new Child2(i); &#125; &#125;&#125;// Child类class Child2 &#123; Child2(int i) &#123;// 带参数的Child类构造器 System.out.print(\"Child init \" + i + \" \"); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"VoidConstructor","slug":"learning/SE/initAndCleanup/VoidConstructor","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.704Z","comments":true,"path":"1395/10/17/learning/SE/initAndCleanup/VoidConstructor/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/initAndCleanup/VoidConstructor/","excerpt":"","text":"12345678910111213141516171819202122232425262728293031package org.javacore.initAndCleanup;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-9-8 09:31:12 * 默认构造函数和方法的区别 */public class VoidConstructor &#123; VoidConstructor()&#123; // this is a constructor &#125; void VoidConstructor() &#123; // this is a method,not a constructor &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"TextFile","slug":"learning/SE/io/TextFile","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.685Z","comments":true,"path":"1395/10/17/learning/SE/io/TextFile/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/io/TextFile/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115package org.javacore.io;import java.io.BufferedReader;import java.io.File;import java.io.FileReader;import java.io.IOException;import java.io.PrintWriter;import java.util.ArrayList;import java.util.Arrays;import java.util.TreeSet;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-9-30 16:10:18 * 文本文件的操作案例 */public class TextFile extends ArrayList&lt;String&gt; &#123; private static final long serialVersionUID = -6710557138987846943L; // 读取文件内容，返回内容字符串 public static String read(String fileName) &#123; StringBuilder sb = new StringBuilder(); try &#123; // 创建缓存字符输入流 BufferedReader in = new BufferedReader(new FileReader(// 创建读取字符文件类 new File(fileName).getAbsolutePath()));// 文件绝对路径地址 try &#123; String s; // 读取一个文本行 while ((s = in.readLine()) != null) &#123; sb.append(s); sb.append(\"\\n\"); &#125; &#125; finally &#123; in.close(); &#125; &#125; catch (IOException e) &#123; throw new RuntimeException(e); &#125; return sb.toString(); &#125; // 将字符串写入一个文本文件 public static void write(String fileName,String text) &#123; try &#123; // 创建打印输出流 PrintWriter out = new PrintWriter( new File(fileName).getAbsolutePath()); try &#123; // 写入字符流 out.write(text); &#125; finally &#123; out.close(); &#125; &#125; catch (IOException e) &#123; throw new RuntimeException(e); &#125; &#125; // 通过正则匹配，读取文件 public TextFile(String fileName,String splitter) &#123; super(Arrays.asList(read(fileName).split(splitter))); // 移除一个空格位置 if (get(0).equals(\"\")) remove(0); &#125; public TextFile(String fileName) &#123; this(fileName, \"\\n\"); &#125; // 写入一个文本文件 public void write(String fileName) &#123; try &#123; // 创建打印输出流 PrintWriter out = new PrintWriter( new File(fileName).getAbsolutePath()); try &#123; for (String item : this) out.write(item); &#125; finally &#123; out.close(); &#125; &#125; catch (IOException e) &#123; throw new RuntimeException(e); &#125; &#125; public static void main(String[] args) &#123; // 读取文件 String file = read(\"src/org/javacore/io/TextFile.java\"); // 写入到test.txt write(\"test.txt\", file); TextFile text = new TextFile(\"test.txt\"); text.write(\"test2.txt\"); TreeSet&lt;String&gt; words = new TreeSet&lt;&gt;( new TextFile(\"src/org/javacore/io/TextFile.java\",\"\\\\W+\")); System.out.println(words.headSet(\"a\")); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"LambdaListCompare","slug":"learning/SE/lambda/LambdaListCompare","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.667Z","comments":true,"path":"1395/10/17/learning/SE/lambda/LambdaListCompare/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/lambda/LambdaListCompare/","excerpt":"","text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152package org.javacore.lambda;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */import java.util.ArrayList;import java.util.List;/** * List 比较器 * * Created by bysocket on 16/7/12. */public class LambdaListCompare &#123; public static void main(String[] args) &#123; List&lt;Integer&gt; list = new ArrayList&lt;&gt;(); list.add(4); list.add(1); list.add(3); list.add(6);// list.sort(new Comparator&lt;Integer&gt;() &#123;// @Override// public int compare(Integer o1, Integer o2) &#123;// return Integer.compare(o1, o2);// &#125;// &#125;); /** Lambda表达式格式: * (Type1 param1, Type2 param2, ..., TypeN paramN) -&gt; &#123; * statment1; * statment2; * ... * return statmentM; * &#125; */// list.sort(((o1, o2) -&gt; &#123;// return Integer.compare(o1, o2);// &#125;)); // 简写Lambda表达式 list.sort((o1, o2) -&gt; Integer.compare(o1, o2)); System.out.println(list.toString()); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"LambdaOperators","slug":"learning/SE/lambda/LambdaOperators","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.666Z","comments":true,"path":"1395/10/17/learning/SE/lambda/LambdaOperators/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/lambda/LambdaOperators/","excerpt":"","text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546package org.javacore.lambda;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */import java.util.ArrayList;import java.util.Comparator;import java.util.List;/** * Lambda 操作符 * * Created by bysocket on 16/7/13. */public class LambdaOperators &#123; public static void main(String[] args) &#123; List&lt;String&gt; list = new ArrayList&lt;&gt;(); list.add(\"aaa\"); list.add(\"cccc\"); list.add(\"b\"); list.add(\"eeeee\"); /** * :: 操作符格式 =&gt; 三种情况 * 对象::实例方法 * 类::静态方法 * 类::实例方法 对于前两种情况，方法引用就是对参数执行该方法。比如下面两种方法 */ // 按字符串大小排序忽略大小写 list.sort(String::compareToIgnoreCase); // 打印 list 元素 list.forEach(System.out::println); System.out.println(\"======按字符大小排序======\"); list.sort(Comparator.comparing(String::length)); list.forEach(System.out::println); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"LambdaRunnable","slug":"learning/SE/lambda/LambdaRunnable","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.665Z","comments":true,"path":"1395/10/17/learning/SE/lambda/LambdaRunnable/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/lambda/LambdaRunnable/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132333435363738394041package org.javacore.lambda;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * Lambda - 启动线程 * * Created by bysocket on 16/7/13. */public class LambdaRunnable &#123; static int b = 10; public static void main(String[] args) &#123; // 启动线程// Thread thread = new Thread(new Runnable() &#123;// @Override// public void run() &#123;// b++;// System.out.println(b);// &#125;// &#125;); // Lambda - 启动线程 Thread thread = new Thread(() -&gt; &#123; b++; System.out.println(b); &#125;); thread.start(); System.out.println(\"Done!\"); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"ListT0","slug":"learning/SE/collection/list/ListT0","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.723Z","comments":true,"path":"1395/10/17/learning/SE/collection/list/ListT0/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/collection/list/ListT0/","excerpt":"","text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546package org.javacore.collection.list; /* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */import java.util.ArrayList;import java.util.List;import java.util.ListIterator;/** * @author BYSocket * @since 2016-01-06 20:11:00 * 打印list 全部元素，并找到其中元素aaa删除。要求：所有元素都遍历完 * ListIterator 的使用 * list那个remove回抛异常是因为快速失败的机制， * 他内置了一个modifyCount的变量记录list的长度变化，用Iter可以删除掉 */public class ListT0 &#123; public static void main(String[] args) &#123; List&lt;String&gt; list =new ArrayList&lt;&gt;(); list.add(\"1\"); list.add(\"2\"); list.add(\"3\"); list.add(\"4\"); list.add(\"aaa\"); list.add(\"6\"); list.add(\"7\"); ListIterator listIterator = list.listIterator(); while (listIterator.hasNext()) &#123; Object o = listIterator.next(); System.out.println(o); if (o.equals(\"aaa\")) &#123; listIterator.remove(); &#125; &#125; &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"AvailableCharSets","slug":"learning/SE/nio/AvailableCharSets","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.676Z","comments":true,"path":"1395/10/17/learning/SE/nio/AvailableCharSets/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/nio/AvailableCharSets/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748package org.javacore.nio;import java.nio.charset.Charset;import java.util.Iterator;import java.util.SortedMap;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-10-11 19:51:10 * 可用的CharSet打印 */public class AvailableCharSets &#123; public static void main(String[] args) &#123; // charset对象的有序映射 SortedMap&lt;String,Charset&gt; charSets = Charset.availableCharsets(); // 获取key的迭代器 Iterator&lt;String&gt; iterator = charSets.keySet().iterator(); while (iterator.hasNext()) &#123; String csName = iterator.next(); System.out.print(csName); // 获取别名的Charset集合的迭代器 Iterator aliases = charSets.get(csName).aliases().iterator(); if (aliases.hasNext()) System.out.print(\"： \"); while (aliases.hasNext()) &#123; System.out.print(aliases.next()); if (aliases.hasNext()) System.out.print(\",\"); &#125; System.out.println(); &#125; &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"BufferToText","slug":"learning/SE/nio/BufferToText","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.676Z","comments":true,"path":"1395/10/17/learning/SE/nio/BufferToText/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/nio/BufferToText/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192package org.javacore.nio;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.IOException;import java.nio.ByteBuffer;import java.nio.channels.FileChannel;import java.nio.charset.Charset;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-10-10 18:58:15 * ByteBuffer与char之间转换的案例 */public class BufferToText &#123; private static final int BSIZE = 1024; // 1K 字节 public static void main(String[] args) throws IOException &#123; // 从文件输出流获取FileChannel FileChannel fc = new FileOutputStream(\"data.txt\").getChannel(); // 将带有字节的缓冲区写入该通道 fc.write(ByteBuffer.wrap(\"some data\".getBytes())); fc.close(); // 从文件输入流中获取FileChannel fc = new FileInputStream(\"data.txt\").getChannel(); // 分配ByteBuffer的大小 1K ByteBuffer buffer = ByteBuffer.allocate(BSIZE); // 将字节序列通过此通道写入到buffer fc.read(buffer); // 反转缓冲区，为写或者读取做准备 buffer.flip(); // 作为char缓冲区，并输出 乱码，因为Buffer编码是\"UTF-16BE\" System.out.println(buffer.asCharBuffer()); // 重绕此缓冲区 buffer.rewind(); // 获取文件编码属性 String encoding = System.getProperty(\"file.encoding\"); // 输出编码及内容 System.out.println(\"编码： \" + encoding + \" 内容为： \" + Charset.forName(encoding).decode(buffer)); fc.close(); // 从文件输出流获取FileChannel fc = new FileOutputStream(\"data.txt\").getChannel(); // 将带有字节的缓冲区写入该通道 fc.write(ByteBuffer.wrap(\"some data\".getBytes(\"UTF-16BE\"))); fc.close(); // 从文件输入流中获取FileChannel fc = new FileInputStream(\"data.txt\").getChannel(); // 清除其缓冲区 buffer.clear(); // 将字节序列通过该通道写入到buffer fc.read(buffer); // 反转缓冲区，为写或者读取做准备 buffer.flip(); // 作为char缓冲区，并输出 System.out.println(buffer.asCharBuffer()); fc.close(); // 从文件输出流获取FileChannel fc = new FileOutputStream(\"data.txt\").getChannel(); // 指定buffer大小为 24字节 buffer = ByteBuffer.allocate(24); // 通过char缓冲区，在当前位置写入字符 buffer.asCharBuffer().put(\"some data\"); // 将带有字节的缓冲区写入该通道 fc.write(buffer); fc.close(); // 从文件输入流中获取FileChannel fc = new FileInputStream(\"data.txt\").getChannel(); // 清除缓冲区 buffer.clear(); // 将字节序列通过文件通道写入到buffer fc.read(buffer); // 反转缓冲区，为读或者写做准备 buffer.flip(); // 作为char缓冲区，并输出 System.out.println(buffer.asCharBuffer()); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"ChannelCopy","slug":"learning/SE/nio/ChannelCopy","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.668Z","comments":true,"path":"1395/10/17/learning/SE/nio/ChannelCopy/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/nio/ChannelCopy/","excerpt":"","text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061package org.javacore.nio;import java.io.File;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.IOException;import java.nio.ByteBuffer;import java.nio.channels.FileChannel;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-10-9 17:38:08 * FileChannel的文件复制案例 */public class ChannelCopy &#123; // 读取的文件 private static final String sourceFile = \"src\" + File.separator + \"org\" + File.separator + \"javacore\" + File.separator + \"nio\" + File.separator + \"ChannelCopy.java\"; // 输出的文件 private static final String targetFile = \"data.txt\"; private static final int BSIZE = 1024; // 1K字节 @SuppressWarnings(\"resource\") public static void main(String[] args) throws IOException &#123; // 创建用于读写的Channel FileChannel in = new FileInputStream(sourceFile).getChannel(), out = new FileOutputStream(targetFile).getChannel(); // 分配ByteBuffer的大小 1K ByteBuffer buffer = ByteBuffer.allocate(BSIZE); // 将字节序列从此通道读入给定的缓冲区,分块读，直至读到文件末端 while (in.read(buffer) != -1) &#123;// -1,表示读到文件末端 // 反转缓冲区，为写入或读取做好准备 buffer.flip(); // 将含有字节序列的缓冲区写入文件通道 out.write(buffer); // 清空缓冲区 buffer.clear(); &#125; &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"Endians","slug":"learning/SE/nio/Endians","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.676Z","comments":true,"path":"1395/10/17/learning/SE/nio/Endians/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/nio/Endians/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445package org.javacore.nio;import java.nio.ByteBuffer;import java.nio.ByteOrder;import java.util.Arrays;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-10-13 20:40:00 * ByteBuffer中字节存储次序 */public class Endians &#123; public static void main(String[] args) &#123; // 创建12个字节的字节缓冲区 ByteBuffer bb = ByteBuffer.wrap(new byte[12]); // 存入字符串 bb.asCharBuffer().put(\"abdcef\"); System.out.println(Arrays.toString(bb.array())); // 反转缓冲区 bb.rewind(); // 设置字节存储次序 bb.order(ByteOrder.BIG_ENDIAN); bb.asCharBuffer().put(\"abcdef\"); System.out.println(Arrays.toString(bb.array())); // 反转缓冲区 bb.rewind(); // 设置字节存储次序 bb.order(ByteOrder.LITTLE_ENDIAN); bb.asCharBuffer().put(\"abcdef\"); System.out.println(Arrays.toString(bb.array())); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"FileChannelT","slug":"learning/SE/nio/FileChannelT","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.677Z","comments":true,"path":"1395/10/17/learning/SE/nio/FileChannelT/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/nio/FileChannelT/","excerpt":"","text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970package org.javacore.nio;import java.io.File;import java.io.FileOutputStream;import java.io.IOException;import java.io.RandomAccessFile;import java.nio.ByteBuffer;import java.nio.channels.FileChannel;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-7-23 17:50:18 * FileChannel读写文件案例 */public class FileChannelT &#123; @SuppressWarnings(\"resource\") public static void main(String[] args) throws IOException &#123; // NIO包路径 String dir = \"src\" + File.separator + \"org\" + File.separator + \"javacore\" + File.separator + \"nio\"; // 获取FileChannelT.java文件，读写方式 RandomAccessFile inFile = new RandomAccessFile(dir + File.separator + \"FileChannelT.java\",\"rw\"); // 创建输出文件流 FileOutputStream outFileStream = new FileOutputStream(\"D:\\\\FileChannelT2.java\"); // 创建输入文件通道 FileChannel inChannel = inFile.getChannel(); // 创建输出文件通道 FileChannel outChannel = outFileStream.getChannel(); // 分配一个1024字节的字节缓存区 ByteBuffer byteBuffer = ByteBuffer.allocateDirect(1024); // 比allocate();效率高 // 测试时间 long startTime = System.currentTimeMillis(); // 读文件，存文件 while (true) &#123; // 将字节序列从此通道读入给定的缓冲区 int eof = inChannel.read(byteBuffer); // 读到文件末尾退出 if (eof == -1) break; // 反转缓冲区 byteBuffer.flip(); // 将字节序列从给定的缓冲区写入此通道 outChannel.write(byteBuffer); // 清空缓存区 byteBuffer.clear(); &#125; inChannel.close(); outChannel.close(); System.out.println(\"耗时：\" + (System.currentTimeMillis() - startTime)); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"FileChannelTransferTo","slug":"learning/SE/nio/FileChannelTransferTo","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.673Z","comments":true,"path":"1395/10/17/learning/SE/nio/FileChannelTransferTo/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/nio/FileChannelTransferTo/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950package org.javacore.nio;import java.io.File;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.IOException;import java.nio.channels.FileChannel;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-10-9 17:43:27 * FileChannel的transferTo/transferFrom案例 */public class FileChannelTransferTo &#123; // 读取的文件 private static final String sourceFile = \"src\" + File.separator + \"org\" + File.separator + \"javacore\" + File.separator + \"nio\" + File.separator + \"FileChannelTransferTo.java\"; // 输出的文件 private static final String targetFile = \"data.txt\"; @SuppressWarnings(\"resource\") public static void main(String[] args) throws IOException &#123; // 创建用于读写的Channel FileChannel in = new FileInputStream(sourceFile).getChannel(), out = new FileOutputStream(targetFile).getChannel(); // 将in通道的字节传输给out可写入字节通道 in.transferTo(0, in.size(),out); // or // 将字节从给定的可读取字节通道传输到此通道的文件中。 // out.transferFrom(in, 0, in.size()); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"FileLocking","slug":"learning/SE/nio/FileLocking","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.677Z","comments":true,"path":"1395/10/17/learning/SE/nio/FileLocking/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/nio/FileLocking/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132333435363738394041package org.javacore.nio;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.IOException;import java.nio.channels.FileLock;import java.util.concurrent.TimeUnit;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-10-15 19:31:34 * 文件加锁 */public class FileLocking &#123; public static void main(String[] args) throws IOException, InterruptedException &#123; // 获取输出流 FileOutputStream fos = new FileOutputStream(\"data.txt\"); // 从输出流中获取文件加锁对象，并锁定File FileLock fl = fos.getChannel().lock(); if (fl != null) &#123; System.out.println(\"Locked File\"); TimeUnit.MICROSECONDS.sleep(100); // 释放文件锁定 fl.release(); System.out.println(\"Release Lock\"); &#125; &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"GetChannel","slug":"learning/SE/nio/GetChannel","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.668Z","comments":true,"path":"1395/10/17/learning/SE/nio/GetChannel/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/nio/GetChannel/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172package org.javacore.nio;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.IOException;import java.io.RandomAccessFile;import java.nio.ByteBuffer;import java.nio.channels.FileChannel;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-10-8 17:33:19 * 从流中获取FileChannel的案例 */public class GetChannel &#123; private static final int BSIZE = 1024; // 1K字节 @SuppressWarnings(\"resource\") public static void main(String[] args) throws IOException &#123; ////// // 写入文件 ////// // 从文件输出流获取FileChannel FileChannel fc = new FileOutputStream(\"data.txt\").getChannel(); // 将含有字节序列的缓冲区写入文件通道 fc.write(ByteBuffer.wrap(\"Some Text\".getBytes()));// 将已存在的字节数组包装到ByteBuffer // 关闭通道 fc.close(); ////// // 从文件尾部写入 ////// // 从RandomAccessFile获取FileChannel文件 fc = new RandomAccessFile(\"data.txt\", \"rw\").getChannel(); // 文件指针指向文件尾部 fc.position(fc.size()); // 将含有字节序列的缓冲区写入文件通道 fc.write(ByteBuffer.wrap(\" Some more\".getBytes())); // 关闭通道 fc.close(); ////// // 读取文件 ////// // 从文件输出流获取FileChannel文件 fc = new FileInputStream(\"data.txt\").getChannel(); // 分配ByteBuffer的大小 1K ByteBuffer buffer = ByteBuffer.allocate(BSIZE); // 将字节序列从此通道读入给定的缓冲区。 fc.read(buffer); // 反转缓冲区，为写入或读取做好准备 buffer.flip(); // 打印 while (buffer.hasRemaining()) &#123; System.out.print((char)buffer.get()); &#125; &#125; &#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"GetData","slug":"learning/SE/nio/GetData","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.672Z","comments":true,"path":"1395/10/17/learning/SE/nio/GetData/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/nio/GetData/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354package org.javacore.nio;import java.nio.ByteBuffer;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-10-12 18:53:10 * ByteBuffer操作类型数据的案例 */public class GetData &#123; private static final int BSIZE = 1024; // 1字节 public static void main(String[] args) &#123; // 创建字节缓冲区 ByteBuffer bb = ByteBuffer.allocate(BSIZE); int i = 0; while (i++ &lt; bb.limit())// 缓冲区的限制 if (bb.get() != 0)// 读取当前位置字节，如果字节不等于0 System.out.println(\"该字节不为0\"); // 读取到最后一个跳出限制while，i为BSIZE大1。 System.out.println(\"i = \" + i); // 重绕此缓冲区 bb.rewind(); // 写入Hello bb.asCharBuffer().put(\"Hello\"); // 从缓冲区读取char，并输出 char c; while ((c = bb.getChar()) != 0) System.out.print(c + \" \"); System.out.println(); // 写入Short类型数据 bb.asShortBuffer().put((short) 47142); System.out.println(bb.getShort()); // 重绕此缓冲区 bb.rewind(); // 写入Long类型数据 bb.asLongBuffer().put((long)99471142); System.out.println(bb.getLong()); // 重绕此缓冲区 bb.rewind(); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"MappedIO","slug":"learning/SE/nio/MappedIO","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.671Z","comments":true,"path":"1395/10/17/learning/SE/nio/MappedIO/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/nio/MappedIO/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132package org.javacore.nio;import org.javacore.io.RandomAccessFileT;import java.io.BufferedInputStream;import java.io.BufferedOutputStream;import java.io.DataInputStream;import java.io.DataOutputStream;import java.io.File;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.IOException;import java.io.RandomAccessFile;import java.nio.IntBuffer;import java.nio.channels.FileChannel;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-10-15 18:38:17 * MappedByteBuffer与Old IO的性能比 */public class MappedIO &#123; private static int numOfInts = 4000000; private static int numOfUbuffInts = 200000; private abstract static class Tester &#123; private String name; public Tester(String name)&#123; this.name = name; &#125; // 打印测试时间 public void runTests()&#123; System.out.print(name + \": \"); try &#123; long start = System.nanoTime(); test(); double duration = System.nanoTime() - start; System.out.format(\"%.2f\\n\",duration/1.0e9); &#125; catch (IOException e) &#123; throw new RuntimeException(e); &#125; &#125; public abstract void test() throws IOException; &#125; private static Tester[] tests = &#123; new Tester(\"Stream Write\") &#123; @Override public void test() throws IOException &#123; DataOutputStream dos = new DataOutputStream( new BufferedOutputStream(new FileOutputStream(new File(\"data.txt\")))); for (int i = 0; i &lt; numOfInts; i++) dos.writeInt(i); dos.close(); &#125; &#125;, new Tester(\"Mapped Write\") &#123; @Override public void test() throws IOException &#123; FileChannel fc = new RandomAccessFile(\"data.txt\" , \"rw\").getChannel(); IntBuffer ib = fc.map(FileChannel.MapMode.READ_WRITE, 0,fc.size()).asIntBuffer(); for (int i = 0; i &lt; numOfInts; i++) ib.put(i); fc.close(); &#125; &#125;, new Tester(\"Stream Read\") &#123; @Override public void test() throws IOException &#123; DataInputStream dis = new DataInputStream( new BufferedInputStream(new FileInputStream(new File(\"data.txt\")))); for (int i = 0; i &lt; numOfInts; i++) dis.readInt(); dis.close(); &#125; &#125;, new Tester(\"Mapped Read\") &#123; @Override public void test() throws IOException &#123; FileChannel fc = new FileInputStream(new File(\"data.txt\")).getChannel(); IntBuffer ib = fc.map(FileChannel.MapMode.READ_ONLY, 0 , fc.size()).asIntBuffer(); while (ib.hasRemaining()) ib.get(); fc.close(); &#125; &#125;, new Tester(\"Stream Read/Write\") &#123; @Override public void test() throws IOException &#123; RandomAccessFile raf = new RandomAccessFile( new File(\"data.txt\"), \"rw\"); raf.writeInt(1); for (int i = 0; i &lt; numOfUbuffInts; i++) &#123; raf.seek(raf.length() - 4); raf.writeInt(raf.readInt()); &#125; raf.close(); &#125; &#125;, new Tester(\"Mapped Read/Write\") &#123; @Override public void test() throws IOException &#123; FileChannel fc = new RandomAccessFile( new File(\"data.txt\"),\"rw\").getChannel(); IntBuffer ib = fc.map(FileChannel.MapMode.READ_WRITE, 0,fc.size()).asIntBuffer(); ib.put(0); for (int i = 1; i &lt; numOfUbuffInts; i++) ib.put(ib.get(i-1)); fc.close(); &#125; &#125; &#125;; public static void main(String[] args) &#123; for (Tester tester : tests) tester.runTests(); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"IntBufferDemo","slug":"learning/SE/nio/IntBufferDemo","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.671Z","comments":true,"path":"1395/10/17/learning/SE/nio/IntBufferDemo/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/nio/IntBufferDemo/","excerpt":"","text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546package org.javacore.nio;import java.nio.ByteBuffer;import java.nio.IntBuffer;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-10-12 18:53:01 * 通过IntBuffer操作ByteBuffer的int型数据 */public class IntBufferDemo &#123; private static final int BSIZE = 1024;// 1字节 public static void main(String[] args) &#123; // 创建1字节大小的字节缓冲区 ByteBuffer bb = ByteBuffer.allocate(BSIZE); // int视图缓冲区 IntBuffer ib = bb.asIntBuffer(); // 存储一个数组 ib.put(new int[]&#123;1, 2, 3, 4, 5, 6&#125;); // 通过访问ByteBuff字节缓冲区，获取某个位置的值 System.out.println(ib.get(3)); // 存储一个int数据 ib.put(3, 44); // 反转缓冲区 ib.flip(); // 如果当前位置还有元素 while (ib.hasRemaining()) &#123; // 获取当前位置的元素 int i = ib.get(); System.out.println(i); &#125; &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"UsingBuffers","slug":"learning/SE/nio/UsingBuffers","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.678Z","comments":true,"path":"1395/10/17/learning/SE/nio/UsingBuffers/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/nio/UsingBuffers/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950package org.javacore.nio;import java.nio.ByteBuffer;import java.nio.CharBuffer;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-10-14 15:48:12 * 利用buffer实现交换相邻字符 */public class UsingBuffers &#123; private static void symmetricScaramble(CharBuffer buffer) &#123; while (buffer.hasRemaining()) &#123; // 将mark设为position buffer.mark(); char c1 = buffer.get(); char c2 = buffer.get(); // 重置为以前标记的位置 buffer.reset(); buffer.put(c2).put(c1); &#125; &#125; public static void main(String[] args) &#123; char[] data = \"UsingBuffers\".toCharArray(); // 一个字符两个字节 ByteBuffer bb = ByteBuffer.allocate(data.length * 2); CharBuffer cb = bb.asCharBuffer(); cb.put(data); // 重绕此缓冲区 System.out.println(cb.rewind()); symmetricScaramble(cb); // 重绕此缓冲区 System.out.println(cb.rewind()); symmetricScaramble(cb); System.out.println(cb.rewind()); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"ViewBuffers","slug":"learning/SE/nio/ViewBuffers","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.675Z","comments":true,"path":"1395/10/17/learning/SE/nio/ViewBuffers/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/nio/ViewBuffers/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768package org.javacore.nio;import java.nio.ByteBuffer;import java.nio.CharBuffer;import java.nio.DoubleBuffer;import java.nio.FloatBuffer;import java.nio.IntBuffer;import java.nio.LongBuffer;import java.nio.ShortBuffer;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-10-13 20:40:35 * 不同视图下的缓冲区 */public class ViewBuffers &#123; public static void main(String[] args) &#123; ByteBuffer bb = ByteBuffer.wrap(new byte[]&#123;0,0,0,0,0,0,0,'a'&#125;); bb.rewind(); System.out.print(\"Byte Buffer \"); while (bb.hasRemaining()) System.out.print(bb.position() + \" -&gt; \" + bb.get() + \", \"); System.out.println(); CharBuffer cb = ((ByteBuffer)bb.rewind()).asCharBuffer(); System.out.print(\"Char Buffer \"); while (cb.hasRemaining()) System.out.print(cb.position() + \" -&gt; \" + cb.get() + \", \"); System.out.println(); ShortBuffer sb = ((ByteBuffer)bb.rewind()).asShortBuffer(); System.out.print(\"Short Buffer \"); while (sb.hasRemaining()) System.out.print(sb.position() + \" -&gt; \" + sb.get() + \", \"); System.out.println(); IntBuffer ib = ((ByteBuffer)bb.rewind()).asIntBuffer(); System.out.print(\"Int Buffer \"); while (ib.hasRemaining()) System.out.print(ib.position() + \" -&gt; \" + ib.get()); System.out.println(); FloatBuffer fb = ((ByteBuffer)bb.rewind()).asFloatBuffer(); System.out.print(\"Float Buffer \"); while (fb.hasRemaining()) System.out.print(fb.position() + \" -&gt; \" + fb.get() + \", \"); System.out.println(); LongBuffer lb = ((ByteBuffer)bb.rewind()).asLongBuffer(); System.out.print(\"Long Buffer \"); while (lb.hasRemaining()) System.out.print(lb.position() + \" -&gt; \" + lb.get() + \", \"); System.out.println(); DoubleBuffer db = ((ByteBuffer)bb.rewind()).asDoubleBuffer(); System.out.print(\"Double Buffer \"); while (db.hasRemaining()) System.out.print(db.position() + \" -&gt; \" + db.get() + \", \"); System.out.println(); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"ArrayCopy","slug":"learning/SE/reflection/ArrayCopy","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.711Z","comments":true,"path":"1395/10/17/learning/SE/reflection/ArrayCopy/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/reflection/ArrayCopy/","excerpt":"","text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546package org.javacore.reflection;import java.lang.reflect.Array;import java.util.Arrays;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-11-9 10:45:19 * 反射扩容对象数组 */public class ArrayCopy &#123; public static void main(String[] args) &#123; int[] a = &#123;1,2,3&#125;; a = (int[]) goodCopyOf(a,10); System.out.println(Arrays.toString(a)); String[] str = &#123;\"a\",\"b\",\"c\"&#125;; str = (String[]) goodCopyOf(str,10); System.out.println(Arrays.toString(str)); &#125; public static Object goodCopyOf(Object a,int newLength)&#123; // 获取Class对象 Class cl = a.getClass(); // 如果不是数组对象，则返回null; if (!cl.isArray()) return null; // 获取数组组件对象 Class componentType = cl.getComponentType(); int length = Array.getLength(a); Object newArray = Array.newInstance(componentType,newLength); // 复制数组 System.arraycopy(a,0,newArray,0,Math.min(length,newLength)); return newArray; &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"LargeMappedFiles","slug":"learning/SE/nio/LargeMappedFiles","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.674Z","comments":true,"path":"1395/10/17/learning/SE/nio/LargeMappedFiles/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/nio/LargeMappedFiles/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132333435363738394041package org.javacore.nio;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */import java.io.FileNotFoundException;import java.io.IOException;import java.io.RandomAccessFile;import java.nio.MappedByteBuffer;import java.nio.channels.FileChannel;/** * @author Jeff Lee * @since 2015-10-14 16:01:14 * 内存映射文件的使用 */public class LargeMappedFiles &#123; static int length = 0x8FFFFFF; // 128 MB public static void main(String[] args) throws IOException &#123; // 将此通道的文件区域直接映射到内存映射区域中。 MappedByteBuffer out = new RandomAccessFile(\"data.txt\",\"rw\").getChannel() .map(FileChannel.MapMode.READ_WRITE, 0, length); // 写入128MB的字符串 for (int i = 0;i &lt; length; i++) out.put((byte)'x'); System.out.println(\"Finished writing\"); // 打印其中6个字符 for (int i = length/2; i &lt; length/2 + 6; i++) System.out.print((char)out.get(i)); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"EmployeeClass","slug":"learning/SE/reflection/EmployeeClass","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.710Z","comments":true,"path":"1395/10/17/learning/SE/reflection/EmployeeClass/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/reflection/EmployeeClass/","excerpt":"","text":"12345678910111213141516171819202122232425262728293031323334353637383940414243package org.javacore.reflection;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-11-9 10:45:19 * 反射在继承中的案例 */class Employee &#123; private String name; public Employee(String name)&#123; this.name = name; &#125; public String getName()&#123; return name; &#125;&#125;class Manager extends Employee &#123; public Manager(String name) &#123; super(name); &#125;&#125;public class EmployeeClass &#123; public static void main(String[] args) &#123; Employee employee = new Employee(\"Jeff\"); Employee manager = new Manager(\"Boss\"); System.out.println(employee.getClass().getName() + \" \" + employee.getName()); System.out.println(manager.getClass().getName() + \" \" + manager.getName()); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"ReflectionTest","slug":"learning/SE/reflection/ReflectionTest","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.709Z","comments":true,"path":"1395/10/17/learning/SE/reflection/ReflectionTest/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/reflection/ReflectionTest/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117package org.javacore.reflection;import java.lang.reflect.Constructor;import java.lang.reflect.Field;import java.lang.reflect.Method;import java.lang.reflect.Modifier;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-11-9 10:45:19 * 反射对象构造函数、方法及字段 */public class ReflectionTest &#123; public final int AGE = 1; public static void main(String[] args) &#123; Class cl = null; try &#123; cl = Class.forName(\"org.javacore.reflection.ReflectionTest\"); System.out.println(\"打印析构函数：\"); printConstructors(cl); System.out.println(\"打印方法：\"); printMethods(cl); System.out.println(\"打印字段：\"); printFields(cl); &#125; catch (ClassNotFoundException e) &#123; e.printStackTrace(); &#125; &#125; /** * 打印Class对象的析构方法 * @param cl */ public static void printConstructors(Class cl)&#123; // 返回类所有的析构方法 Constructor[] constructors = cl.getDeclaredConstructors(); for (Constructor c : constructors)&#123; // 返回析构方法名称 String name = c.getName(); System.out.print(\" \"); // 获取Java语言的修饰符 // 修饰符由 Java 虚拟机的 public、protected、private、 // final、static、abstract 和 interface 对应的常量组成； String modifiers = Modifier.toString(c.getModifiers()); if (modifiers.length() &gt; 0) System.out.print(modifiers + \" \"); System.out.print(name + \"(\"); // 获取析构方法的参数对象列表数组 Class[] paramTypes = c.getParameterTypes(); for (int i = 0; i &lt; paramTypes.length;i++)&#123; if (i &gt; 0) System.out.print(\", \"); System.out.print(paramTypes[i].getName()); &#125; System.out.println(\");\"); &#125; &#125; /** * 打印对象所有的方法 * @param cl */ public static void printMethods(Class cl)&#123; // 获取类所有方法对象数组 Method[] methods = cl.getMethods(); for (Method m : methods) &#123; // 获取方法返回对象 Class retType = m.getReturnType(); String name = m.getName(); System.out.print(\" \"); // 获取Java语言的修饰符 // 修饰符由 Java 虚拟机的 public、protected、private、 // final、static、abstract 和 interface 对应的常量组成； String modifiers = Modifier.toString(cl.getModifiers()); if (modifiers.length() &gt; 0) System.out.print(modifiers + \" \"); System.out.print(retType.getName() +\" \" + name + \"(\"); // 获取方法的参数对象列表数组 Class[] paramTypes = m.getParameterTypes(); for (int i = 0; i &lt; paramTypes.length;i++)&#123; if (i &gt; 0) System.out.print(\", \"); System.out.print(paramTypes[i].getName()); &#125; System.out.println(\");\"); &#125; &#125; public static void printFields(Class clazz)&#123; // 获取字段Field对象数组 Field[] fields = clazz.getFields(); for (Field field : fields)&#123; // 获取字段声明类型对象 Class type = field.getType(); // 获取字段名称 String name = field.getName(); System.out.print(\" \"); // 获取Java语言的修饰符 // 修饰符由 Java 虚拟机的 public、protected、private、 // final、static、abstract 和 interface 对应的常量组成； String modifiers = Modifier.toString(field.getModifiers()); if (modifiers.length() &gt; 0) System.out.print(modifiers + \" \"); System.out.print(type.getName() + \" \" + name); &#125; &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"ObjectAnalyzer","slug":"learning/SE/reflection/ObjectAnalyzer","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.710Z","comments":true,"path":"1395/10/17/learning/SE/reflection/ObjectAnalyzer/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/reflection/ObjectAnalyzer/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475package org.javacore.reflection;import java.lang.reflect.AccessibleObject;import java.lang.reflect.Array;import java.lang.reflect.Field;import java.lang.reflect.Modifier;import java.util.ArrayList;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-11-9 10:45:19 * 反射对象分析工具 @&#123;link test/org.javacore.reflection.ObjectAnalyzerTest&#125; */public class ObjectAnalyzer &#123; private ArrayList&lt;Object&gt; visited = new ArrayList&lt;&gt;(); public String toString(Object obj)&#123; if (obj == null) return \"null\"; if (visited.contains(obj)) return \"...\"; visited.add(obj); // 获取Class对象 Class cl = obj.getClass(); if (cl == String.class) return (String)obj; // 如果对象是一个数组类 if (cl.isArray())&#123; // 获取数组组件 String r = cl.getComponentType() + \"[]&#123;\"; for (int i = 0; i &lt; Array.getLength(obj); i++) &#123; if (i &gt; 0) r += \",\"; Object val = Array.get(obj,i); // 是否是一个基本类型 if (cl.getComponentType().isPrimitive()) r += val; else r += toString(val); &#125; return r + \"&#125;\"; &#125; String r =cl.getName(); do &#123; r += \"[\"; Field[] fields = cl.getDeclaredFields(); AccessibleObject.setAccessible(fields,true); for (Field f : fields)&#123; if (!Modifier.isStatic(f.getModifiers()))&#123; r += f.getName() + \"=\"; try &#123; Class t = f.getType(); Object val = f.get(obj); if (t.isPrimitive()) r += val; else r +=toString(val); &#125; catch (Exception e)&#123; e.printStackTrace(); &#125; &#125; &#125; r += \"]\"; cl = cl.getSuperclass(); &#125; while (cl != null); return r; &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"User","slug":"learning/SE/reflection/User","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.712Z","comments":true,"path":"1395/10/17/learning/SE/reflection/User/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/reflection/User/","excerpt":"","text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152package org.javacore.reflection;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-9-8 09:35:14 * 反射构造器使用的bean */public class User &#123; private int id; private String name; // 无参构造器（默认构造器） public User() &#123; &#125; public User(int id) &#123; this.id = id; &#125; public User(int id, String name) &#123; this.id = id; this.name = name; &#125; public int getId() &#123; return id; &#125; public void setId(int id) &#123; this.id = id; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; @Override public String toString() &#123; return \"User [id=\" + id + \", name=\" + name + \"]\"; &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"UserConstructorReflect","slug":"learning/SE/reflection/UserConstructorReflect","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.706Z","comments":true,"path":"1395/10/17/learning/SE/reflection/UserConstructorReflect/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/reflection/UserConstructorReflect/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647package org.javacore.reflection;import java.lang.reflect.Constructor;import java.lang.reflect.InvocationTargetException;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-9-8 09:35:35 * 利用反射通过构造器创建一个实例 */public class UserConstructorReflect &#123; public static void main(String[] args) throws NoSuchMethodException, SecurityException, InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException &#123; // 获取User类型 Class&lt;?&gt; userClass = User.class; // 获取默认构造器 Constructor&lt;?&gt; constructor = userClass.getConstructor(); // 获取带int参数的构造器 Constructor&lt;?&gt; intConstructor = userClass.getConstructor(int.class); // 获取带int和String参数的构造器 Constructor&lt;?&gt; bothConstructor = userClass.getConstructor(int.class,String.class); // 使用反射，获取新的User对象 User u1 = (User) constructor.newInstance(); User u2 = (User) intConstructor.newInstance(1); User u3 = (User) bothConstructor.newInstance(2,\"BYSocket\"); System.out.println(u1.toString()); System.out.println(u2.toString()); System.out.println(u3.toString()); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"ClassInitialization","slug":"learning/SE/rtti/ClassInitialization","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.705Z","comments":true,"path":"1395/10/17/learning/SE/rtti/ClassInitialization/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/rtti/ClassInitialization/","excerpt":"","text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758package org.javacore.rtti;import java.util.Random;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-11-2 16:43:41 * Class初始化案例 */class Initable &#123; static final int staticFinal = 47; static final int staticFinal2 = ClassInitialization.random.nextInt(1000); static &#123; System.out.println(\"Initializing Initable\"); &#125;&#125;class Initable2 &#123; static int staticNonFinal = 147; static &#123; System.out.println(\"Initializing Initable2\"); &#125;&#125;class Initable3 &#123; static int staticNonFinal = 74; static &#123; System.out.println(\"Initializing Initable3\"); &#125;&#125;public class ClassInitialization &#123; public static Random random = new Random(47); public static void main(String[] args) throws ClassNotFoundException &#123; // 类中有编译期常量 static Final,则暂时不需要初始化 Class initable = Initable.class; System.out.println(\"After creating Initable ref\"); System.out.println(Initable.staticFinal); // 调用非编译期常量，强制进行类Initable初始化 System.out.println(Initable.staticFinal2); // 先进行初始化 System.out.println(Initable2.staticNonFinal); // 无编译期常量，直接初始化 Class initable3 = Class.forName(\"org.javacore.rtti.Initable3\"); System.out.println(\"After creating Initable ref\"); System.out.println(Initable3.staticNonFinal); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"ShowMethods","slug":"learning/SE/rtti/ShowMethods","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.704Z","comments":true,"path":"1395/10/17/learning/SE/rtti/ShowMethods/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/rtti/ShowMethods/","excerpt":"","text":"12345678910111213141516171819202122232425262728293031323334353637package org.javacore.rtti;import java.lang.reflect.Constructor;import java.lang.reflect.Method;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-11-2 16:43:41 * 获取Class方法案例 */public class ShowMethods &#123; public static void main(String[] args) &#123; try &#123; Class&lt;?&gt; c = Class.forName(\"org.javacore.rtti.ShowMethods\"); Method[] methods = c.getMethods(); Constructor[] constructors = c.getConstructors(); for (Method m : methods) System.out.println(m.toGenericString()); for (Constructor constructor : constructors) System.out.println(constructor.toGenericString()); &#125; catch (ClassNotFoundException e) &#123; e.printStackTrace(); &#125; &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"SchedulerExecutorTest","slug":"learning/SE/scheduler/SchedulerExecutorTest","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.646Z","comments":true,"path":"1395/10/17/learning/SE/scheduler/SchedulerExecutorTest/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/scheduler/SchedulerExecutorTest/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132333435363738394041package org.javacore.scheduler; /* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */import java.util.concurrent.Executors;import java.util.concurrent.ScheduledExecutorService;import java.util.concurrent.TimeUnit;/** * ScheduledExecutorService的使用 * @author BYSocket * @since 2016-01-10 14:20:00 */public class SchedulerExecutorTest implements Runnable &#123; private final String jobName; public SchedulerExecutorTest(String jobName) &#123; this.jobName = jobName; &#125; @Override public void run() &#123; System.out.println(\"running =&gt; \" + jobName); &#125; public static void main(String[] args) &#123; ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor(); // 一秒 executor.scheduleAtFixedRate(new SchedulerExecutorTest(\"job1\"), 1, 1, TimeUnit.SECONDS); // 两秒 executor.scheduleWithFixedDelay(new SchedulerExecutorTest(\"job2\"),1,2,TimeUnit.SECONDS); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"SchedulerExecutorTest2","slug":"learning/SE/scheduler/SchedulerExecutorTest2","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.645Z","comments":true,"path":"1395/10/17/learning/SE/scheduler/SchedulerExecutorTest2/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/scheduler/SchedulerExecutorTest2/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106package org.javacore.scheduler; /* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */import java.util.Calendar;import java.util.Date;import java.util.concurrent.Executors;import java.util.concurrent.ScheduledExecutorService;import java.util.concurrent.TimeUnit;/** * ScheduledExecutorService的使用 * @author BYSocket * @since 2016-01-10 22:02:00 */public class SchedulerExecutorTest2 implements Runnable&#123; private final String jobName; public SchedulerExecutorTest2(String jobName) &#123; this.jobName = jobName; &#125; @Override public void run() &#123; System.out.println(\"Date = \" + new Date() + \", running =&gt; \" + jobName); &#125; /** * 计算从当前时间currentDate开始，满足条件dayOfWeek, hourOfDay, * minuteOfHour, secondOfMinite的最近时间 * @return */ public Calendar getEarliestDate(Calendar currentDate, int dayOfWeek, int hourOfDay, int minuteOfHour, int secondOfMinite) &#123; //计算当前时间的WEEK_OF_YEAR,DAY_OF_WEEK, HOUR_OF_DAY, MINUTE,SECOND等各个字段值 int currentWeekOfYear = currentDate.get(Calendar.WEEK_OF_YEAR); int currentDayOfWeek = currentDate.get(Calendar.DAY_OF_WEEK); int currentHour = currentDate.get(Calendar.HOUR_OF_DAY); int currentMinute = currentDate.get(Calendar.MINUTE); int currentSecond = currentDate.get(Calendar.SECOND); //如果输入条件中的dayOfWeek小于当前日期的dayOfWeek,则WEEK_OF_YEAR需要推迟一周 boolean weekLater = false; if (dayOfWeek &lt; currentDayOfWeek) &#123; weekLater = true; &#125; else if (dayOfWeek == currentDayOfWeek) &#123; //当输入条件与当前日期的dayOfWeek相等时，如果输入条件中的 //hourOfDay小于当前日期的 //currentHour，则WEEK_OF_YEAR需要推迟一周 if (hourOfDay &lt; currentHour) &#123; weekLater = true; &#125; else if (hourOfDay == currentHour) &#123; //当输入条件与当前日期的dayOfWeek, hourOfDay相等时， //如果输入条件中的minuteOfHour小于当前日期的 //currentMinute，则WEEK_OF_YEAR需要推迟一周 if (minuteOfHour &lt; currentMinute) &#123; weekLater = true; &#125; else if (minuteOfHour == currentSecond) &#123; //当输入条件与当前日期的dayOfWeek, hourOfDay， //minuteOfHour相等时，如果输入条件中的 //secondOfMinite小于当前日期的currentSecond， //则WEEK_OF_YEAR需要推迟一周 if (secondOfMinite &lt; currentSecond) &#123; weekLater = true; &#125; &#125; &#125; &#125; if (weekLater) &#123; //设置当前日期中的WEEK_OF_YEAR为当前周推迟一周 currentDate.set(Calendar.WEEK_OF_YEAR, currentWeekOfYear + 1); &#125; // 设置当前日期中的DAY_OF_WEEK,HOUR_OF_DAY,MINUTE,SECOND为输入条件中的值。 currentDate.set(Calendar.DAY_OF_WEEK, dayOfWeek); currentDate.set(Calendar.HOUR_OF_DAY, hourOfDay); currentDate.set(Calendar.MINUTE, minuteOfHour); currentDate.set(Calendar.SECOND, secondOfMinite); return currentDate; &#125; public static void main(String[] args) &#123; SchedulerExecutorTest2 executor = new SchedulerExecutorTest2(\"job1\"); // 获取当前时间 Calendar currentDate = Calendar.getInstance(); long currentDateLong = currentDate.getTime().getTime(); System.out.println(\"Current Date = \" + currentDate.getTime().toString()); // 计算满足条件的最近一次执行时间 Calendar earliestDate = executor.getEarliestDate(currentDate,3,16,38,10); long earliestDateLong = earliestDate.getTime().getTime(); System.out.println(\"Earliest Date = \" + earliestDate.getTime().toString()); // 计算从当前时间到最近一次执行时间的时间间隔 long delay = earliestDateLong - currentDateLong; // 计算执行周期为一星期// long period = 7 * 24 * 60 * 60 * 1000; long period = 1000; ScheduledExecutorService service = Executors.newScheduledThreadPool(10); // 从现在开始delay毫秒之后，每隔一星期执行一次job1 service.scheduleAtFixedRate(executor, delay, period, TimeUnit.MILLISECONDS); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"TimerTest","slug":"learning/SE/scheduler/TimerTest","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.646Z","comments":true,"path":"1395/10/17/learning/SE/scheduler/TimerTest/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/scheduler/TimerTest/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839package org.javacore.scheduler;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */import java.util.Timer;import java.util.TimerTask;/** * Timer的使用 * @author BYSocket * @since 2016-01-09 22:19:00 */public class TimerTest extends TimerTask&#123; private final String jobName; public TimerTest(String jobName) &#123; this.jobName = jobName; &#125; @Override public void run() &#123; System.out.println(\"run the task =&gt; \" + jobName); &#125; public static void main(String[] args) &#123; // 一种工具，线程用其安排以后在后台线程中执行的任务 Timer timer = new Timer(); timer.schedule(new TimerTest(\"Job 1\") , 1000 , 1000); // 一秒 timer.schedule(new TimerTest(\"Job 2\") , 2000 , 2000); // 两秒 &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"CollectStreamTest","slug":"learning/SE/stream/CollectStreamTest","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.641Z","comments":true,"path":"1395/10/17/learning/SE/stream/CollectStreamTest/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/stream/CollectStreamTest/","excerpt":"","text":"123456789101112131415161718192021222324252627282930package org.javacore.stream;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */import java.util.Arrays;import java.util.List;import java.util.stream.Collectors;/** * * Created by bysocket on 16/7/14. */public class CollectStreamTest &#123; public static void main(String[] args) &#123; List&lt;Integer&gt; list = Arrays.asList(1,2,3,4); Double result = list.stream().collect(Collectors.averagingDouble(d-&gt;d*2)); System.out.println(result); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"CollectionStreamTest","slug":"learning/SE/stream/CollectionStreamTest","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.642Z","comments":true,"path":"1395/10/17/learning/SE/stream/CollectionStreamTest/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/stream/CollectionStreamTest/","excerpt":"","text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667package org.javacore.stream;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */import java.util.ArrayList;import java.util.List;import java.util.stream.Collectors;import java.util.stream.Stream;/** * Stream API 集合的流式操作 * * Created by bysocket on 16/7/13. */public class CollectionStreamTest &#123; public static void main(String[] args) &#123; List&lt;String&gt; list = new ArrayList&lt;&gt;(); list.add(\"aa\"); list.add(\"cccc\"); list.add(\"bbb\"); /** * Stream的使用: * 创建/获取流 -&gt; 中间操作（过滤、转换等） -&gt; 终止操作（ 聚合、收集结果） */ list.stream().forEach(System.out::println); System.out.println(); /** * 过滤 * collect语法 &#123;@link StreamCollectTest&#125; */ List list0 = list.stream().filter(str -&gt; str.startsWith(\"cc\")).collect(Collectors.toList()); List list1 = list.stream().filter(str -&gt; str.startsWith(\"aa\")).collect(Collectors.toList()); list0.stream().forEach(System.out::println); list1.stream().forEach(System.out::println); System.out.println(); /** * 转换 */ List list2 = list.stream().map(str -&gt; str.replace(\"c\",\"*\")).collect(Collectors.toList()); list2.stream().forEach(System.out::println); System.out.println(); /** * 提取 * 从skip开始至limit位置为止 */ List list3 = list.stream().skip(0).limit(1).collect(Collectors.toList()); list3.stream().forEach(System.out::println); System.out.println(); /** * 组合 */ List list4 = Stream.concat(list.stream(),list.stream()).collect(Collectors.toList()); list4.stream().forEach(System.out::println); System.out.println(); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"CollectionStreamTest01","slug":"learning/SE/stream/CollectionStreamTest01","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.640Z","comments":true,"path":"1395/10/17/learning/SE/stream/CollectionStreamTest01/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/stream/CollectionStreamTest01/","excerpt":"","text":"12345678910111213141516171819202122232425262728293031323334package org.javacore.stream;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */import java.util.Arrays;import java.util.List;/** * Stream API 集合的流式操作 * &lt;p/&gt; * Created by bysocket on 16/7/13. */public class CollectionStreamTest01 &#123; public static void main(String[] args) &#123; List&lt;String&gt; strList = Arrays.asList(\"a1\", \"a2\", \"c3\", \"c6\", \"c4\"); strList .stream() .filter(str -&gt; str.startsWith(\"c\")) .map(String::toUpperCase) .sorted() .forEach(System.out::println); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"ConcatStreamTest","slug":"learning/SE/stream/ConcatStreamTest","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.643Z","comments":true,"path":"1395/10/17/learning/SE/stream/ConcatStreamTest/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/stream/ConcatStreamTest/","excerpt":"","text":"12345678910111213141516171819202122232425262728293031323334package org.javacore.stream;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */import java.util.Arrays;import java.util.List;import java.util.stream.Collectors;import java.util.stream.Stream;/** * 组合 - 流 * * Created by bysocket on 16/7/14. */public class ConcatStreamTest &#123; public static void main(String[] args) &#123; List&lt;String&gt; list1 = Arrays.asList(\"a\",\"b\",\"c\"); List&lt;String&gt; list2 = Arrays.asList(\"d\",\"e\",\"f\"); // 组合list1和list2的流 List result = Stream.concat(list1.stream(),list2.stream()).collect(Collectors.toList()); result.stream().forEach(System.out::println); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"CountFilterStreamTest","slug":"learning/SE/stream/CountFilterStreamTest","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.642Z","comments":true,"path":"1395/10/17/learning/SE/stream/CountFilterStreamTest/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/stream/CountFilterStreamTest/","excerpt":"","text":"12345678910111213141516171819202122232425262728293031323334353637package org.javacore.stream;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */import java.util.Arrays;import java.util.List;import java.util.stream.Collectors;/** * 过滤 * 流的元素数量 * * Created by bysocket on 16/7/14. */public class CountFilterStreamTest &#123; public static void main(String[] args) &#123; List&lt;String&gt; list1 = Arrays.asList(\"a\",\"b\",\"ac\"); // filter 过滤 List result = list1.stream().filter(str -&gt; str.startsWith(\"a\")).collect(Collectors.toList()); result.stream().forEach(System.out::println); System.out.println(); // count 流的元素数量 long l = list1.stream().filter(str -&gt; str.startsWith(\"a\")).count(); System.out.println(\"list1 字符从a开始的数量:\" + l); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"CreateStreamTest","slug":"learning/SE/stream/CreateStreamTest","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.640Z","comments":true,"path":"1395/10/17/learning/SE/stream/CreateStreamTest/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/stream/CreateStreamTest/","excerpt":"","text":"12345678910111213141516171819202122232425package org.javacore.stream;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * 创建流 * * Created by bysocket on 16/7/18. */public class CreateStreamTest &#123; public static void main(String[] args) &#123; &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"DistinctStreamTest","slug":"learning/SE/stream/DistinctStreamTest","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.643Z","comments":true,"path":"1395/10/17/learning/SE/stream/DistinctStreamTest/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/stream/DistinctStreamTest/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132package org.javacore.stream;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */import java.util.Arrays;import java.util.List;import java.util.stream.Collectors;/** * 去重 * * Created by bysocket on 16/7/14. */public class DistinctStreamTest &#123; public static void main(String[] args) &#123; List&lt;String&gt; list1 = Arrays.asList(\"a\",\"b\",\"b\",\"b\",\"ac\"); // 去重 List result = list1.stream().distinct().collect(Collectors.toList()); result.stream().forEach(str -&gt; System.out.print(str + \" -&gt; \")); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"SortedStreamTest","slug":"learning/SE/stream/SortedStreamTest","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.641Z","comments":true,"path":"1395/10/17/learning/SE/stream/SortedStreamTest/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/stream/SortedStreamTest/","excerpt":"","text":"123456789101112131415161718192021222324252627282930package org.javacore.stream;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */import java.util.Arrays;import java.util.List;/** * 排序 * * Created by bysocket on 16/7/14. */public class SortedStreamTest &#123; public static void main(String[] args) &#123; List&lt;String&gt; list1 = Arrays.asList(\"a\",\"e\",\"b\",\"ac\"); // 排序 list1.stream().sorted().forEach(str -&gt; System.out.print(str + \" -&gt; \")); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"Duration","slug":"learning/SE/time/Duration","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.684Z","comments":true,"path":"1395/10/17/learning/SE/time/Duration/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/time/Duration/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272package org.javacore.time;import com.google.common.base.Preconditions;import com.google.common.collect.Maps;import java.io.Serializable;import java.util.Map;import java.util.concurrent.TimeUnit;import java.util.regex.Matcher;import java.util.regex.Pattern;/** * Title: Duration * Create Date: 2016-08-26 15:43 * Description: Duration unit, consisting of length and time unit. * Simple time convert. * * @author Yufan */public class Duration implements Serializable &#123; private static final long serialVersionUID = 3898309763927286550L; /** * A duration of Long.MAX_VALUE Days */ public static final Duration INFINITE = new Duration(); /** * Common time pattern */ private static final Pattern PATTERN = Pattern.compile( \"(∞|inf|infinite)|\" + \"(([\\\\d]+)[\\\\s]*(\" + \"ns|nanosecond(s)?|\" + \"us|microsecond(s)?|\" + \"ms|millisecond(s)?|\" + \"s|second(s)?|\" + \"m|min|mins|minute(s)?|\" + \"h|hour(s)?|\" + \"d|day(s)?\" + \"))\"); private static final Map&lt;String, TimeUnit&gt; SUFFIXES; public final long length; public final TimeUnit timeUnit; public final boolean finite; static &#123; SUFFIXES = Maps.newHashMapWithExpectedSize(32); SUFFIXES.put(\"ns\", TimeUnit.NANOSECONDS); SUFFIXES.put(\"nanosecond\", TimeUnit.NANOSECONDS); SUFFIXES.put(\"nanoseconds\", TimeUnit.NANOSECONDS); SUFFIXES.put(\"us\", TimeUnit.MICROSECONDS); SUFFIXES.put(\"microsecond\", TimeUnit.MICROSECONDS); SUFFIXES.put(\"microseconds\", TimeUnit.MICROSECONDS); SUFFIXES.put(\"ms\", TimeUnit.MILLISECONDS); SUFFIXES.put(\"millisecond\", TimeUnit.MILLISECONDS); SUFFIXES.put(\"milliseconds\", TimeUnit.MILLISECONDS); SUFFIXES.put(\"s\", TimeUnit.SECONDS); SUFFIXES.put(\"second\", TimeUnit.SECONDS); SUFFIXES.put(\"seconds\", TimeUnit.SECONDS); SUFFIXES.put(\"m\", TimeUnit.MINUTES); SUFFIXES.put(\"min\", TimeUnit.MINUTES); SUFFIXES.put(\"mins\", TimeUnit.MINUTES); SUFFIXES.put(\"minute\", TimeUnit.MINUTES); SUFFIXES.put(\"minutes\", TimeUnit.MINUTES); SUFFIXES.put(\"h\", TimeUnit.HOURS); SUFFIXES.put(\"hour\", TimeUnit.HOURS); SUFFIXES.put(\"hours\", TimeUnit.HOURS); SUFFIXES.put(\"d\", TimeUnit.DAYS); SUFFIXES.put(\"day\", TimeUnit.DAYS); SUFFIXES.put(\"days\", TimeUnit.DAYS); &#125; /** * Infinite constructor. */ private Duration() &#123; finite = false; this.length = Long.MAX_VALUE; this.timeUnit = TimeUnit.DAYS; &#125; private Duration(long length, TimeUnit timeUnit) &#123; this.length = length; this.timeUnit = Preconditions.checkNotNull(timeUnit, \"timeUnit\"); finite = !(length == Long.MAX_VALUE &amp;&amp; TimeUnit.DAYS.equals(timeUnit)); &#125; /** * Returns the Duration converted to days. */ public long toDays() &#123; return TimeUnit.DAYS.convert(length, timeUnit); &#125; /** * Returns the Duration converted to hours. */ public long toHours() &#123; return TimeUnit.HOURS.convert(length, timeUnit); &#125; /** * Returns the Duration converted to microseconds. */ public long toMicros() &#123; return TimeUnit.MICROSECONDS.convert(length, timeUnit); &#125; /** * Returns the Duration converted to microseconds. */ public long toMicroseconds() &#123; return TimeUnit.MICROSECONDS.convert(length, timeUnit); &#125; /** * Returns the Duration converted to milliseconds. */ public long toMillis() &#123; return TimeUnit.MILLISECONDS.convert(length, timeUnit); &#125; /** * Returns the Duration converted to milliseconds. */ public long toMilliseconds() &#123; return TimeUnit.MILLISECONDS.convert(length, timeUnit); &#125; /** * Returns the Duration converted to minutes. */ public long toMins() &#123; return TimeUnit.MINUTES.convert(length, timeUnit); &#125; /** * Returns the Duration converted to minutes. */ public long toMinutes() &#123; return TimeUnit.MINUTES.convert(length, timeUnit); &#125; /** * Returns the Duration converted to nanoseconds. */ public long toNanos() &#123; return TimeUnit.NANOSECONDS.convert(length, timeUnit); &#125; /** * Returns the Duration converted to nanoseconds. */ public long toNanoseconds() &#123; return TimeUnit.NANOSECONDS.convert(length, timeUnit); &#125; /** * Returns the Duration converted to seconds. */ public long toSeconds() &#123; return TimeUnit.SECONDS.convert(length, timeUnit); &#125; /** * Returns the Duration converted to seconds. */ public long toSecs() &#123; return TimeUnit.SECONDS.convert(length, timeUnit); &#125; /** * Returns a Duration of &#123;@code count&#125; days. */ public static Duration days(long count) &#123; return new Duration(count, TimeUnit.DAYS); &#125; /** * Returns a Duration of &#123;@code count&#125; hours. */ public static Duration hours(long count) &#123; return new Duration(count, TimeUnit.HOURS); &#125; /** * Returns an infinite duration of Long.MAX_VALUE days. */ public static Duration inf() &#123; return INFINITE; &#125; /** * Returns an infinite duration of Long.MAX_VALUE days. */ public static Duration infinite() &#123; // NOSONAR return INFINITE; &#125; /** * Returns a Duration of &#123;@code count&#125; microseconds. */ public static Duration microseconds(long count) &#123; return new Duration(count, TimeUnit.MICROSECONDS); &#125; /** * Returns a Duration of &#123;@code count&#125; milliseconds. */ public static Duration millis(long count) &#123; return new Duration(count, TimeUnit.MILLISECONDS); &#125; /** * Returns a Duration of &#123;@code count&#125; milliseconds. */ public static Duration milliseconds(long count) &#123; return new Duration(count, TimeUnit.MILLISECONDS); &#125; /** * Returns a Duration of &#123;@code count&#125; minutes. */ public static Duration mins(long count) &#123; return new Duration(count, TimeUnit.MINUTES); &#125; /** * Returns a Duration of &#123;@code count&#125; minutes. */ public static Duration minutes(long count) &#123; return new Duration(count, TimeUnit.MINUTES); &#125; /** * Returns a Duration of &#123;@code count&#125; nanoseconds. */ public static Duration nanos(long count) &#123; return new Duration(count, TimeUnit.NANOSECONDS); &#125; /** * Returns a Duration of &#123;@code count&#125; nanoseconds. */ public static Duration nanoseconds(long count) &#123; return new Duration(count, TimeUnit.NANOSECONDS); &#125; /** * Returns a Duration of &#123;@code count&#125; &#123;@code unit&#125;s. */ public static Duration of(long count, TimeUnit unit) &#123; return new Duration(count, unit); &#125; /** * Returns a Duration from the parsed &#123;@code duration&#125;. Example: * &lt;br /&gt; * &lt;pre&gt; * 5 s * 5 seconds * 10m * 10 minutes * &lt;/pre&gt; */ public static Duration of(String duration) &#123; Matcher matcher = PATTERN.matcher(duration); if (!matcher.matches()) &#123; throw new IllegalArgumentException(\"Invalid duration: \" + duration); &#125; if (matcher.group(1) != null) &#123; return INFINITE; &#125; else &#123; String unit = matcher.group(4); String value = matcher.group(3); return new Duration(Long.parseLong(value), SUFFIXES.get(unit)); &#125; &#125; /** * Returns a Duration of &#123;@code count&#125; seconds. */ public static Duration seconds(long count) &#123; return new Duration(count, TimeUnit.SECONDS); &#125; /** * Returns a Duration of &#123;@code count&#125; seconds. */ public static Duration secs(long count) &#123; return new Duration(count, TimeUnit.SECONDS); &#125; @Override public boolean equals(Object obj) &#123; if (this == obj) &#123; return true; &#125; else if ((obj == null) || (getClass() != obj.getClass())) &#123; return false; &#125; final Duration duration = (Duration) obj; return (length == duration.length) &amp;&amp; (timeUnit == duration.timeUnit); &#125; @Override public int hashCode() &#123; return (31 * (int) (length ^ (length &gt;&gt;&gt; 32))) + timeUnit.hashCode(); &#125; @Override public String toString() &#123; String units = timeUnit.toString().toLowerCase(); if (length == 1) units = units.substring(0, units.length() - 1); return Long.toString(length) + ' ' + units; &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"TimeUtil","slug":"learning/SE/time/TimeUtil","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.679Z","comments":true,"path":"1395/10/17/learning/SE/time/TimeUtil/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/time/TimeUtil/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102package org.javacore.time;import java.time.LocalDateTime;import java.time.format.DateTimeFormatter;/** * 基于 JDK 8 time包的时间工具类 * &lt;p/&gt; * Created by bysocket on 16/8/23. */public final class TimeUtil &#123; /** * 获取默认时间格式: yyyy-MM-dd HH:mm:ss */ private static final DateTimeFormatter DEFAULT_DATETIME_FORMATTER = TimeFormat.LONG_DATE_PATTERN_LINE.formatter; private TimeUtil() &#123; // no construct function &#125; /** * String 转时间 * * @param timeStr * @return */ public static LocalDateTime parseTime(String timeStr) &#123; return LocalDateTime.parse(timeStr, DEFAULT_DATETIME_FORMATTER); &#125; /** * String 转时间 * * @param timeStr * @param format 时间格式 * @return */ public static LocalDateTime parseTime(String timeStr, TimeFormat format) &#123; return LocalDateTime.parse(timeStr, format.formatter); &#125; /** * 时间转 String * * @param time * @return */ public static String parseTime(LocalDateTime time) &#123; return DEFAULT_DATETIME_FORMATTER.format(time); &#125; /** * 时间转 String * * @param time * @param format 时间格式 * @return */ public static String parseTime(LocalDateTime time, TimeFormat format) &#123; return format.formatter.format(time); &#125; /** * 获取当前时间 * * @return */ public static String getCurrentDatetime() &#123; return DEFAULT_DATETIME_FORMATTER.format(LocalDateTime.now()); &#125; /** * 获取当前时间 * * @param format 时间格式 * @return */ public static String getCurrentDatetime(TimeFormat format) &#123; return format.formatter.format(LocalDateTime.now()); &#125; /** * 时间格式 */ public enum TimeFormat &#123; /** * 短时间格式 */ SHORT_DATE_PATTERN_LINE(\"yyyy-MM-dd\"), SHORT_DATE_PATTERN_SLASH(\"yyyy/MM/dd\"), SHORT_DATE_PATTERN_DOUBLE_SLASH(\"yyyy\\\\MM\\\\dd\"), SHORT_DATE_PATTERN_NONE(\"yyyyMMdd\"), /** * 长时间格式 */ LONG_DATE_PATTERN_LINE(\"yyyy-MM-dd HH:mm:ss\"), LONG_DATE_PATTERN_SLASH(\"yyyy/MM/dd HH:mm:ss\"), LONG_DATE_PATTERN_DOUBLE_SLASH(\"yyyy\\\\MM\\\\dd HH:mm:ss\"), LONG_DATE_PATTERN_NONE(\"yyyyMMdd HH:mm:ss\"), /** * 长时间格式 带毫秒 */ LONG_DATE_PATTERN_WITH_MILSEC_LINE(\"yyyy-MM-dd HH:mm:ss.SSS\"), LONG_DATE_PATTERN_WITH_MILSEC_SLASH(\"yyyy/MM/dd HH:mm:ss.SSS\"), LONG_DATE_PATTERN_WITH_MILSEC_DOUBLE_SLASH(\"yyyy\\\\MM\\\\dd HH:mm:ss.SSS\"), LONG_DATE_PATTERN_WITH_MILSEC_NONE(\"yyyyMMdd HH:mm:ss.SSS\"); private transient DateTimeFormatter formatter; TimeFormat(String pattern) &#123; formatter = DateTimeFormatter.ofPattern(pattern); &#125; &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"LockingMappedFiles","slug":"learning/SE/nio/LockingMappedFiles","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.678Z","comments":true,"path":"1395/10/17/learning/SE/nio/LockingMappedFiles/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/nio/LockingMappedFiles/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768package org.javacore.nio;import java.io.FileNotFoundException;import java.io.IOException;import java.io.RandomAccessFile;import java.nio.ByteBuffer;import java.nio.MappedByteBuffer;import java.nio.channels.FileChannel;import java.nio.channels.FileLock;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-10-17 15:17:04 * 映射文件的使用 */public class LockingMappedFiles &#123; static final int LENGTH = 0x8FFFFFF; // 128 MB static FileChannel fc; public static void main(String[] args) throws IOException &#123; fc = new RandomAccessFile(\"data.txt\" , \"rw\").getChannel(); MappedByteBuffer out = fc.map(FileChannel.MapMode.READ_WRITE, 0 , LENGTH); for (int i = 0;i &lt; LENGTH; i++) out.put((byte)'x'); new LockAndModify(out,0,0 + LENGTH/3); new LockAndModify(out,LENGTH/2,LENGTH/2 + LENGTH/4); &#125; // 线程 private static class LockAndModify extends Thread &#123; private ByteBuffer buffer; private int start,end; LockAndModify(ByteBuffer mbb, int start, int end) &#123; this.start = start; this.end = end; mbb.limit(end); mbb.position(start); buffer = mbb.slice(); start(); &#125; public void run() &#123; try &#123; // 从FileChannel获取文件加锁对象，并加锁 FileLock fl = fc.lock(start,end,false); System.out.println(\"Locked: \" + start + \" to \" + end); // 写入数据 while (buffer.position() &lt; buffer.limit() - 1) buffer.put((byte)(buffer.get() + 1)); fl.release(); System.out.println(\"Released: \" + start + \" to \" + end); &#125; catch (IOException e) &#123; throw new RuntimeException(e); &#125; &#125; &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"StringT","slug":"learning/SE/base/String/StringT","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.727Z","comments":true,"path":"1395/10/17/learning/SE/base/String/StringT/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/base/String/StringT/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132package org.javacore.base.String; /* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author BYSocket * @since 2016-01-06 19:51:00 * 常见面试题：String作为方法参数传递,另外一个例子 $&#123;@link StringT2&#125; * 这就叫做“值传递”，即方法操作的是参数变量（也就是原型变量的一个值的拷贝） * 改变的也只是原型变量的一个拷贝而已，而非变量本身 */public class StringT &#123; public static void main(String[] args) &#123; String str = \"123\"; change(str); System.out.println(str); &#125; public static void change(String str) &#123; str = \"456\"; &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"StringT2","slug":"learning/SE/base/String/StringT2","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.725Z","comments":true,"path":"1395/10/17/learning/SE/base/String/StringT2/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/base/String/StringT2/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132333435363738394041package org.javacore.base.String; /* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author BYSocket * @since 2016-01-06 20:07:00 * 对象含有String作为方法参数传递 */public class StringT2 &#123; public static void main(String[] args) &#123; StringObject sb = new StringObject(); sb.setName(\"123\"); change(sb); System.out.println(sb.getName()); &#125; public static void change(StringObject sb) &#123; sb = new StringObject(); sb.setName(\"456\"); &#125;&#125;class StringObject &#123; String name; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"ApplyClass","slug":"learning/SE/base/inter/ApplyClass","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.728Z","comments":true,"path":"1395/10/17/learning/SE/base/inter/ApplyClass/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/base/inter/ApplyClass/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051package org.javacore.base.inter;import java.util.Arrays;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-12-1 13:04:30 * 不使用接口的接口案例 */class Processor &#123; public String name()&#123; return getClass().getSimpleName(); &#125; Object process(Object input)&#123;return input;&#125;&#125;class Upcase extends Processor &#123; @Override Object process(Object input) &#123; return ((String)input).toUpperCase(); &#125;&#125;class Splitcase extends Processor &#123; @Override Object process(Object input) &#123; return Arrays.toString(((String) input).split(\" \")); &#125;&#125;public class ApplyClass &#123; public static void process(Processor p , Object input)&#123; System.out.println(\"调用对象名：\" + p.name()); System.out.println(p.process(input)); &#125; public static String s = \"BYSocket's Blog is www.bysocket.com\"; public static void main(String[] args) &#123; process(new Upcase(),s); process(new Splitcase(),s); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"CopyT","slug":"learning/SE/base/copy/CopyT","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.729Z","comments":true,"path":"1395/10/17/learning/SE/base/copy/CopyT/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/base/copy/CopyT/","excerpt":"","text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697package org.javacore.base.copy;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-11-16 13:53:51 * 深拷贝与浅拷贝 */class Family implements Cloneable&#123; private String name; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; /** * 深拷贝 * @return */ /*@Override public Object clone() &#123; Object o = null; try &#123; o = super.clone(); &#125; catch (CloneNotSupportedException e) &#123; e.printStackTrace(); &#125; return o; &#125;*/&#125;class Student implements Cloneable&#123; private String name; private Family family; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public Family getFamily() &#123; return family; &#125; public void setFamily(Family family) &#123; this.family = family; &#125; /** * 浅拷贝 对其对象的引用却没有拷贝 * @return * @throws CloneNotSupportedException */ @Override protected Object clone() throws CloneNotSupportedException &#123; return super.clone(); &#125; /** * 深拷贝 */ /*@Override protected Object clone() &#123; Student o = null; try &#123; o = (Student)super.clone(); &#125; catch (CloneNotSupportedException e) &#123; e.printStackTrace(); &#125; o.family = (Family) family.clone(); return o; &#125;*/&#125;public class CopyT &#123; public static void main(String[] args) throws CloneNotSupportedException &#123; Family family = new Family(); family.setName(\"Jeff Family\"); Student student1 = new Student(); student1.setFamily(family); student1.setName(\"Jeff\"); Student student2 = (Student) student1.clone(); student2.setName(\"Jeff2\"); student2.getFamily().setName(\"Jeff2 Family\"); System.out.println(student1.getName() + \" \" + student1.getFamily().getName()); System.out.println(student2.getName() + \" \" + student2.getFamily().getName()); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"ApplyInter","slug":"learning/SE/base/inter/ApplyInter","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.728Z","comments":true,"path":"1395/10/17/learning/SE/base/inter/ApplyInter/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/base/inter/ApplyInter/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657package org.javacore.base.inter;import java.util.Arrays;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-12-1 13:04:30 * 使用接口的接口案例 */interface ProcessorInter &#123; String name(); Object process(Object input);&#125;class UpcaseImpl implements ProcessorInter &#123; @Override public String name() &#123; return this.getClass().getSimpleName(); &#125; @Override public Object process(Object input) &#123; return ((String)input).toUpperCase(); &#125;&#125;class SplitcaseImpl implements ProcessorInter &#123; @Override public String name() &#123; return this.getClass().getSimpleName(); &#125; @Override public Object process(Object input) &#123; return Arrays.toString(((String) input).split(\" \")); &#125;&#125;public class ApplyInter &#123; public static void process(ProcessorInter p , Object input)&#123; System.out.println(\"调用对象名：\" + p.name()); System.out.println(p.process(input)); &#125; public static String s = \"BYSocket's Blog is www.bysocket.com\"; public static void main(String[] args) &#123; process(new UpcaseImpl(),s); process(new SplitcaseImpl(),s); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"HashList","slug":"learning/SE/collection/hash/HashList","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.713Z","comments":true,"path":"1395/10/17/learning/SE/collection/hash/HashList/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/collection/hash/HashList/","excerpt":"","text":"1234567891011121314151617181920212223242526272829package org.javacore.collection.hash;import java.util.ArrayList;import java.util.List;/** * Created by bysocket on 16/9/26. */public class HashList &#123; public static void main(String[] args) &#123; // init data list List&lt;SkuObj&gt; reqSkuObjList = new ArrayList&lt;&gt;(); List&lt;SkuObj&gt; existSkuObjList = new ArrayList&lt;&gt;(); for (int i = 0 ; i &lt; 5000; i++) &#123; SkuObj skuObj = new SkuObj(); skuObj.setId(i); skuObj.setName(\"name\" + i); skuObj.setAge(i + 666); skuObj.setDesc(\"desc\" + i); reqSkuObjList.add(skuObj); &#125; for (int i = 0 ; i &lt; 5000; i++) &#123; SkuObj skuObj = new SkuObj(); skuObj.setId(i); skuObj.setName(\"nameexist\" + i); skuObj.setAge(i + 888); skuObj.setDesc(\"descexist\" + i); existSkuObjList.add(skuObj); &#125; &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"SkuObj","slug":"learning/SE/collection/hash/SkuObj","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.713Z","comments":true,"path":"1395/10/17/learning/SE/collection/hash/SkuObj/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/collection/hash/SkuObj/","excerpt":"","text":"12345678910111213141516171819202122232425262728293031323334package org.javacore.collection.hash;/** * Created by bysocket on 16/9/26. */public class SkuObj &#123; Integer id; String name; Integer age; String desc; public Integer getId() &#123; return id; &#125; public void setId(Integer id) &#123; this.id = id; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public Integer getAge() &#123; return age; &#125; public void setAge(Integer age) &#123; this.age = age; &#125; public String getDesc() &#123; return desc; &#125; public void setDesc(String desc) &#123; this.desc = desc; &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"ArrayListT","slug":"learning/SE/collection/list/ArrayListT","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.723Z","comments":true,"path":"1395/10/17/learning/SE/collection/list/ArrayListT/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/collection/list/ArrayListT/","excerpt":"","text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152package org.javacore.collection.list;import java.util.ArrayList;import java.util.Iterator;import java.util.List;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-6-18 21:05:38 * ArrayList的使用 */public class ArrayListT&#123; public static void main(String[] args)&#123; listMethods(); &#125; /** * 测试ArrayList基本操作方法，其角标的使用及迭代器next()的使用。 */ @SuppressWarnings(&#123; \"rawtypes\", \"unchecked\" &#125;) public static void listMethods()&#123; List a1 = new ArrayList&lt;String&gt;(); a1.add(\"List01\"); a1.add(\"List03\"); a1.add(\"List04\"); System.out.print(\"原来集合：\\n\\t\"+a1+\"\\n\"); a1.add(1,\"List02\"); System.out.print(\"指定角标1插入：\\n\\t\"+a1+\"\\n\"); a1.remove(2); System.out.print(\"指定角标2删除：\\n\\t\"+a1+\"\\n\"); System.out.print(\"指定角标2查询：\\n\\t\"+a1.get(2)+\"\\n\"); Iterator i1 = a1.iterator(); System.out.println(\"用迭代器查询全部元素：\"); while (i1.hasNext()) System.out.print(i1.next()+\"\\t\"); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"MapMakerT0","slug":"learning/SE/colgoogle/MapMakerT0","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.705Z","comments":true,"path":"1395/10/17/learning/SE/colgoogle/MapMakerT0/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/colgoogle/MapMakerT0/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132333435363738394041package org.javacore.colgoogle;import com.google.common.base.Function;import com.google.common.collect.MapMaker;import java.util.concurrent.ConcurrentMap;import java.util.concurrent.TimeUnit;/** * Created by 子木 on 2016/2/20. */public class MapMakerT0 &#123; public static void main(String[] args) &#123; /** * expiration(3, TimeUnit.SECONDS)设置超时时间为3秒 */ ConcurrentMap&lt;String , String&gt; map = new MapMaker().concurrencyLevel(32).softKeys().weakValues() .expiration(3, TimeUnit.SECONDS).makeComputingMap( /** * 提供当Map里面不包含所get的项，可以自动加入到Map的功能 * 可以将这里的返回值放到对应的key的value中 */ new Function&lt;String, String&gt;() &#123; public String apply(String s) &#123; return \"creating \" + s + \" -&gt; Object\"; &#125; &#125; ); map.put(\"a\",\"testa\"); map.put(\"b\",\"testb\"); System.out.println(map.get(\"a\")); System.out.println(map.get(\"b\")); System.out.println(map.get(\"c\")); try &#123; // 4秒后，大于超时时间，缓存失效。 Thread.sleep(4000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; System.out.println(map.get(\"a\")); System.out.println(map.get(\"b\")); System.out.println(map.get(\"c\")); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"PerBtwnAllCollectionsT","slug":"learning/SE/collection/list/PerBtwnAllCollectionsT","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.724Z","comments":true,"path":"1395/10/17/learning/SE/collection/list/PerBtwnAllCollectionsT/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/collection/list/PerBtwnAllCollectionsT/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106package org.javacore.collection;import java.util.ArrayList;import java.util.HashMap;import java.util.HashSet;import java.util.LinkedList;import java.util.List;import java.util.Map;import java.util.Set;import java.util.TreeMap;import java.util.TreeSet;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-6-17 23:32:30 * 各集合添加元素性能对比 */@SuppressWarnings(\"unchecked\")public class PerBtwnAllCollectionsT&#123; public static void main(String[] args)&#123; // List Add对比 printLists(); // Set Add对比 printSets(); // Map put对比 printMaps(); &#125; /** * 比较List的Add方法 */ private static void printLists()&#123; List&lt;String&gt; a1 = new ArrayList&lt;String&gt;(); a1.add(\"List\"); a1.add(\"Set\"); a1.add(\"Queue\"); a1.add(\"Map\"); System.out.println(\"ArrayList Elements:\"); System.out.print(\"\\t\" + a1 + \"\\n\"); List&lt;String&gt; l1 = new LinkedList&lt;String&gt;(); l1.add(\"List\"); l1.add(\"Set\"); l1.add(\"Queue\"); l1.add(\"Map\"); System.out.println(\"LinkedList Elements:\"); System.out.print(\"\\t\" + l1 + \"\\n\"); &#125; /** * 比较Set的Add方法:注意元素的位置 */ @SuppressWarnings(\"rawtypes\") private static void printSets() &#123; Set h1 = new HashSet&lt;String&gt;(); h1.add(\"List\"); h1.add(\"Set\"); h1.add(\"Queue\"); h1.add(\"Map\"); System.out.println(\"HashSet Elements:\"); System.out.print(\"\\t\" + h1 + \"\\n\"); Set t1 = new TreeSet&lt;String&gt;(); t1.add(\"List\"); t1.add(\"Set\"); t1.add(\"Queue\"); t1.add(\"Map\"); System.out.println(\"TreeSet Elements:\"); System.out.print(\"\\t\" + t1 + \"\\n\"); &#125; /** * 比较Map的put方法:注意元素的位置 */ private static void printMaps() &#123; Map&lt;String, String&gt; h1 = new HashMap&lt;String, String&gt;(); h1.put(\"List\", \"ArrayList\"); h1.put(\"Set\", \"HashSet\"); h1.put(\"Queue\", \"PriorityQueue\"); h1.put(\"Map\", \"HashMap\"); System.out.println(\"HashMap Elements:\"); System.out.print(\"\\t\" + h1 + \"\\n\"); Map&lt;String, String&gt; t1 = new TreeMap&lt;String,String&gt;(); t1.put(\"List\", \"ArrayList\"); t1.put(\"Set\", \"HashSet\"); t1.put(\"Queue\", \"PriorityQueue\"); t1.put(\"Map\", \"HashMap\"); System.out.println(\"TreeMap Elements:\"); System.out.print(\"\\t\" + t1 + \"\\n\"); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"PerBtwnArlAndLklT","slug":"learning/SE/collection/list/PerBtwnArlAndLklT","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.722Z","comments":true,"path":"1395/10/17/learning/SE/collection/list/PerBtwnArlAndLklT/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/collection/list/PerBtwnArlAndLklT/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687package org.javacore.collection.list;import java.util.ArrayList;import java.util.LinkedList;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-6-18 21:05:38 * ArrayList与LinkedList性能的对比 */public class PerBtwnArlAndLklT&#123; public static void main(String[] args) &#123; testPerBtwnArlAndLkl(); &#125; /** * ArrayList与LinkedList各方法性能的对比 */ public static void testPerBtwnArlAndLkl()&#123; ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;Integer&gt;(); LinkedList&lt;Integer&gt; linkedList = new LinkedList&lt;Integer&gt;(); // ArrayList add方法 long startTime = System.nanoTime(); long endTime; long duration; for (int i = 0; i &lt; 100000; i++) arrayList.add(i); endTime = System.nanoTime(); duration = endTime - startTime; System.out.println(\"ArrayList add: \" + duration); // LinkedList add方法 startTime = System.nanoTime(); for (int i = 0; i &lt; 100000; i++) linkedList.add(i); endTime = System.nanoTime(); duration = endTime - startTime; System.out.println(\"LinkedList add: \" + duration); // ArrayList get方法 startTime = System.nanoTime(); for (int i = 0; i &lt; 10000; i++) arrayList.get(i); endTime = System.nanoTime(); duration = endTime - startTime; System.out.println(\"ArrayList get: \" + duration); // LinkedList get方法 startTime = System.nanoTime(); for (int i = 0; i &lt; 10000; i++) linkedList.get(i); endTime = System.nanoTime(); duration = endTime - startTime; System.out.println(\"LinkedList get: \" + duration); // ArrayList remove方法 startTime = System.nanoTime(); for (int i = 9999; i &gt;=0; i--) arrayList.remove(i); endTime = System.nanoTime(); duration = endTime - startTime; System.out.println(\"ArrayList remove: \" + duration); // LinkedList remove方法 startTime = System.nanoTime(); for (int i = 9999; i &gt;=0; i--) linkedList.remove(i); endTime = System.nanoTime(); duration = endTime - startTime; System.out.println(\"LinkedList remove: \" + duration); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"HashMapObjT","slug":"learning/SE/collection/map/HashMapObjT","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.721Z","comments":true,"path":"1395/10/17/learning/SE/collection/map/HashMapObjT/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/collection/map/HashMapObjT/","excerpt":"","text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061package org.javacore.collection.map;import java.util.HashMap;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-6-18 22:05:44 * HashMap 操作对象的决定因子：hashCode与equals */public class HashMapObjT&#123; public static void main(String[] args)&#123; HashMap&lt;A, Integer&gt; hashMapA = new HashMap&lt;A, Integer&gt;(); hashMapA.put(new A(), 10); hashMapA.put(new A(), 5); System.out.println(\"HashMapA Elements:\"); System.out.print(\"\\t\" + hashMapA + \"\\n\"); HashMap&lt;B, Integer&gt; hashMapB = new HashMap&lt;B, Integer&gt;(); hashMapB.put(new B(), 10); hashMapB.put(new B(), 5); System.out.println(\"HashMapB Elements:\"); System.out.print(\"\\t\" + hashMapB + \"\\n\"); HashMap&lt;C, Integer&gt; hashMapC = new HashMap&lt;C, Integer&gt;(); hashMapC.put(new C(), 10); hashMapC.put(new C(), 5); System.out.println(\"HashMapC Elements:\"); System.out.print(\"\\t\" + hashMapC + \"\\n\"); &#125;&#125;class A&#123; public boolean equals(Object obj)&#123; return true; &#125;&#125;class B&#123; public int hashCode()&#123; return 1; &#125;&#125;class C&#123; public int hashCode()&#123; return 2; &#125; public boolean equals(Object obj)&#123; return true; &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"CountDownLatchT","slug":"learning/SE/concurrent/CountDownLatchT","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.703Z","comments":true,"path":"1395/10/17/learning/SE/concurrent/CountDownLatchT/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/concurrent/CountDownLatchT/","excerpt":"","text":"12345678910111213141516171819202122232425262728293031323334353637package org.javacore.concurrent;import java.util.Random;import java.util.concurrent.CountDownLatch;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;import java.util.concurrent.TimeUnit;/** * 同步辅助类:完成一组线程执行前,使得一个或多个线程一直等待 * * Created by bysocket on 16/4/26. */public class CountDownLatchT &#123; // 线程中止的计数器 private final static int COUNT = 10; private final static CountDownLatch count = new CountDownLatch(COUNT); // 线程池 private final static ExecutorService service = Executors.newFixedThreadPool(5); public static void main(String[] args) throws InterruptedException &#123; for (int i = 0; i &lt; COUNT; i++) &#123; service.execute(() -&gt; &#123; try &#123; int time = new Random().nextInt(5); TimeUnit.SECONDS.sleep(time); System.out.printf(\"Thread %s ## 耗时:%d\\n\", Thread.currentThread().getId(), time); // 线程结束后,计数器减一 count.countDown(); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125;); &#125; // 主线程一直被阻塞,直到count为0,实现线程同步 count.await(); service.shutdown(); System.out.println(\"同步线程执行组结束!\"); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"PriorityQueueT","slug":"learning/SE/collection/queue/PriorityQueueT","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.712Z","comments":true,"path":"1395/10/17/learning/SE/collection/queue/PriorityQueueT/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/collection/queue/PriorityQueueT/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233package org.javacore.collection.queue;import java.util.PriorityQueue;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-6-17 23:32:30 * PriorityQueue的使用 */public class PriorityQueueT &#123; public static void main(String[] args) &#123; int[] ia = &#123; 1, 10, 5, 3, 4, 7, 6, 9, 8 &#125;; PriorityQueue&lt;Integer&gt; pq1 = new PriorityQueue&lt;Integer&gt;(); for (int x : ia) pq1.offer(x); // 注意排序 System.out.println(\"pq1: \" + pq1); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"TreeMapT","slug":"learning/SE/collection/map/TreeMapT","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.721Z","comments":true,"path":"1395/10/17/learning/SE/collection/map/TreeMapT/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/collection/map/TreeMapT/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536package org.javacore.collection.map;import java.util.Map;import java.util.TreeMap;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-6-18 21:36:04 * TreeMap 的使用 */public class TreeMapT&#123; @SuppressWarnings(&#123; \"rawtypes\", \"unchecked\" &#125;) public static void main(String[] args) &#123; Map map = new TreeMap(); map.put(\"1\", \"1\"); map.put(\"4\", \"4\"); map.put(\"2\", \"2\"); map.put(\"2\", \"3\"); // 注意排序 System.out.println(map); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"HashSetObjT","slug":"learning/SE/collection/set/HashSetObjT","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.716Z","comments":true,"path":"1395/10/17/learning/SE/collection/set/HashSetObjT/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/collection/set/HashSetObjT/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354package org.javacore.collection.set;import java.util.HashSet;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-6-19 15:41:03 * HashSet 操作对象的决定因子：hashCode与equals */public class HashSetObjT&#123; @SuppressWarnings(&#123; \"rawtypes\", \"unchecked\" &#125;) public static void main(String[] args)&#123; HashSet objs = new HashSet(); objs.add(new A()); objs.add(new B()); objs.add(new C()); objs.add(new A()); objs.add(new B()); objs.add(new C()); System.out.println(\"HashSet Elements:\"); System.out.print(\"\\t\" + objs + \"\\n\"); &#125;&#125;class A &#123; public boolean equals(Object obj)&#123; return true; &#125;&#125;class B &#123; public int hashCode()&#123; return 1; &#125;&#125;class C &#123; public int hashCode()&#123; return 2; &#125; public boolean equals(Object obj)&#123; return true; &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"HashSetT","slug":"learning/SE/collection/set/HashSetT","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.720Z","comments":true,"path":"1395/10/17/learning/SE/collection/set/HashSetT/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/collection/set/HashSetT/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132333435363738package org.javacore.collection.set;import java.util.HashSet;import java.util.Set;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-6-19 15:46:37 * HashSet的Add方法 */public class HashSetT&#123; @SuppressWarnings(&#123; \"rawtypes\", \"unchecked\" &#125;) public static void main(String[] args)&#123; Set h1 = new HashSet&lt;String&gt;(); h1.add(\"List\"); h1.add(new String(\"List\")); h1.add(\"List\"); h1.add(\"Set\"); h1.add(\"Queue\"); h1.add(\"Map\"); // 注意排序 System.out.println(\"HashSet Elements:\"); System.out.print(\"\\t\" + h1 + \"\\n\"); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"HashSetsCopyT","slug":"learning/SE/collection/set/HashSetsCopyT","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.721Z","comments":true,"path":"1395/10/17/learning/SE/collection/set/HashSetsCopyT/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/collection/set/HashSetsCopyT/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748package org.javacore.collection.set;import java.util.HashSet;import java.util.LinkedHashSet;import java.util.Set;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-6-18 21:02:07 * HashSet及其子类的转换使用 */public class HashSetsCopyT&#123; @SuppressWarnings(&#123; \"rawtypes\", \"unchecked\" &#125;) public static void main(String[] args)&#123; Set s1 = new HashSet&lt;String&gt;(); s1.add(\"List\"); s1.add(\"Queue\"); s1.add(\"Set\"); s1.add(\"Map\"); System.out.println(\"HashSet Elements:\"); System.out.print(\"\\t\" + s1 + \"\\n\"); Set s2 = copy(s1); System.out.println(\"HashSet Elements After Copy:\"); System.out.print(\"\\t\" + s2 + \"\\n\"); &#125; @SuppressWarnings(&#123; \"rawtypes\", \"unchecked\" &#125;) public static Set copy(Set set) &#123; Set setCopy = new LinkedHashSet(set); return setCopy; &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"SetContainT","slug":"learning/SE/collection/set/SetContainT","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.715Z","comments":true,"path":"1395/10/17/learning/SE/collection/set/SetContainT/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/collection/set/SetContainT/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647package org.javacore.collection.set;import java.util.Arrays;import java.util.HashSet;import java.util.Set;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-6-19 15:46:37 * Set的Contains方法 */public class SetContainT &#123; public static void main(String[] args) &#123; HashSet&lt;Integer&gt; s1 = new HashSet&lt;Integer&gt;(Arrays.asList(1,2,3)); HashSet&lt;Integer&gt; s2 = new HashSet&lt;Integer&gt;(Arrays.asList(4,2,5)); System.out.println(getUnion(s1, s2)); &#125; /** * 获取Set中不同对象的个数 * @param s1 * @param s2 * @return */ public static int getUnion(Set&lt;?&gt; s1,Set&lt;?&gt; s2)&#123; int count = s1.size(); for( Object obj : s2)&#123; if (!s1.contains(obj)) count++; &#125; return count; &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"TreeSetT","slug":"learning/SE/collection/set/TreeSetT","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.720Z","comments":true,"path":"1395/10/17/learning/SE/collection/set/TreeSetT/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/collection/set/TreeSetT/","excerpt":"","text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455package org.javacore.collection.set;import java.util.Iterator;import java.util.TreeSet;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-6-19 15:46:37 * TreeSet操作已实现Comparable接口的对象 */public class TreeSetT&#123; public static void main(String[] args)&#123; TreeSet&lt;Bird&gt; bSet = new TreeSet&lt;Bird&gt;(); bSet.add(new Bird(1)); bSet.add(new Bird(3)); bSet.add(new Bird(2)); // 注意排序 Iterator&lt;Bird&gt; iter = bSet.iterator(); while (iter.hasNext())&#123; Bird bird = (Bird) iter.next(); System.out.println(bird); &#125; &#125;&#125;/** * Bird对象 实现了Comparable接口 */class Bird implements Comparable&lt;Bird&gt;&#123; int size; public Bird(int s)&#123; size = s; &#125; public String toString()&#123; return size + \"号鸟\"; &#125; @Override public int compareTo(Bird o)&#123; return size - o.size; &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"CollectionsT","slug":"learning/SE/collection/util/CollectionsT","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.714Z","comments":true,"path":"1395/10/17/learning/SE/collection/util/CollectionsT/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/collection/util/CollectionsT/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556package org.javacore.collection.util;import java.util.ArrayList;import java.util.Collections;import java.util.List;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-6-17 23:32:30 * Collections的使用 */public class CollectionsT&#123; public static void main(String[] args)&#123; // 测试集合工具类Sort方法 testSort(); testAddAll(); &#125; /** * 测试集合工具类Sort方法 */private static void testSort()&#123; List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;(); list.add(1); list.add(3); list.add(2); list.add(4); // 调用集合工具类Sort方法 Collections.sort(list); System.out.println(\"list sorted:\"); System.out.print(\"\\t\" + list + \"\\n\");&#125;private static void testAddAll() &#123; List&lt;String&gt; list = new ArrayList&lt;&gt;(); list.add(\"s2\"); list.add(\"s4\"); list.add(\"s1\"); list.add(\"s3\"); System.out.println(list); Collections.addAll(list, \"s5\",\"s7\",null,\"s9\"); System.out.println(list);&#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"IterAndListIterT","slug":"learning/SE/collection/util/IterAndListIterT","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.714Z","comments":true,"path":"1395/10/17/learning/SE/collection/util/IterAndListIterT/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/collection/util/IterAndListIterT/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677package org.javacore.collection.util;import java.util.ArrayList;import java.util.Iterator;import java.util.List;import java.util.ListIterator;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-6-18 21:36:04 * Iterator与ListIterator的区别 */public class IterAndListIterT &#123; public static void main(String[] args) &#123; //iterator(); listIterator(); &#125; /** * 并发修改异常产生。 * 原因：Iterator(Object obj = it.next()) 会检查HashMap的size， * size发生变化，抛出错误ConcurrentModificationException。 */ @SuppressWarnings(&#123; \"unchecked\", \"rawtypes\" &#125;) public static void iterator()&#123; List a1 = new ArrayList&lt;String&gt;(); a1.add(\"List01\"); a1.add(\"List02\"); a1.add(\"List04\"); a1.add(\"List05\"); Iterator i1 = a1.iterator(); while (i1.hasNext())&#123; Object obj = i1.next(); if (obj.equals(\"List02\")) a1.add(\"List03\"); &#125; System.out.print(\"集合：\\n\\t\"+a1+\"\\n\"); &#125; /** * ListIterator可以实现对象的修改。 */ @SuppressWarnings(&#123; \"unchecked\", \"rawtypes\" &#125;) public static void listIterator()&#123; List a1 = new ArrayList&lt;String&gt;(); a1.add(\"List01\"); a1.add(\"List\"); a1.add(\"List03\"); a1.add(\"List04\"); ListIterator l1 = a1.listIterator(); while (l1.hasNext())&#123; Object obj = l1.next(); if (obj.equals(\"List\"))&#123; l1.remove(); l1.add(\"List02\"); &#125; &#125; System.out.print(\"集合：\\n\\t\"+a1+\"\\n\"); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"PerBtwnEmptyMapAndHashMapT","slug":"learning/SE/collection/util/PerBtwnEmptyMapAndHashMapT","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.714Z","comments":true,"path":"1395/10/17/learning/SE/collection/util/PerBtwnEmptyMapAndHashMapT/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/collection/util/PerBtwnEmptyMapAndHashMapT/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647package org.javacore.collection.util;import java.util.Collections;import java.util.HashMap;import java.util.Map;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-6-19 16:03:10 * Collections.EMPTY_MAP 与 new HashMap 性能对比 * 场景：webservice接口，根据某些条件直接返回空Map，则使用Collections.EMPTY_MAP。 */public class PerBtwnEmptyMapAndHashMapT &#123; @SuppressWarnings(&#123;\"unused\", \"rawtypes\"&#125;) public static void main(String[] args) &#123; long startTime = System.nanoTime(); long endTime; long duration; for (int i = 0; i &lt; 100000000; i++) &#123; Map map = Collections.EMPTY_MAP; &#125; endTime = System.nanoTime(); duration = endTime - startTime; System.out.println(\"Collections.EMPTY_MAP: \" + duration); startTime = System.nanoTime(); for (int i = 0; i &lt; 100000000; i++) &#123; Map map = new HashMap&lt;&gt;(); &#125; endTime = System.nanoTime(); duration = endTime - startTime; System.out.println(\"new HashMap: \" + duration); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"FormatteMemoryInput","slug":"learning/SE/io/byteoper/FormatteMemoryInput","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.702Z","comments":true,"path":"1395/10/17/learning/SE/io/byteoper/FormatteMemoryInput/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/io/byteoper/FormatteMemoryInput/","excerpt":"","text":"123456789101112131415161718192021222324252627282930package org.javacore.io;import java.io.ByteArrayInputStream;import java.io.DataInputStream;import java.io.EOFException;import java.io.File;import java.io.IOException;/** * @author Jeff Lee * @since 2015-7-15 20:42:47 * 格式化内存输入 */public class FormatteMemoryInput &#123; public static void main(String[] args) throws IOException &#123; String filePath = \"src\" + File.separator + \"org\" + File.separator + \"javacore\" + File.separator + \"io\" + File.separator + \"FormatteMemoryInput.java\"; try &#123; DataInputStream in = new DataInputStream( // 缓冲区字节输入 new ByteArrayInputStream( BufferedInputFileT.read(filePath).getBytes())); while(true) System.out.println((char)in.readByte()); &#125; catch (EOFException e) &#123; System.out.println(\"End of Stream\"); &#125; &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"IntegerConvertT","slug":"learning/SE/io/byteoper/IntegerConvertT","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.701Z","comments":true,"path":"1395/10/17/learning/SE/io/byteoper/IntegerConvertT/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/io/byteoper/IntegerConvertT/","excerpt":"","text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455package org.javacore.io.byteoper;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-6-19 21:26:09 * Integer与byte数组转换 */public class IntegerConvertT &#123; public static void main(String[] args)&#123; // 将我的学号转换成字节码 byte[] bytes = IntegerConvertT.int2Bytes(1206010035); System.out.println(bytes[0] + \" \" + bytes[1] + \" \" + bytes[2] + \" \" + bytes[3]); // 字节码就可以转换回学号 System.out.println(IntegerConvertT.bytes2Int(bytes)); &#125; /** * Int转字节数组 */ public static byte[] int2Bytes(int inta)&#123; // 32位Int可存于长度为4的字节数组 byte[] bytes = new byte[4]; for (int i = 0; i &lt; bytes.length; i++) bytes[i] = (byte)(int)((inta &gt;&gt; i * 8) &amp; 0xff);// 移位和清零 return bytes; &#125; /** * 字节数组转Int */ public static int bytes2Int(byte[] bytes)&#123; int inta = 0; for (int i = 0; i &lt; bytes.length; i++) inta += (int)((bytes[i] &amp; 0xff) &lt;&lt; i * 8);// 移位和清零 return inta; &#125; &#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"IntegerOperT","slug":"learning/SE/io/byteoper/IntegerOperT","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.700Z","comments":true,"path":"1395/10/17/learning/SE/io/byteoper/IntegerOperT/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/io/byteoper/IntegerOperT/","excerpt":"","text":"12345678910111213141516171819202122232425262728293031package org.javacore.io.byteoper;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-6-19 21:25:57 * Integer类的进制转换 */public class IntegerOperT &#123; public static void main(String[] args) &#123; System.out.println(\"17的十六进制： \" + Integer.toHexString(17)); System.out.println(\"17的八进制： \" + Integer.toOctalString(17)); System.out.println(\"17的二进制： \" + Integer.toBinaryString(17)); System.out.println(Integer.valueOf(\"11\", 16)); System.out.println(Integer.valueOf(\"21\", 8)); System.out.println(Integer.valueOf(\"00010001\", 2)); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"JavaFileListT","slug":"learning/SE/io/byteoper/JavaFileListT","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.702Z","comments":true,"path":"1395/10/17/learning/SE/io/byteoper/JavaFileListT/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/io/byteoper/JavaFileListT/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748package org.javacore.io;import java.io.File;import java.io.FilenameFilter;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-7-13 21:13:58 * FilenameFilter文件过滤器的使用 */public class JavaFileListT &#123; // 文件过滤接口 // 作为匿名内部类，变量type必须声明为final类型 public static FilenameFilter javaFileFilter(final String type) &#123; // 过滤接口-匿名内部类 return new FilenameFilter() &#123; @Override public boolean accept(File dir, String name) &#123; return new File(name).getName().indexOf(type) != -1; &#125; &#125;; &#125; public static void main(String[] args) &#123; // 创建一个目录 File file = new File(\"src\\\\org\\\\javacore\\\\io\");// 当前目录 // 获取文件名数组 String fileNames[] = file.list(javaFileFilter(\".java\")); // 打印 for (String item : fileNames) &#123; System.out.println(item); &#125; &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"LongConvertT","slug":"learning/SE/io/byteoper/LongConvertT","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.701Z","comments":true,"path":"1395/10/17/learning/SE/io/byteoper/LongConvertT/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/io/byteoper/LongConvertT/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445package org.javacore.io.byteoper;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-6-19 21:26:04 * Long与byte数组转换 */public class LongConvertT &#123; /** * long 转 byte数组 */ public static byte[] long2Bytes(long longa)&#123; byte[] bytes = new byte[8]; for (int i = 0; i &lt; bytes.length; i++) bytes[i] = (byte)(long)(((longa) &gt;&gt; i * 8) &amp; 0xff); // 移位和清零 return bytes; &#125; /** * byte数组 转 long */ public static long bytes2Long(byte[] bytes)&#123; long longa = 0; for (int i = 0; i &lt; bytes.length; i++) longa += (long)((bytes[i] &amp; 0xff) &lt;&lt; i * 8); // 移位和清零 return longa; &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"SInputStream","slug":"learning/SE/io/byteoper/SInputStream","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.703Z","comments":true,"path":"1395/10/17/learning/SE/io/byteoper/SInputStream/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/io/byteoper/SInputStream/","excerpt":"","text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576package org.javacore.io;import java.io.IOException;/** * 所有字节输入流实现类的基类 */public abstract class SInputStream &#123; // 缓存区字节数组最大值 private static final int MAX_SKIP_BUFFER_SIZE = 2048; // 从输入流中读取数据的下一个字节，以int返回 public abstract int read() throws IOException; // 从输入流中读取数据的一定数量字节，并存储在缓存数组b public int read(byte b[]) throws IOException &#123; return read(b, 0, b.length); &#125; // 从输入流中读取数据最多len个字节，并存储在缓存数组b public int read(byte b[], int off, int len) throws IOException &#123; if (b == null) &#123; throw new NullPointerException(); &#125; else if (off &lt; 0 || len &lt; 0 || len &gt; b.length - off) &#123; throw new IndexOutOfBoundsException(); &#125; else if (len == 0) &#123; return 0; &#125; int c = read(); if (c == -1) &#123; return -1; &#125; b[off] = (byte)c; int i = 1; try &#123; for (; i &lt; len ; i++) &#123; c = read(); if (c == -1) &#123; break; &#125; b[off + i] = (byte)c; &#125; &#125; catch (IOException ee) &#123; &#125; return i; &#125; // 跳过输入流中数据的n个字节 public long skip(long n) throws IOException &#123; long remaining = n; int nr; if (n &lt;= 0) &#123; return 0; &#125; int size = (int)Math.min(MAX_SKIP_BUFFER_SIZE, remaining); byte[] skipBuffer = new byte[size]; while (remaining &gt; 0) &#123; nr = read(skipBuffer, 0, (int)Math.min(size, remaining)); if (nr &lt; 0) &#123; break; &#125; remaining -= nr; &#125; return n - remaining; &#125; // 返回下一个方法调用能不受阻塞地从此读取（或者跳过）的估计字节数 public int available() throws IOException &#123; return 0; &#125; // 关闭此输入流，并释放与其关联的所有资源 public void close() throws IOException &#123;&#125; // 在此输出流中标记当前位置 public synchronized void mark(int readlimit) &#123;&#125; // 将此流重新定位到最后一次对此输入流调用 mark 方法时的位置。 public synchronized void reset() throws IOException &#123; throw new IOException(\"mark/reset not supported\"); &#125; // 测试此输入流是否支持 mark 和 reset 方法 public boolean markSupported() &#123; return false; &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"StringConvertT","slug":"learning/SE/io/byteoper/StringConvertT","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.701Z","comments":true,"path":"1395/10/17/learning/SE/io/byteoper/StringConvertT/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/io/byteoper/StringConvertT/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132package org.javacore.io.byteoper;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-6-19 21:27:41 * String转换成byte数组 */public class StringConvertT &#123; public static void main(String[] args)&#123; String str = \"HOME\"; byte[] bytes = str.getBytes(); // 打印字节数组 System.out.println(\"UTF-8编码'HOME'的字节数组为：\"); for (int i = 0; i &lt; bytes.length; i++) &#123; System.out.println(\"\\t\" + bytes[i] + \"|\" + Integer.toBinaryString(bytes[i])); &#125; &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"SystemStreamT","slug":"learning/SE/io/byteoper/SystemStreamT","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.702Z","comments":true,"path":"1395/10/17/learning/SE/io/byteoper/SystemStreamT/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/io/byteoper/SystemStreamT/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445package org.javacore.io;import java.io.FileOutputStream;import java.io.IOException;import java.io.OutputStream;import java.io.PrintStream;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-7-31 11:04:26 * System.out, System.err中IO的使用 * 替换系统流，输出至文本 */public class SystemStreamT &#123; public static void main(String[] args) throws IOException &#123; // 创建文件输出流 OutputStream out = new FileOutputStream(\"D:\\\\data\\\\console.txt\"); // 创建新的文件输出打印流 PrintStream print = new PrintStream(out); // 设置标准输出流 System.setOut(print); // 设置标准错误输出流 System.setErr(print); System.out.println(\"Hello,System.out\"); System.err.println(\"Hello,System.err\"); // 关闭流 print.close(); out.close(); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"CopyFileT","slug":"learning/SE/io/serializable/CopyFileT","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.688Z","comments":true,"path":"1395/10/17/learning/SE/io/serializable/CopyFileT/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/io/serializable/CopyFileT/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162package org.javacore.io;import java.io.File;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.IOException;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-8-11 11:44:59 * 文件复制 */public class CopyFileT &#123; public static void main(String[] args) throws IOException &#123; String dir = \"src\" + File.separator + \"org\" + File.separator + \"javacore\" + File.separator + \"io\"; copyFile(dir + File.separator + \"/CopyFileT.java\", \"D://Copy.java\"); &#125; public static void copyFile(String srcFile,String destFile) throws IOException &#123; copyFile(new File(srcFile), new File(destFile)); &#125; public static void copyFile(File srcFile,File destFile) throws IOException &#123; // 文件不存在 if (!srcFile.exists()) &#123; throw new IllegalArgumentException(\"文件：\" + srcFile + \"不存在\"); &#125; // 文件不是文件类型 if (!srcFile.isFile()) &#123; throw new IllegalArgumentException(srcFile + \"不是文件\"); &#125; FileInputStream in = new FileInputStream(srcFile); FileOutputStream out = new FileOutputStream(destFile); byte[] bytes = new byte[2 * 1024]; int b; while ((b=in.read(bytes, 0, bytes.length)) != -1) &#123; out.write(bytes, 0, b); out.flush(); &#125; out.close(); in.close(); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"FileT","slug":"learning/SE/io/serializable/FileT","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.692Z","comments":true,"path":"1395/10/17/learning/SE/io/serializable/FileT/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/io/serializable/FileT/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162package org.javacore.io;import java.io.File;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */import java.io.IOException;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-6-30 14:21:47 * File类的使用 */public class FileT &#123; public static void main(String[] args) &#123; try &#123; // 创建一个目录 File dir = new File(\"E:\" + File.separator + \"dir\"); dir.mkdir(); // 创建一个文件 File file = new File(dir,\"file.txt\"); file.createNewFile(); // 是否是一个目录 System.out.println(dir.isDirectory()); // 是否是一个文件 System.out.println(file.isFile()); // 删除文件 if (file.delete()) &#123; System.out.println(file.getName() + \"被删除了！\"); &#125; else &#123; System.out.println(\"文件删除失败！\"); &#125; &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"FilenameFilterT","slug":"learning/SE/io/serializable/FilenameFilterT","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.691Z","comments":true,"path":"1395/10/17/learning/SE/io/serializable/FilenameFilterT/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/io/serializable/FilenameFilterT/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859package org.javacore.io;import java.io.File;import java.io.FilenameFilter;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-7-20 13:31:41 * 类名过滤器的使用 */public class FilenameFilterT &#123; public static void main(String[] args) &#123; // IO包路径 String dir = \"src\" + File.separator + \"org\" + File.separator + \"javacore\" + File.separator + \"io\"; File file = new File(dir); // 创建过滤器文件 MyFilter filter = new MyFilter(\"y.java\"); // 过滤 String files[] = file.list(filter); // 打印 for (String name : files) &#123; System.err.println(name); &#125; &#125; /** * 内部类实现过滤器文件接口 */ static class MyFilter implements FilenameFilter &#123; private String type; public MyFilter (String type) &#123; this.type = type; &#125; @Override public boolean accept(File dir, String name) &#123; return name.endsWith(type);// 以Type结尾 &#125; &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"MemoryInputT","slug":"learning/SE/io/serializable/MemoryInputT","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.687Z","comments":true,"path":"1395/10/17/learning/SE/io/serializable/MemoryInputT/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/io/serializable/MemoryInputT/","excerpt":"","text":"12345678910111213141516171819202122232425262728293031323334353637package org.javacore.io;import java.io.File;import java.io.IOException;import java.io.StringReader;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-7-14 08:54:24 * 内存中输入 */public class MemoryInputT &#123; public static void main(String[] args) throws IOException &#123; StringReader in = new StringReader(BufferedInputFileT.read( \"src\" + File.separator + \"org\" + File.separator + \"javacore\" + File.separator + \"io\" + File.separator + \"BufferedInputFileT.java\")); int c; while((c = in.read()) != -1)// int形式 System.out.println((char)c);// int字节，转char显示 &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"OSExecuteT","slug":"learning/SE/io/serializable/OSExecuteT","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.686Z","comments":true,"path":"1395/10/17/learning/SE/io/serializable/OSExecuteT/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/io/serializable/OSExecuteT/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869package org.javacore.io;import java.io.BufferedReader;import java.io.InputStreamReader;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-10-6 18:40:24 * 操作系统进程流的案例 */public class OSExecuteT &#123; public static void commond(String command) &#123; boolean err = false; try &#123; // 创建操作系统进程 Process process = new ProcessBuilder(command.split(\" \")).start(); // 读取进程的输入流 BufferedReader results = new BufferedReader( new InputStreamReader(process.getInputStream())); String s; while ((s = results.readLine()) != null) System.out.println(s); // 读取进程的错误流 BufferedReader errors = new BufferedReader( new InputStreamReader(process.getErrorStream())); while ((s = errors.readLine()) != null) &#123; System.err.println(s); if (!err) err = true; &#125; &#125; catch (Exception e) &#123; if (!command.startsWith(\"CMD /C\")) commond(\"CMD /C \" + command); else throw new RuntimeException(e); &#125; if (err) throw new OSExecuteException(\"Errors Executing \" + command); &#125; public static void main(String[] args) &#123; commond(\"java -version\"); &#125;&#125;class OSExecuteException extends RuntimeException &#123; private static final long serialVersionUID = -3254218368058055219L; public OSExecuteException(String msg) &#123; super(msg); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"SByteArrayInputStream","slug":"learning/SE/io/serializable/SByteArrayInputStream","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.690Z","comments":true,"path":"1395/10/17/learning/SE/io/serializable/SByteArrayInputStream/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/io/serializable/SByteArrayInputStream/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258//package org.javacore.io;////import java.io.IOException;//import java.io.InputStream;/////**// * A &lt;code&gt;ByteArrayInputStream&lt;/code&gt; contains// * an internal buffer that contains bytes that// * may be read from the stream. An internal// * counter keeps track of the next byte to// * be supplied by the &lt;code&gt;read&lt;/code&gt; method.// * &lt;p&gt;// * Closing a &lt;tt&gt;ByteArrayInputStream&lt;/tt&gt; has no effect. The methods in// * this class can be called after the stream has been closed without// * generating an &lt;tt&gt;IOException&lt;/tt&gt;.// *///public//class SByteArrayInputStream extends InputStream &#123;//// /**// * An array of bytes that was provided// * by the creator of the stream. Elements &lt;code&gt;buf[0]&lt;/code&gt;// * through &lt;code&gt;buf[count-1]&lt;/code&gt; are the// * only bytes that can ever be read from the// * stream; element &lt;code&gt;buf[pos]&lt;/code&gt; is// * the next byte to be read.// */// protected byte buf[];//// /**// * The index of the next character to read from the input stream buffer.// * This value should always be nonnegative// * and not larger than the value of &lt;code&gt;count&lt;/code&gt;.// * The next byte to be read from the input stream buffer// * will be &lt;code&gt;buf[pos]&lt;/code&gt;.// */// protected int pos;//// /**// * The currently marked position in the stream.// * ByteArrayInputStream objects are marked at position zero by// * default when constructed. They may be marked at another// * position within the buffer by the &lt;code&gt;mark()&lt;/code&gt; method.// * The current buffer position is set to this point by the// * &lt;code&gt;reset()&lt;/code&gt; method.// * &lt;p&gt;// * If no mark has been set, then the value of mark is the offset// * passed to the constructor (or 0 if the offset was not supplied).// *// * @since JDK1.1// */// protected int mark = 0;//// /**// * The index one greater than the last valid character in the input// * stream buffer.// * This value should always be nonnegative// * and not larger than the length of &lt;code&gt;buf&lt;/code&gt;.// * It is one greater than the position of// * the last byte within &lt;code&gt;buf&lt;/code&gt; that// * can ever be read from the input stream buffer.// */// protected int count;//// /**// * Creates a &lt;code&gt;ByteArrayInputStream&lt;/code&gt;// * so that it uses &lt;code&gt;buf&lt;/code&gt; as its// * buffer array.// * The buffer array is not copied.// * The initial value of &lt;code&gt;pos&lt;/code&gt;// * is &lt;code&gt;0&lt;/code&gt; and the initial value// * of &lt;code&gt;count&lt;/code&gt; is the length of// * &lt;code&gt;buf&lt;/code&gt;.// *// * @param buf the input buffer.// */// public ByteArrayInputStream(byte buf[]) &#123;// this.buf = buf;// this.pos = 0;// this.count = buf.length;// &#125;//// /**// * Creates &lt;code&gt;ByteArrayInputStream&lt;/code&gt;// * that uses &lt;code&gt;buf&lt;/code&gt; as its// * buffer array. The initial value of &lt;code&gt;pos&lt;/code&gt;// * is &lt;code&gt;offset&lt;/code&gt; and the initial value// * of &lt;code&gt;count&lt;/code&gt; is the minimum of &lt;code&gt;offset+length&lt;/code&gt;// * and &lt;code&gt;buf.length&lt;/code&gt;.// * The buffer array is not copied. The buffer's mark is// * set to the specified offset.// *// * @param buf the input buffer.// * @param offset the offset in the buffer of the first byte to read.// * @param length the maximum number of bytes to read from the buffer.// */// public ByteArrayInputStream(byte buf[], int offset, int length) &#123;// this.buf = buf;// this.pos = offset;// this.count = Math.min(offset + length, buf.length);// this.mark = offset;// &#125;//// /**// * Reads the next byte of data from this input stream. The value// * byte is returned as an &lt;code&gt;int&lt;/code&gt; in the range// * &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;255&lt;/code&gt;. If no byte is available// * because the end of the stream has been reached, the value// * &lt;code&gt;-1&lt;/code&gt; is returned.// * &lt;p&gt;// * This &lt;code&gt;read&lt;/code&gt; method// * cannot block.// *// * @return the next byte of data, or &lt;code&gt;-1&lt;/code&gt; if the end of the// * stream has been reached.// */// public synchronized int read() &#123;// return (pos &lt; count) ? (buf[pos++] &amp; 0xff) : -1;// &#125;//// /**// * Reads up to &lt;code&gt;len&lt;/code&gt; bytes of data into an array of bytes// * from this input stream.// * If &lt;code&gt;pos&lt;/code&gt; equals &lt;code&gt;count&lt;/code&gt;,// * then &lt;code&gt;-1&lt;/code&gt; is returned to indicate// * end of file. Otherwise, the number &lt;code&gt;k&lt;/code&gt;// * of bytes read is equal to the smaller of// * &lt;code&gt;len&lt;/code&gt; and &lt;code&gt;count-pos&lt;/code&gt;.// * If &lt;code&gt;k&lt;/code&gt; is positive, then bytes// * &lt;code&gt;buf[pos]&lt;/code&gt; through &lt;code&gt;buf[pos+k-1]&lt;/code&gt;// * are copied into &lt;code&gt;b[off]&lt;/code&gt; through// * &lt;code&gt;b[off+k-1]&lt;/code&gt; in the manner performed// * by &lt;code&gt;System.arraycopy&lt;/code&gt;. The// * value &lt;code&gt;k&lt;/code&gt; is added into &lt;code&gt;pos&lt;/code&gt;// * and &lt;code&gt;k&lt;/code&gt; is returned.// * &lt;p&gt;// * This &lt;code&gt;read&lt;/code&gt; method cannot block.// *// * @param b the buffer into which the data is read.// * @param off the start offset in the destination array &lt;code&gt;b&lt;/code&gt;// * @param len the maximum number of bytes read.// * @return the total number of bytes read into the buffer, or// * &lt;code&gt;-1&lt;/code&gt; if there is no more data because the end of// * the stream has been reached.// * @exception NullPointerException If &lt;code&gt;b&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.// * @exception IndexOutOfBoundsException If &lt;code&gt;off&lt;/code&gt; is negative,// * &lt;code&gt;len&lt;/code&gt; is negative, or &lt;code&gt;len&lt;/code&gt; is greater than// * &lt;code&gt;b.length - off&lt;/code&gt;// */// public synchronized int read(byte b[], int off, int len) &#123;// if (b == null) &#123;// throw new NullPointerException();// &#125; else if (off &lt; 0 || len &lt; 0 || len &gt; b.length - off) &#123;// throw new IndexOutOfBoundsException();// &#125;//// if (pos &gt;= count) &#123;// return -1;// &#125;//// int avail = count - pos;// if (len &gt; avail) &#123;// len = avail;// &#125;// if (len &lt;= 0) &#123;// return 0;// &#125;// System.arraycopy(buf, pos, b, off, len);// pos += len;// return len;// &#125;//// /**// * Skips &lt;code&gt;n&lt;/code&gt; bytes of input from this input stream. Fewer// * bytes might be skipped if the end of the input stream is reached.// * The actual number &lt;code&gt;k&lt;/code&gt;// * of bytes to be skipped is equal to the smaller// * of &lt;code&gt;n&lt;/code&gt; and &lt;code&gt;count-pos&lt;/code&gt;.// * The value &lt;code&gt;k&lt;/code&gt; is added into &lt;code&gt;pos&lt;/code&gt;// * and &lt;code&gt;k&lt;/code&gt; is returned.// *// * @param n the number of bytes to be skipped.// * @return the actual number of bytes skipped.// */// public synchronized long skip(long n) &#123;// long k = count - pos;// if (n &lt; k) &#123;// k = n &lt; 0 ? 0 : n;// &#125;//// pos += k;// return k;// &#125;//// /**// * Returns the number of remaining bytes that can be read (or skipped over)// * from this input stream.// * &lt;p&gt;// * The value returned is &lt;code&gt;count&amp;nbsp;- pos&lt;/code&gt;,// * which is the number of bytes remaining to be read from the input buffer.// *// * @return the number of remaining bytes that can be read (or skipped// * over) from this input stream without blocking.// */// public synchronized int available() &#123;// return count - pos;// &#125;//// /**// * Tests if this &lt;code&gt;InputStream&lt;/code&gt; supports mark/reset. The// * &lt;code&gt;markSupported&lt;/code&gt; method of &lt;code&gt;ByteArrayInputStream&lt;/code&gt;// * always returns &lt;code&gt;true&lt;/code&gt;.// *// * @since JDK1.1// */// public boolean markSupported() &#123;// return true;// &#125;//// /**// * Set the current marked position in the stream.// * ByteArrayInputStream objects are marked at position zero by// * default when constructed. They may be marked at another// * position within the buffer by this method.// * &lt;p&gt;// * If no mark has been set, then the value of the mark is the// * offset passed to the constructor (or 0 if the offset was not// * supplied).// *// * &lt;p&gt; Note: The &lt;code&gt;readAheadLimit&lt;/code&gt; for this class// * has no meaning.// *// * @since JDK1.1// */// public void mark(int readAheadLimit) &#123;// mark = pos;// &#125;//// /**// * Resets the buffer to the marked position. The marked position// * is 0 unless another position was marked or an offset was specified// * in the constructor.// */// public synchronized void reset() &#123;// pos = mark;// &#125;//// /**// * Closing a &lt;tt&gt;ByteArrayInputStream&lt;/tt&gt; has no effect. The methods in// * this class can be called after the stream has been closed without// * generating an &lt;tt&gt;IOException&lt;/tt&gt;.// * &lt;p&gt;// */// public void close() throws IOException &#123;// &#125;////&#125;//","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"SFileInputStream","slug":"learning/SE/io/serializable/SFileInputStream","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.691Z","comments":true,"path":"1395/10/17/learning/SE/io/serializable/SFileInputStream/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/io/serializable/SFileInputStream/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184//package org.javacore.io;////import java.io.File;//import java.io.FileDescriptor;//import java.io.FileNotFoundException;//import java.io.IOException;//import java.io.InputStream;//import java.nio.channels.FileChannel;////import sun.misc.IoTrace;//import sun.nio.ch.FileChannelImpl;/////**// * FileInputStream 从文件系统的文件中获取输入字节流。文件取决于主机系统。// * 比如读取图片等的原始字节流。如果读取字符流，考虑使用 FiLeReader。// *///public class SFileInputStream extends InputStream//&#123;// /* 文件描述符类---此处用于打开文件的句柄 */// private final FileDescriptor fd;//// /* 引用文件的路径 */// private final String path;//// /* 文件通道，NIO部分 */// private FileChannel channel = null;//// private final Object closeLock = new Object();// private volatile boolean closed = false;//// private static final ThreadLocal&lt;Boolean&gt; runningFinalize =// new ThreadLocal&lt;&gt;();//// private static boolean isRunningFinalize() &#123;// Boolean val;// if ((val = runningFinalize.get()) != null)// return val.booleanValue();// return false;// &#125;//// /* 通过文件路径名来创建FileInputStream */// public FileInputStream(String name) throws FileNotFoundException &#123;// this(name != null ? new File(name) : null);// &#125;//// /* 通过文件来创建FileInputStream */// public FileInputStream(File file) throws FileNotFoundException &#123;// String name = (file != null ? file.getPath() : null);// SecurityManager security = System.getSecurityManager();// if (security != null) &#123;// security.checkRead(name);// &#125;// if (name == null) &#123;// throw new NullPointerException();// &#125;// if (file.isInvalid()) &#123;// throw new FileNotFoundException(\"Invalid file path\");// &#125;// fd = new FileDescriptor();// fd.incrementAndGetUseCount();// this.path = name;// open(name);// &#125;//// /* 通过文件描述符类来创建FileInputStream */// public FileInputStream(FileDescriptor fdObj) &#123;// SecurityManager security = System.getSecurityManager();// if (fdObj == null) &#123;// throw new NullPointerException();// &#125;// if (security != null) &#123;// security.checkRead(fdObj);// &#125;// fd = fdObj;// path = null;// fd.incrementAndGetUseCount();// &#125;//// /* 打开文件，为了下一步读取文件内容。native方法 */// private native void open(String name) throws FileNotFoundException;//// /* 从此输入流中读取一个数据字节 */// public int read() throws IOException &#123;// Object traceContext = IoTrace.fileReadBegin(path);// int b = 0;// try &#123;// b = read0();// &#125; finally &#123;// IoTrace.fileReadEnd(traceContext, b == -1 ? 0 : 1);// &#125;// return b;// &#125;//// /* 从此输入流中读取一个数据字节。native方法 */// private native int read0() throws IOException;//// /* 从此输入流中读取多个字节到byte数组中。native方法 */// private native int readBytes(byte b[], int off, int len) throws IOException;//// /* 从此输入流中读取多个字节到byte数组中。 */// public int read(byte b[]) throws IOException &#123;// Object traceContext = IoTrace.fileReadBegin(path);// int bytesRead = 0;// try &#123;// bytesRead = readBytes(b, 0, b.length);// &#125; finally &#123;// IoTrace.fileReadEnd(traceContext, bytesRead == -1 ? 0 : bytesRead);// &#125;// return bytesRead;// &#125;// // /* 从此输入流中读取最多len个字节到byte数组中。 */// public int read(byte b[], int off, int len) throws IOException &#123;// Object traceContext = IoTrace.fileReadBegin(path);// int bytesRead = 0;// try &#123;// bytesRead = readBytes(b, off, len);// &#125; finally &#123;// IoTrace.fileReadEnd(traceContext, bytesRead == -1 ? 0 : bytesRead);// &#125;// return bytesRead;// &#125;//// // public native long skip(long n) throws IOException;//// /* 返回下一次对此输入流调用的方法可以不受阻塞地从此输入流读取（或跳过）的估计剩余字节数。 */// public native int available() throws IOException;//// /* 关闭此文件输入流并释放与此流有关的所有系统资源。 */// public void close() throws IOException &#123;// synchronized (closeLock) &#123;// if (closed) &#123;// return;// &#125;// closed = true;// &#125;// if (channel != null) &#123;// fd.decrementAndGetUseCount();// channel.close();// &#125;//// int useCount = fd.decrementAndGetUseCount();//// if ((useCount &lt;= 0) || !isRunningFinalize()) &#123;// close0();// &#125;// &#125;//// public final FileDescriptor getFD() throws IOException &#123;// if (fd != null) return fd;// throw new IOException();// &#125;//// /* 获取此文件输入流的唯一FileChannel对象 */// public FileChannel getChannel() &#123;// synchronized (this) &#123;// if (channel == null) &#123;// channel = FileChannelImpl.open(fd, path, true, false, this);// fd.incrementAndGetUseCount();// &#125;// return channel;// &#125;// &#125;//// private static native void initIDs();//// private native void close0() throws IOException;//// static &#123;// initIDs();// &#125;//// protected void finalize() throws IOException &#123;// if ((fd != null) &amp;&amp; (fd != FileDescriptor.in)) &#123;// runningFinalize.set(Boolean.TRUE);// try &#123;// close();// &#125; finally &#123;// runningFinalize.set(Boolean.FALSE);// &#125;// &#125;// &#125;//&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"StoringAndRecoveringData","slug":"learning/SE/io/serializable/StoringAndRecoveringData","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.687Z","comments":true,"path":"1395/10/17/learning/SE/io/serializable/StoringAndRecoveringData/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/io/serializable/StoringAndRecoveringData/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647package org.javacore.io;import java.io.BufferedInputStream;import java.io.BufferedOutputStream;import java.io.DataInputStream;import java.io.DataOutputStream;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.IOException;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-9-28 17:30:21 * DataOutputStream和DataInputStream的使用案例 */public class StoringAndRecoveringData &#123; @SuppressWarnings(\"resource\") public static void main(String[] args) throws IOException &#123; // 写入数据 DataOutputStream outputStream = new DataOutputStream( new BufferedOutputStream(new FileOutputStream(\"data.txt\"))); outputStream.writeDouble(3.1415926); outputStream.writeUTF(\"你好\"); outputStream.writeInt(1); outputStream.close(); // 写出数据 DataInputStream inputStream = new DataInputStream( new BufferedInputStream(new FileInputStream(\"data.txt\"))); System.out.println(inputStream.readDouble()); System.out.println(inputStream.readUTF()); System.out.println(inputStream.readInt()); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"UsingRandomAccessFile","slug":"learning/SE/io/serializable/UsingRandomAccessFile","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.687Z","comments":true,"path":"1395/10/17/learning/SE/io/serializable/UsingRandomAccessFile/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/io/serializable/UsingRandomAccessFile/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354package org.javacore.io;import java.io.IOException;import java.io.RandomAccessFile;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-9-28 18:50:22 * RandomAccessFile的使用案例 */public class UsingRandomAccessFile &#123; // 文件名 static String file = \"rtest.bat\"; static void display() throws IOException &#123; // 创建随机访问类，只读模式 RandomAccessFile rf = new RandomAccessFile(file, \"r\"); for (int i = 0; i &lt; 7; i++) System.out.println(\"Value \" + i + \": \" + rf.readDouble());// 读取一个Double System.out.println(rf.readUTF());// 读取一个字符串 rf.close(); &#125; public static void main(String[] args) throws IOException &#123; // 创建随机访问类，读写模式 RandomAccessFile rf = new RandomAccessFile(file, \"rw\"); for (int i = 0; i &lt; 7; i++) rf.writeDouble( i * 1.123);// 写入一个Double rf.writeUTF(\"文件结束\");// 写入一个字符串 rf.close(); display(); rf = new RandomAccessFile(file, \"rw\"); rf.seek(5 * 8);// 设置文件指针偏移量，设置到第5个双精度字节 rf.writeDouble(47.003); rf.close(); display(); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"BufferedInputFileT","slug":"learning/SE/io/zip/BufferedInputFileT","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.697Z","comments":true,"path":"1395/10/17/learning/SE/io/zip/BufferedInputFileT/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/io/zip/BufferedInputFileT/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556package org.javacore.io;import java.io.BufferedReader;import java.io.File;import java.io.FileReader;import java.io.IOException;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-7-14 08:54:24 * 缓冲输入文件 */public class BufferedInputFileT &#123; /** * 通过文件名，读取文件并缓冲 * @param filename * @return * @throws IOException */ public static String read(String filename) throws IOException &#123; // 通过行读取输入 BufferedReader in = new BufferedReader(new FileReader(filename)); String s; StringBuilder sb = new StringBuilder(); while((s = in.readLine()) != null) sb.append(s + \"\\n\");// 不考了线程安全，StringBuilder 比 StringBuffer效率高 // 关闭文件 in.close(); return sb.toString(); &#125; public static void main(String[] rags) throws IOException &#123; // 缓冲输入文件，并打印 System.out.println(read( \"src\" + File.separator + \"org\" + File.separator + \"javacore\" + File.separator + \"io\" + File.separator + \"BufferedInputFileT.java\")); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"ChangeSystemOut","slug":"learning/SE/io/zip/ChangeSystemOut","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.698Z","comments":true,"path":"1395/10/17/learning/SE/io/zip/ChangeSystemOut/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/io/zip/ChangeSystemOut/","excerpt":"","text":"1234567891011121314151617181920212223242526272829package org.javacore.io;import java.io.PrintWriter;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-10-6 18:38:15 * 改变System.out输出案例 */public class ChangeSystemOut &#123; public static void main(String[] args) &#123; PrintWriter out = new PrintWriter(System.out,true); out.println(\"Hello PrintWriter\"); out.close(); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"DirListT","slug":"learning/SE/io/zip/DirListT","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.693Z","comments":true,"path":"1395/10/17/learning/SE/io/zip/DirListT/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/io/zip/DirListT/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132333435363738package org.javacore.io;import java.io.File;import java.util.Arrays;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-7-13 07:58:56 * 列出目录并排序 */public class DirListT &#123; public static void main(String[] args) &#123; // 获取当前目录 File path = new File(\".\");// .表示当前目录 // 文件路径名数组 String list[] = path.list(); // 对String文件名进行排序 Arrays.sort(list,String.CASE_INSENSITIVE_ORDER); // 打印 for(String dirItem : list) System.out.println(dirItem); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"Directory","slug":"learning/SE/io/zip/Directory","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.698Z","comments":true,"path":"1395/10/17/learning/SE/io/zip/Directory/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/io/zip/Directory/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293package org.javacore.io;import java.io.File;import java.io.FilenameFilter;import java.util.ArrayList;import java.util.Iterator;import java.util.List;import java.util.regex.Pattern;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-7-13 09:17:11 * 目录实用工具 */public final class Directory &#123; public static File[] local(File dir,final String regex)&#123; return dir.listFiles(new FilenameFilter() &#123; // 文件过滤接口 private Pattern pattern = Pattern.compile(regex); @Override public boolean accept(File dir, String name) &#123; return pattern.matcher(new File(name).getName()).matches(); &#125; &#125;); &#125; public static File[] local(String path, final String regex)&#123; return local(new File(path),regex); &#125; public static class TreeInfo implements Iterable&lt;File&gt;&#123; public List&lt;File&gt; files = new ArrayList&lt;&gt;(); public List&lt;File&gt; dirs = new ArrayList&lt;&gt;(); @Override public Iterator&lt;File&gt; iterator() &#123; return files.iterator(); &#125; public void addAll(TreeInfo other) &#123; files.addAll(other.files); dirs.addAll(other.dirs); &#125; @Override public String toString() &#123; return \"dirs: \" + dirs + \"\\n\\nfiles: \" + files; &#125; &#125; public static TreeInfo walk(String start,String regex) &#123; return recuresDirs(new File(start),regex); &#125; public static TreeInfo walk(File start,String regex) &#123; return recuresDirs(start, regex); &#125; public static TreeInfo walk(File start) &#123; return recuresDirs(start, \".*\");// 全部 &#125; public static TreeInfo walk(String start) &#123; return recuresDirs(new File(start), \".*\");// 全部 &#125; public static TreeInfo recuresDirs(File startDir,String regex) &#123; TreeInfo result = new TreeInfo(); for(File item : startDir.listFiles()) &#123; if (item.isDirectory()) &#123; result.dirs.add(item); result.addAll(recuresDirs(item, regex)); &#125; else if (item.getName().matches(regex)) result.files.add(item); &#125; return result; &#125; &#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"FileIOStreamT","slug":"learning/SE/io/zip/FileIOStreamT","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.700Z","comments":true,"path":"1395/10/17/learning/SE/io/zip/FileIOStreamT/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/io/zip/FileIOStreamT/","excerpt":"","text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849package org.javacore.io;import java.io.File;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.IOException;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-10-8 20:06:03 * FileInputStream&amp;FileOutputStream使用案例 */public class FileIOStreamT &#123; private static final String thisFilePath = \"src\" + File.separator + \"org\" + File.separator + \"javacore\" + File.separator + \"io\" + File.separator + \"FileIOStreamT.java\"; public static void main(String[] args) throws IOException &#123; // 创建文件输入流 FileInputStream fileInputStream = new FileInputStream(thisFilePath); // 创建文件输出流 FileOutputStream fileOutputStream = new FileOutputStream(\"data.txt\"); // 创建流的最大字节数组 byte[] inOutBytes = new byte[fileInputStream.available()]; // 将文件输入流读取，保存至inOutBytes数组 fileInputStream.read(inOutBytes); // 将inOutBytes数组，写出到data.txt文件中 fileOutputStream.write(inOutBytes); fileOutputStream.close(); fileInputStream.close(); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"FileMethodsT","slug":"learning/SE/io/zip/FileMethodsT","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.697Z","comments":true,"path":"1395/10/17/learning/SE/io/zip/FileMethodsT/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/io/zip/FileMethodsT/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748package org.javacore.io;import java.io.File;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-7-13 10:06:28 * File方法详细使用 */public class FileMethodsT &#123; private static void fileData(File f) &#123; System.out.println( \" 绝对路径：\" + f.getAbsolutePath() + \"\\n 可读：\" + f.canRead() + \"\\n 可写：\" + f.canWrite() + \"\\n 文件名：\" + f.getName() + \"\\n 上级目录：\" + f.getParent() + \"\\n 相对地址：\" + f.getPath() + \"\\n 长度：\" + f.length() + \"\\n 最近修改时间：\" + f.lastModified() ); if(f.isFile()) System.out.println(\" 是一个文件\"); else if(f.isDirectory()) System.out.println(\" 是一个目录\"); &#125; public static void main(String[] args) &#123; // 获取src目录 File file = new File(\"src\"); // file详细操作 fileData(file); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"GZIPcompress","slug":"learning/SE/io/zip/GZIPcompress","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.693Z","comments":true,"path":"1395/10/17/learning/SE/io/zip/GZIPcompress/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/io/zip/GZIPcompress/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556package org.javacore.io.zip;import java.io.BufferedOutputStream;import java.io.BufferedReader;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.FileReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.zip.GZIPInputStream;import java.util.zip.GZIPOutputStream;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-10-17 13:59:25 * GZIP简单使用 */public class GZIPcompress &#123; public static void main(String[] args) throws IOException &#123; // 用Reader读文件 BufferedReader in = new BufferedReader(new InputStreamReader( new FileInputStream(\"data.gz\" ), \"UTF-8\" )); // 使用缓冲输出流，输出压缩流文件 BufferedOutputStream out = new BufferedOutputStream( new GZIPOutputStream(new FileOutputStream(\"data.gz\"))); System.out.println(\"Writing File 压缩\"); int c; while ((c = in.read()) &gt; 0) out.write(String.valueOf((char)c).getBytes(\"UTF-8\")); in.close(); out.close(); System.out.println(\"Reading File 解压\"); // 用输入解压流读取文件 BufferedReader in2 = new BufferedReader( new InputStreamReader( new GZIPInputStream(new FileInputStream(\"data.gz\")),\"UTF-8\"));// encoding question String s; while ((s=in2.readLine()) != null) System.out.println(s); in2.close(); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"PipeStreamT","slug":"learning/SE/io/zip/PipeStreamT","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.697Z","comments":true,"path":"1395/10/17/learning/SE/io/zip/PipeStreamT/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/io/zip/PipeStreamT/","excerpt":"","text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364package org.javacore.io;import java.io.IOException;import java.io.PipedInputStream;import java.io.PipedOutputStream;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-7-30 21:58:18 * 管道输入输出流的使用 * 同一个JVM中，两个线程直接的字节流通信 */public class PipeStreamT &#123; public static void main(String[] args) throws IOException &#123; // 创建管道输出流 final PipedOutputStream output = new PipedOutputStream(); // 创建管道输入流，并连接到管道输出流 @SuppressWarnings(\"resource\") final PipedInputStream input = new PipedInputStream(output); //final PipedInputStream input = new PipedInputStream(); //input.connect(output); // 等价于 Thread outputThread = new Thread(new Runnable() &#123; @Override public void run() &#123; try &#123; // 将指定的字节数组写入管道输出流 output.write(\"Hello,PipedStream!\".getBytes()); &#125; catch (IOException e) &#123;&#125; &#125; &#125;); Thread inputThread = new Thread(new Runnable() &#123; @Override public void run() &#123; try &#123; // 读取管道输入流中的下一个数据字节 int data = input.read(); while( data != -1) &#123; System.out.print((char) data); // 再次读取下一个字节 data = input.read(); &#125; &#125; catch (IOException e)&#123;&#125; &#125; &#125;); outputThread.start(); inputThread.start(); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"RandomAccessFileT","slug":"learning/SE/io/zip/RandomAccessFileT","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.700Z","comments":true,"path":"1395/10/17/learning/SE/io/zip/RandomAccessFileT/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/io/zip/RandomAccessFileT/","excerpt":"","text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546package org.javacore.io;import java.io.IOException;import java.io.RandomAccessFile;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-7-14 08:54:24 * RandomAccessFile的使用 */public class RandomAccessFileT &#123; public static void main(String[] args) throws IOException &#123; // 获取文件，读写方式 RandomAccessFile file = new RandomAccessFile(\"D:\\\\data\\\\file.txt\",\"rw\"); // 设置文件指针位置 file.seek(6); // 文件中的当前偏移量 System.out.println(file.getFilePointer()); // 读取文本的一行 System.out.println((char)file.read());// int字节，转char显示 // 写入字节数组 file.write(\"Hello World\".getBytes()); // 初始化文件指针位置 file.seek(0); // 读取文本的一行 System.out.println(file.readLine()); file.close(); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"SFileOutputStream","slug":"learning/SE/io/zip/SFileOutputStream","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.696Z","comments":true,"path":"1395/10/17/learning/SE/io/zip/SFileOutputStream/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/io/zip/SFileOutputStream/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206//package org.javacore.io;////import java.io.File;//import java.io.FileDescriptor;//import java.io.FileNotFoundException;//import java.io.IOException;//import java.io.OutputStream;//import java.nio.channels.FileChannel;////import sun.misc.IoTrace;//import sun.nio.ch.FileChannelImpl;/////**// * 文件输入流是用于将数据写入文件或者文件描述符类// * 比如写入图片等的原始字节流。如果写入字符流，考虑使用 FiLeWriter。// *///public class SFileOutputStream extends OutputStream//&#123;// /* 文件描述符类---此处用于打开文件的句柄 */// private final FileDescriptor fd;//// /* 引用文件的路径 */// private final String path;//// /* 如果为 true，则将字节写入文件末尾处，而不是写入文件开始处 */// private final boolean append;//// /* 关联的FileChannel类，懒加载 */// private FileChannel channel;//// private final Object closeLock = new Object();// private volatile boolean closed = false;// private static final ThreadLocal&lt;Boolean&gt; runningFinalize =// new ThreadLocal&lt;&gt;();//// private static boolean isRunningFinalize() &#123;// Boolean val;// if ((val = runningFinalize.get()) != null)// return val.booleanValue();// return false;// &#125;//// /* 通过文件名创建文件输入流 */// public FileOutputStream(String name) throws FileNotFoundException &#123;// this(name != null ? new File(name) : null, false);// &#125;//// /* 通过文件名创建文件输入流，并确定文件写入起始处模式 */// public FileOutputStream(String name, boolean append)// throws FileNotFoundException// &#123;// this(name != null ? new File(name) : null, append);// &#125;//// /* 通过文件创建文件输入流，默认写入文件的开始处 */// public FileOutputStream(File file) throws FileNotFoundException &#123;// this(file, false);// &#125;//// /* 通过文件创建文件输入流，并确定文件写入起始处 */// public FileOutputStream(File file, boolean append)// throws FileNotFoundException// &#123;// String name = (file != null ? file.getPath() : null);// SecurityManager security = System.getSecurityManager();// if (security != null) &#123;// security.checkWrite(name);// &#125;// if (name == null) &#123;// throw new NullPointerException();// &#125;// if (file.isInvalid()) &#123;// throw new FileNotFoundException(\"Invalid file path\");// &#125;// this.fd = new FileDescriptor();// this.append = append;// this.path = name;// fd.incrementAndGetUseCount();// open(name, append);// &#125;//// /* 通过文件描述符类创建文件输入流 */// public FileOutputStream(FileDescriptor fdObj) &#123;// SecurityManager security = System.getSecurityManager();// if (fdObj == null) &#123;// throw new NullPointerException();// &#125;// if (security != null) &#123;// security.checkWrite(fdObj);// &#125;// this.fd = fdObj;// this.path = null;// this.append = false;//// fd.incrementAndGetUseCount();// &#125;//// /* 打开文件，并确定文件写入起始处模式 */// private native void open(String name, boolean append)// throws FileNotFoundException;//// /* 将指定的字节b写入到该文件输入流，并指定文件写入起始处模式 */// private native void write(int b, boolean append) throws IOException;//// /* 将指定的字节b写入到该文件输入流 */// public void write(int b) throws IOException &#123;// Object traceContext = IoTrace.fileWriteBegin(path);// int bytesWritten = 0;// try &#123;// write(b, append);// bytesWritten = 1;// &#125; finally &#123;// IoTrace.fileWriteEnd(traceContext, bytesWritten);// &#125;// &#125;//// /* 将指定的字节数组写入该文件输入流，并指定文件写入起始处模式 */// private native void writeBytes(byte b[], int off, int len, boolean append)// throws IOException;//// /* 将指定的字节数组b写入该文件输入流 */// public void write(byte b[]) throws IOException &#123;// Object traceContext = IoTrace.fileWriteBegin(path);// int bytesWritten = 0;// try &#123;// writeBytes(b, 0, b.length, append);// bytesWritten = b.length;// &#125; finally &#123;// IoTrace.fileWriteEnd(traceContext, bytesWritten);// &#125;// &#125;//// /* 将指定len长度的字节数组b写入该文件输入流 */// public void write(byte b[], int off, int len) throws IOException &#123;// Object traceContext = IoTrace.fileWriteBegin(path);// int bytesWritten = 0;// try &#123;// writeBytes(b, off, len, append);// bytesWritten = len;// &#125; finally &#123;// IoTrace.fileWriteEnd(traceContext, bytesWritten);// &#125;// &#125;//// /* 关闭此文件输出流并释放与此流有关的所有系统资源 */// public void close() throws IOException &#123;// synchronized (closeLock) &#123;// if (closed) &#123;// return;// &#125;// closed = true;// &#125;//// if (channel != null) &#123;// fd.decrementAndGetUseCount();// channel.close();// &#125;//// int useCount = fd.decrementAndGetUseCount();//// if ((useCount &lt;= 0) || !isRunningFinalize()) &#123;// close0();// &#125;// &#125;//// public final FileDescriptor getFD() throws IOException &#123;// if (fd != null) return fd;// throw new IOException();// &#125;//// public FileChannel getChannel() &#123;// synchronized (this) &#123;// if (channel == null) &#123;// channel = FileChannelImpl.open(fd, path, false, true, append, this);//// fd.incrementAndGetUseCount();// &#125;// return channel;// &#125;// &#125;//// protected void finalize() throws IOException &#123;// if (fd != null) &#123;// if (fd == FileDescriptor.out || fd == FileDescriptor.err) &#123;// flush();// &#125; else &#123;//// runningFinalize.set(Boolean.TRUE);// try &#123;// close();// &#125; finally &#123;// runningFinalize.set(Boolean.FALSE);// &#125;// &#125;// &#125;// &#125;//// private native void close0() throws IOException;//// private static native void initIDs();//// static &#123;// initIDs();// &#125;////&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"SOutputStream","slug":"learning/SE/io/zip/SOutputStream","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.694Z","comments":true,"path":"1395/10/17/learning/SE/io/zip/SOutputStream/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/io/zip/SOutputStream/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132333435package org.javacore.io;import java.io.Closeable;import java.io.Flushable;import java.io.IOException;/** * 所有字节输出流实现类的基类 */public abstract class SOutputStream implements Closeable, Flushable &#123; // 将指定的字节写入输出流 public abstract void write(int b) throws IOException; // 将指定的byte数组的字节全部写入输出流 public void write(byte b[]) throws IOException &#123; write(b, 0, b.length); &#125; // 将指定的byte数组中从偏移量off开始的len个字节写入输出流 public void write(byte b[], int off, int len) throws IOException &#123; if (b == null) &#123; throw new NullPointerException(); &#125; else if ((off &lt; 0) || (off &gt; b.length) || (len &lt; 0) || ((off + len) &gt; b.length) || ((off + len) &lt; 0)) &#123; throw new IndexOutOfBoundsException(); &#125; else if (len == 0) &#123; return; &#125; for (int i = 0 ; i &lt; len ; i++) &#123; write(b[off + i]); &#125; &#125; // 刷新输出流，并强制写出所有缓冲的输出字节 public void flush() throws IOException &#123; &#125; // 关闭输出流，并释放与该流有关的所有资源 public void close() throws IOException &#123; &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"ZipCompress","slug":"learning/SE/io/zip/ZipCompress","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.692Z","comments":true,"path":"1395/10/17/learning/SE/io/zip/ZipCompress/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/io/zip/ZipCompress/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111package org.javacore.io.zip;import java.io.BufferedInputStream;import java.io.BufferedOutputStream;import java.io.BufferedReader;import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.FileReader;import java.io.IOException;import java.util.Enumeration;import java.util.zip.Adler32;import java.util.zip.CheckedInputStream;import java.util.zip.CheckedOutputStream;import java.util.zip.ZipEntry;import java.util.zip.ZipFile;import java.util.zip.ZipInputStream;import java.util.zip.ZipOutputStream;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-10-17 14:58:59 * 利用Zip进行多文件保存 */public class ZipCompress &#123; private static String filePath = \"src\" + File.separator + \"org\" + File.separator + \"javacore\" + File.separator + \"io\" + File.separator; private static String[] fileNames= new String[] &#123; filePath + \"BufferedInputFileT.java\", filePath + \"ChangeSystemOut.java\" &#125;; public static void main(String[] args) throws IOException &#123; zipFiles(fileNames); &#125; private static void zipFiles(String[] fileNames) throws IOException &#123; // 获取zip文件输出流 FileOutputStream f = new FileOutputStream(\"test.zip\"); // 从文件输出流中获取数据校验和输出流,并设置Adler32 CheckedOutputStream csum = new CheckedOutputStream(f,new Adler32()); // 从数据校验和输出流中获取Zip输出流 ZipOutputStream zos = new ZipOutputStream(csum); // 从Zip输出流中获取缓冲输出流 BufferedOutputStream out = new BufferedOutputStream(zos); // 设置Zip文件注释 zos.setComment(\"测试 java zip stream\"); for (String file : fileNames) &#123; System.out.println(\"写入文件: \" + file); // 获取文件输入字符流 BufferedReader in = new BufferedReader(new FileReader(file)); // 想Zip处理写入新的文件条目，并流定位到数据开始处 zos.putNextEntry(new ZipEntry(file)); int c; while ((c = in.read()) &gt; 0) out.write(c); in.close(); // 刷新Zip输出流，将缓冲的流写入该流 out.flush(); &#125; // 文件全部写入Zip输出流后，关闭 out.close(); // 输出数据校验和 System.out.println(\"数据校验和: \" + csum.getChecksum().getValue()); System.out.println(\"读取zip文件\"); // 读取test.zip文件输入流 FileInputStream fi = new FileInputStream(\"test.zip\"); // 从文件输入流中获取数据校验和流 CheckedInputStream csumi = new CheckedInputStream(fi,new Adler32()); // 从数据校验和流中获取Zip解压流 ZipInputStream in2 = new ZipInputStream(csumi); // 从Zip解压流中获取缓冲输入流 BufferedInputStream bis = new BufferedInputStream(in2); // 创建文件条目 ZipEntry zipEntry; while ((zipEntry = in2.getNextEntry()) != null) &#123; System.out.println(\"读取文件： \" + zipEntry); int x; while ((x = bis.read()) &gt; 0) System.out.write(x); &#125; if (fileNames.length == 1) System.out.println(\"数据校验和： \" + csumi.getChecksum().getValue()); bis.close(); // 获取Zip文件 ZipFile zf = new ZipFile(\"test.zip\"); // 获取文件条目枚举 Enumeration e = zf.entries(); while (e.hasMoreElements()) &#123; // 从Zip文件的枚举中获取文件条目 ZipEntry ze2 = (ZipEntry) e.nextElement(); System.out.println(\"文件： \" + ze2); &#125; &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"SerializableT","slug":"learning/SE/io/serializable/SerializableT","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.685Z","comments":true,"path":"1395/10/17/learning/SE/io/serializable/SerializableT/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/io/serializable/SerializableT/","excerpt":"","text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758package org.javacore.io.serializable;//import com.sun.xml.internal.messaging.saaj.util.ByteOutputStream;////import java.io.*;/////**// * 描述:Java序列化和反序列化的小例子// * Created by 子木 on 2016/2/15.// *///public class SerializableT &#123;// public static void main(String[] args) throws IOException, ClassNotFoundException &#123;// for (int i = 0;i &lt; 10;i++) &#123;// AObjcet aObjcet = new AObjcet();// long beginTime = System.currentTimeMillis();//// ByteOutputStream byteOutput = new ByteOutputStream();// ObjectOutputStream objectOutput = new ObjectOutputStream(byteOutput);// objectOutput.writeObject(aObjcet);// objectOutput.close();// byteOutput.close();// byte[] bytes = byteOutput.toByteArray();// System.out.println(\"Java序列化耗时：\" + (System.currentTimeMillis() - beginTime) + \"ms\");// System.out.println(\"Java序列化后的字节大小为：\" + bytes.length);//// beginTime = System.currentTimeMillis();// ByteArrayInputStream byteInput = new ByteArrayInputStream(bytes);// ObjectInputStream objectInput = new ObjectInputStream(byteInput);// objectInput.readObject();// objectInput.close();// byteInput.close();// System.out.println(\"Java反序列化耗时：\" + (System.currentTimeMillis() - beginTime) + \"ms\");//// &#125;// &#125;//&#125;//class AObjcet implements Serializable &#123;// private String a = \"bysocket\";// private String b = \"likes\";// private String c = \"java\";// private String d = \"world\";//// private int i = 100;// private int j = 10;// private long m = 100L;//// private boolean isA = true;// private boolean isB = false;// private boolean isC = false;//// private BObject aObject = new BObject();// private BObject bObject = new BObject();// private BObject cObject = new BObject();// private BObject dObject = new BObject();////&#125;//class BObject implements Serializable &#123;////&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"DSLoader","slug":"learning/SE/thread/join/DSLoader","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.663Z","comments":true,"path":"1395/10/17/learning/SE/thread/join/DSLoader/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/thread/join/DSLoader/","excerpt":"","text":"1234567891011121314151617package org.javacore.thread.join;import java.util.concurrent.TimeUnit;/** * Created by bysocket on 16/3/3. */public class DSLoader implements Runnable &#123; @Override public void run() &#123; System.out.println(\"begining the DSLoader\"); try &#123; TimeUnit.SECONDS.sleep(4); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; System.out.println(\"DSLoader has finished\"); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"JoinTest","slug":"learning/SE/thread/join/JoinTest","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.663Z","comments":true,"path":"1395/10/17/learning/SE/thread/join/JoinTest/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/thread/join/JoinTest/","excerpt":"","text":"12345678910111213141516package org.javacore.thread.join;/** * Created by bysocket on 16/3/3. */public class JoinTest &#123; public static void main(String[] args) throws InterruptedException &#123; Thread t1 = new Thread(new DSLoader()); Thread t2 = new Thread(new NetLoader()); t1.start(); t2.start(); //可以注释其中一个加深理解 t1.join(); //t2.join(); System.out.println(\"ending all\"); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"NetLoader","slug":"learning/SE/thread/join/NetLoader","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.663Z","comments":true,"path":"1395/10/17/learning/SE/thread/join/NetLoader/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/thread/join/NetLoader/","excerpt":"","text":"1234567891011121314151617package org.javacore.thread.join;import java.util.concurrent.TimeUnit;/** * Created by bysocket on 16/3/3. */public class NetLoader implements Runnable &#123; @Override public void run() &#123; System.out.println(\"begining the NetLoader\"); try &#123; TimeUnit.SECONDS.sleep(6); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; System.out.println(\"NetLoader has finished\"); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"SimplePriorities","slug":"learning/SE/thread/join/SimplePriorities","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.664Z","comments":true,"path":"1395/10/17/learning/SE/thread/join/SimplePriorities/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/thread/join/SimplePriorities/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960package org.javacore.thread;/** * Created by BYSocket on 2015/11/2. * * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;/** * @author Jeff Lee * @since 2015-11-3 09:05:03 * 线程优先级的使用 */public class SimplePriorities implements Runnable &#123; private int countDown = 5; private volatile double d; private int priority; public SimplePriorities(int priority)&#123; this.priority = priority; &#125; public String toString()&#123; // 获取当前执行的线程对象的引用 return Thread.currentThread() + \": \" + countDown; &#125; @Override public void run() &#123; // 获取当前执行的线程对象的引用，并设置其优先级。 Thread.currentThread().setPriority(priority); while (true)&#123; for (int i = 1; i &lt; 100000; i++)&#123; d += (Math.PI + Math.E) / (double) i; if (i % 1000 == 0) Thread.yield(); &#125; System.out.println(this); if (--countDown == 0) return; &#125; &#125; public static void main(String[] args) &#123; // 创建新的线程池 ExecutorService exec = Executors.newCachedThreadPool(); for (int i = 0; i &lt; 5 ;i++) exec.execute(new SimplePriorities(Thread.MIN_PRIORITY));// 由线程池决定执行线程，并设置优先级最低 exec.execute(new SimplePriorities(Thread.MAX_PRIORITY));// 由线程池决定执行线程，并设置优先级最高 // 顺序关闭，执行以前提交的线程，不接受新的线程 exec.shutdown(); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"CachedThreadPool","slug":"learning/SE/thread/threadlocal/CachedThreadPool","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.661Z","comments":true,"path":"1395/10/17/learning/SE/thread/threadlocal/CachedThreadPool/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/thread/threadlocal/CachedThreadPool/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233package org.javacore.thread;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-11-2 17:21:04 * 线程池CachedThreadPool的简单使用-启动LiftOff线程&#123;@link LiftOff&#125; */public class CachedThreadPool &#123; public static void main(String[] args) &#123; // 创建新线程的线程池 ExecutorService exec = Executors.newCachedThreadPool(); for (int i = 0 ; i &lt; 5; i++) exec.execute(new LiftOff()); // 由线程池Ececutor决定执行给定的线程。 // 顺序关闭，执行以前提交的线程，不接受新的线程。 exec.shutdown(); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"LiftOff","slug":"learning/SE/thread/threadlocal/LiftOff","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.662Z","comments":true,"path":"1395/10/17/learning/SE/thread/threadlocal/LiftOff/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/thread/threadlocal/LiftOff/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142package org.javacore.thread;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-11-2 16:56:43 * Runnable接口的实现类LiftOff */public class LiftOff implements Runnable&#123; protected int countDown = 10; private static int taskCount = 0; private final int id = taskCount++; public LiftOff()&#123;&#125; public LiftOff(int countDown)&#123; this.countDown = countDown; &#125; public String status()&#123; return \"#\" + id + \"(\" + (countDown &gt;0 ? countDown : \"LiftOff!\") + \"), \"; &#125; @Override public void run() &#123; while (countDown-- &gt; 0)&#123; System.out.println(status()); // 暂停当前正在执行线程，并执行其他线程。 Thread.yield(); &#125; &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"SafeTask","slug":"learning/SE/thread/threadlocal/SafeTask","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.661Z","comments":true,"path":"1395/10/17/learning/SE/thread/threadlocal/SafeTask/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/thread/threadlocal/SafeTask/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233package org.javacore.thread.threadlocal;import java.util.Date;import java.util.concurrent.TimeUnit;/** * 描述:看类里面说明 * Created by bysocket on 16/3/8. */public class SafeTask implements Runnable&#123; /** * ThreadLocal对象不会被所有线程共享 * --&gt; 线程局部变量 &lt;-- */ private static ThreadLocal&lt;Date&gt; startDate = new ThreadLocal&lt;Date&gt;()&#123; /** * 隐式实现初始化对象 * @return */ @Override protected Date initialValue() &#123; return new Date(); &#125; &#125;; @Override public void run() &#123; System.out.printf(\"Starting Thread:%s : %s\\n\",Thread.currentThread().getId(),startDate.get()); try &#123; TimeUnit.SECONDS.sleep((int) Math.rint(Math.random() * 10)); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; System.out.printf(\"Finish Thread:%s : %s\\n\",Thread.currentThread().getId(),startDate.get()); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"SafeTest","slug":"learning/SE/thread/threadlocal/SafeTest","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.660Z","comments":true,"path":"1395/10/17/learning/SE/thread/threadlocal/SafeTest/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/thread/threadlocal/SafeTest/","excerpt":"","text":"1234567891011121314151617181920package org.javacore.thread.threadlocal;import java.util.concurrent.TimeUnit;/** * 描述:可以看到线程每个有不同的启动时间,但是结束时间也会不相同. * Created by bysocket on 16/3/8. */public class SafeTest &#123; public static void main(String[] args) &#123; SafeTask task = new SafeTask(); for (int i = 0 ; i &lt; 10; i++) &#123; Thread thread = new Thread(task); thread.start(); try &#123; TimeUnit.SECONDS.sleep(2); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"UnsafeTask","slug":"learning/SE/thread/threadlocal/UnsafeTask","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.660Z","comments":true,"path":"1395/10/17/learning/SE/thread/threadlocal/UnsafeTask/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/thread/threadlocal/UnsafeTask/","excerpt":"","text":"123456789101112131415161718192021package org.javacore.thread.threadlocal;import java.util.Date;import java.util.concurrent.TimeUnit;/** * 描述:私有变量会被所有线程共享 * Created by bysocket on 16/3/8. */public class UnsafeTask implements Runnable&#123; private Date startDate; @Override public void run() &#123; startDate = new Date(); System.out.printf(\"Starting Thread:%s : %s\\n\",Thread.currentThread().getId(),startDate); try &#123; TimeUnit.SECONDS.sleep((int) Math.rint(Math.random() * 10)); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; System.out.printf(\"Finish Thread:%s : %s\\n\",Thread.currentThread().getId(),startDate); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"UnsafeTest","slug":"learning/SE/thread/threadlocal/UnsafeTest","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.660Z","comments":true,"path":"1395/10/17/learning/SE/thread/threadlocal/UnsafeTest/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/thread/threadlocal/UnsafeTest/","excerpt":"","text":"1234567891011121314151617181920package org.javacore.thread.threadlocal;import java.util.concurrent.TimeUnit;/** * 描述:可以看到线程每个有不同的启动时间,但是结束时间会有相同. * Created by bysocket on 16/3/8. */public class UnsafeTest &#123; public static void main(String[] args) &#123; UnsafeTask task = new UnsafeTask(); for (int i = 0 ; i &lt; 10; i++) &#123; Thread thread = new Thread(task); thread.start(); try &#123; TimeUnit.SECONDS.sleep(2); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"CleanerTask","slug":"learning/SE/thread/daemon/CleanerTask","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.656Z","comments":true,"path":"1395/10/17/learning/SE/thread/daemon/CleanerTask/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/thread/daemon/CleanerTask/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445package org.javacore.thread.daemon;import java.util.Date;import java.util.Deque;/** * 描述:管理这个队列,如果事件超过10秒钟,就会被移除 * Created by bysocket on 16/3/4. */public class CleanerTask extends Thread&#123; private Deque&lt;Event&gt; deque; public CleanerTask(Deque&lt;Event&gt; deque) &#123; this.deque = deque; setDaemon(true); &#125; @Override public void run() &#123; while (true) &#123; Date date = new Date(); clean(date); &#125; &#125; /** * 删除该时间前10s内创建的事件对象 * @param date */ private void clean(Date date) &#123; long difference = 0; boolean delete; if (deque.size() == 0) &#123; return; &#125; delete = false; do &#123; Event e = deque.getLast(); difference = date.getTime() - e.getDate().getTime(); if (difference &gt; 10000) &#123; System.out.printf(\"Cleaner: %s \\n\",e.getEvent()); deque.removeLast(); delete = true; &#125; &#125; while (difference &gt; 10000); if (delete) &#123; System.out.printf(\"Cleaner: Size of the queue: %d\\n\",deque.size()); &#125; &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"DaemonTest","slug":"learning/SE/thread/daemon/DaemonTest","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.656Z","comments":true,"path":"1395/10/17/learning/SE/thread/daemon/DaemonTest/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/thread/daemon/DaemonTest/","excerpt":"","text":"1234567891011121314151617181920package org.javacore.thread.daemon;import java.util.ArrayDeque;import java.util.Deque;/** * 1. 知道3个WriteTask线程休眠后,CleanerTask才执行 * 2. 从结果中,可以看出队列维持在一定数量当中 * Created by bysocket on 16/3/4. */public class DaemonTest &#123; public static void main(String[] args) &#123; Deque&lt;Event&gt; deque = new ArrayDeque&lt;&gt;(); WriterTask writerTask = new WriterTask(deque); for (int i = 0; i &lt; 3 ; i++) &#123; Thread thread = new Thread(writerTask); thread.start(); &#125; CleanerTask cleanerTask = new CleanerTask(deque); cleanerTask.start(); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"DaemonsDontRunFinally","slug":"learning/SE/thread/daemon/DaemonsDontRunFinally","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.658Z","comments":true,"path":"1395/10/17/learning/SE/thread/daemon/DaemonsDontRunFinally/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/thread/daemon/DaemonsDontRunFinally/","excerpt":"","text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546package org.javacore.thread;import java.util.concurrent.TimeUnit;/** * Created by BYSocket on 2015/11/2. * * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-11-3 18:17:58 * 后台线程遇到Finally */class ADaemon implements Runnable &#123; @Override public void run() &#123; try &#123; System.out.println(\"启动ADaemon\"); TimeUnit.SECONDS.sleep(1); &#125; catch (InterruptedException e )&#123; System.out.println(\"InterruptedException\"); &#125; finally &#123; // 因为main是非后台线程，main线程结束。ADaemon后台线程也就结束。因此可能没到finally就结束了。 System.out.println(\"finally 运行吗？\"); &#125; &#125;&#125;public class DaemonsDontRunFinally &#123; public static void main(String[] args) &#123; Thread t = new Thread(new ADaemon()); // 设置线程为后台线程 t.setDaemon(true); t.start(); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"Event","slug":"learning/SE/thread/daemon/Event","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.656Z","comments":true,"path":"1395/10/17/learning/SE/thread/daemon/Event/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/thread/daemon/Event/","excerpt":"","text":"12345678910111213141516171819202122package org.javacore.thread.daemon;import java.util.Date;/** * 描述:事件类 * Created by bysocket on 16/3/4. */public class Event &#123; private Date date; private String event; public Date getDate() &#123; return date; &#125; public void setDate(Date date) &#123; this.date = date; &#125; public String getEvent() &#123; return event; &#125; public void setEvent(String event) &#123; this.event = event; &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"FixedThreadPool","slug":"learning/SE/thread/daemon/FixedThreadPool","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.658Z","comments":true,"path":"1395/10/17/learning/SE/thread/daemon/FixedThreadPool/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/thread/daemon/FixedThreadPool/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233package org.javacore.thread;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-11-2 17:06:48 * 线程池FixedThreadPool的简单使用-启动LiftOff线程&#123;@link LiftOff&#125; */public class FixedThreadPool &#123; public static void main(String[] args) &#123; // 创建固定线程为5的线程池 ExecutorService exec = Executors.newFixedThreadPool(5); for (int i = 0; i &lt; 5 ;i++) exec.execute(new LiftOff());// 由线程池Ececutor决定执行给定的线程。 // 顺序关闭，执行以前提交的线程，不接受新的线程。 exec.shutdown(); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"SingleThreadExecutor","slug":"learning/SE/thread/daemon/SingleThreadExecutor","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.659Z","comments":true,"path":"1395/10/17/learning/SE/thread/daemon/SingleThreadExecutor/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/thread/daemon/SingleThreadExecutor/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132333435package org.javacore.thread;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;/** * Created by BYSocket on 2015/11/2. * * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-11-2 18:58:36 * SingleThreadExecutor的使用-启动LiftOff线程&#123;@link LiftOff&#125; */public class SingleThreadExecutor &#123; public static void main(String[] args) &#123; // 创建使用单个worker线程的线程池Executor ExecutorService exec = Executors.newSingleThreadExecutor(); for (int i = 0; i &lt; 5; i++) exec.execute(new LiftOff());// 由Executor决定执行给定的线程 // 顺序关闭，执行已提交的线程，不准添加新的线程 exec.shutdown(); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"ThreadInterrupt","slug":"learning/SE/thread/daemon/ThreadInterrupt","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.659Z","comments":true,"path":"1395/10/17/learning/SE/thread/daemon/ThreadInterrupt/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/thread/daemon/ThreadInterrupt/","excerpt":"","text":"1234567891011121314151617181920package org.javacore.thread;/** * Created by bysocket on 16/2/24. */public class ThreadInterrupt &#123; public static void main(String[] args) throws InterruptedException &#123; Thread inThread = new Thread(new InterrupThread()); inThread.start(); Thread.sleep(1000); inThread.interrupt(); &#125;&#125;class InterrupThread implements Runnable &#123; private int num = 1; @Override public void run() &#123; while (true) System.out.println(\"true ----&gt; \" + num++); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"WriterTask","slug":"learning/SE/thread/daemon/WriterTask","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.657Z","comments":true,"path":"1395/10/17/learning/SE/thread/daemon/WriterTask/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/thread/daemon/WriterTask/","excerpt":"","text":"12345678910111213141516171819202122232425262728package org.javacore.thread.daemon;import java.util.Date;import java.util.Deque;import java.util.concurrent.TimeUnit;/** * 描述:写事件到一个队列 * Created by bysocket on 16/3/4. */public class WriterTask implements Runnable &#123; private Deque&lt;Event&gt; deque; public WriterTask(Deque&lt;Event&gt; deque) &#123; this.deque = deque; &#125; @Override public void run() &#123; for (int i = 1; i &lt; 100; i++) &#123; Event event = new Event(); event.setDate(new Date()); event.setEvent(String.format(\"The thread %s has generated an event\",Thread.currentThread().getId())); deque.addFirst(event); try &#123; TimeUnit.SECONDS.sleep(1); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"BasicThreads","slug":"learning/SE/thread/uncaughtexp/BasicThreads","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.647Z","comments":true,"path":"1395/10/17/learning/SE/thread/uncaughtexp/BasicThreads/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/thread/uncaughtexp/BasicThreads/","excerpt":"","text":"123456789101112131415161718192021222324252627282930package org.javacore.thread;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-11-2 17:06:48 * 线程简单使用-启动LiftOff线程&#123;@link LiftOff&#125; */public class BasicThreads &#123; public static void main(String[] args) &#123; // 创建新的线程 Thread t = new Thread(new LiftOff()); // 执行线程 t.start(); System.out.println(\"Waiting for LiftOff\"); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"CallableDemo","slug":"learning/SE/thread/uncaughtexp/CallableDemo","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.649Z","comments":true,"path":"1395/10/17/learning/SE/thread/uncaughtexp/CallableDemo/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/thread/uncaughtexp/CallableDemo/","excerpt":"","text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364package org.javacore.thread;import java.util.ArrayList;import java.util.concurrent.Callable;import java.util.concurrent.ExecutionException;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;import java.util.concurrent.Future;/** * Created by BYSocket on 2015/11/2. * * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-11-2 18:58:36 * Callable接口的使用 --- 实现带返回值的任务 */// Callable实现类task，指定其类型参数class TaskWithResult implements Callable&lt;String&gt; &#123; private int id; public TaskWithResult(int id) &#123; this.id = id; &#125; @Override public String call() throws Exception &#123; return \"result of TaskWithResult \" + id; &#125;&#125;public class CallableDemo &#123; public static void main(String[] args) &#123; // 创建一个新的线程池 ExecutorService exec = Executors.newCachedThreadPool(); // Callable实现类task的返回结果集 ArrayList&lt;Future&lt;String&gt;&gt; results = new ArrayList&lt;&gt;(); for (int i = 0; i &lt; 5 ; i++) results.add(exec.submit(new TaskWithResult(i)));// 使用submit来启动Tasks // 异步计算的结果 for (Future&lt;String&gt; fs : results) try &#123; // get阻塞，直至获取结果 System.out.println(fs.get()); &#125; catch (InterruptedException e) &#123; System.out.println(e); e.printStackTrace(); &#125; catch (ExecutionException e) &#123; System.out.println(e); e.printStackTrace(); &#125; finally &#123; exec.shutdown(); &#125; &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"DaemonFromFactory","slug":"learning/SE/thread/uncaughtexp/DaemonFromFactory","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.648Z","comments":true,"path":"1395/10/17/learning/SE/thread/uncaughtexp/DaemonFromFactory/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/thread/uncaughtexp/DaemonFromFactory/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950package org.javacore.thread;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;import java.util.concurrent.TimeUnit;/** * Created by BYSocket on 2015/11/2. * * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-11-3 18:17:58 * 后台线程工厂类的使用 */public class DaemonFromFactory implements Runnable &#123; @Override public void run() &#123; try &#123; while (true)&#123; TimeUnit.MICROSECONDS.sleep(100); System.out.println(Thread.currentThread() + \" \" + this); &#125; &#125; catch (InterruptedException e) &#123; System.out.println(\"sleep() interrupted\"); &#125; &#125; public static void main(String[] args) throws InterruptedException &#123; // 使用提供的线程工厂类，创建线程池 ExecutorService exec = Executors.newCachedThreadPool(new DaemonThreadFactory()); for (int i = 0 ; i &lt; 10 ; i++) exec.execute(new DaemonFromFactory());// 此Runnable实现类，经过线程工厂创建 // 关闭线程池 exec.shutdown(); System.out.println(\"任务已经全部启动\"); TimeUnit.MICROSECONDS.sleep(500); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"DaemonThreadFactory","slug":"learning/SE/thread/uncaughtexp/DaemonThreadFactory","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.654Z","comments":true,"path":"1395/10/17/learning/SE/thread/uncaughtexp/DaemonThreadFactory/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/thread/uncaughtexp/DaemonThreadFactory/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132package org.javacore.thread;import java.util.concurrent.ThreadFactory;/** * Created by BYSocket on 2015/11/2. * * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-11-3 18:17:49 * 线程工厂类 - 将线程设置为后台线程 */public class DaemonThreadFactory implements ThreadFactory &#123; @Override public Thread newThread(Runnable r) &#123; Thread t = new Thread(r); t.setDaemon(true); return t; &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"ExceptionHadler","slug":"learning/SE/thread/uncaughtexp/ExceptionHadler","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.647Z","comments":true,"path":"1395/10/17/learning/SE/thread/uncaughtexp/ExceptionHadler/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/thread/uncaughtexp/ExceptionHadler/","excerpt":"","text":"1234567891011121314151617package org.javacore.thread.uncaughtexp;import java.lang.Thread.UncaughtExceptionHandler;/** * 描述:处理运行时异常的类 * Created by bysocket on 16/3/4. */public class ExceptionHadler implements UncaughtExceptionHandler&#123; @Override public void uncaughtException(Thread t, Throwable e) &#123; System.out.printf(\"An exception has been captured\\n\"); System.out.printf(\"Thread: %s\\n\",t.getId()); System.out.printf(\"Exception: %s: %s\\n\",e.getClass().getName(),e.getMessage()); System.out.printf(\"Stack Trace: \\n\"); e.printStackTrace(System.out); System.out.printf(\"Thread status: %s\\n\",t.getState()); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"MoreBasicThreads","slug":"learning/SE/thread/uncaughtexp/MoreBasicThreads","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.654Z","comments":true,"path":"1395/10/17/learning/SE/thread/uncaughtexp/MoreBasicThreads/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/thread/uncaughtexp/MoreBasicThreads/","excerpt":"","text":"12345678910111213141516171819202122232425262728package org.javacore.thread;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-11-2 17:09:33 * 线程简单使用-启动多个LiftOff线程&#123;@link LiftOff&#125; */public class MoreBasicThreads &#123; public static void main(String[] args) &#123; for (int i = 0; i &lt; 5 ; i++) new Thread(new LiftOff()).start(); System.out.println(\"Waiting for LiftOff\"); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"MyRunnable","slug":"learning/SE/thread/uncaughtexp/MyRunnable","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.655Z","comments":true,"path":"1395/10/17/learning/SE/thread/uncaughtexp/MyRunnable/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/thread/uncaughtexp/MyRunnable/","excerpt":"","text":"12345678910111213141516171819202122232425262728package org.javacore.thread;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-7-4 16:14:47 * Runnable接口的简单使用 * 测试 --&gt; &#123;@link MyRunnableTest&#125; */public class MyRunnable implements Runnable&#123; @Override public void run() &#123; System.out.println(\"MyRunnable --&gt; run()\"); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"MyThread","slug":"learning/SE/thread/uncaughtexp/MyThread","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.653Z","comments":true,"path":"1395/10/17/learning/SE/thread/uncaughtexp/MyThread/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/thread/uncaughtexp/MyThread/","excerpt":"","text":"12345678910111213141516171819202122232425262728package org.javacore.thread;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-7-4 16:14:51 * Thread的简单使用 * 测试 --&gt; &#123;@link MyThreadTest&#125; */public class MyThread extends Thread&#123; @Override public void run() &#123; System.out.println(\"MyThread --&gt; run()\"); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"ProcessBuilderTest","slug":"learning/SE/thread/uncaughtexp/ProcessBuilderTest","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.648Z","comments":true,"path":"1395/10/17/learning/SE/thread/uncaughtexp/ProcessBuilderTest/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/thread/uncaughtexp/ProcessBuilderTest/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233package org.javacore.thread; /* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */import java.io.IOException;import java.util.Scanner;/** * Java进程调用CMD * VM options =&gt; -Dfile.encoding=\"GBK\" * @author BYSocket * @since 2016-01-18 16:08:00 */public class ProcessBuilderTest &#123; public static void main(String[] args) throws IOException &#123; ProcessBuilder pb = new ProcessBuilder(\"cmd\",\"/c\",\"ipconfig/all\"); Process p = pb.start(); Scanner scanner = new Scanner(p.getInputStream()); while (scanner.hasNext()) System.out.println(scanner.next()); scanner.close(); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"SimpleDaemons","slug":"learning/SE/thread/uncaughtexp/SimpleDaemons","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.652Z","comments":true,"path":"1395/10/17/learning/SE/thread/uncaughtexp/SimpleDaemons/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/thread/uncaughtexp/SimpleDaemons/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950package org.javacore.thread;import java.util.concurrent.TimeUnit;/** * Created by BYSocket on 2015/11/2. * * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-11-3 18:09:06 * Daemon后台线程的简单使用 */public class SimpleDaemons implements Runnable&#123; @Override public void run() &#123; try &#123; while (true)&#123; TimeUnit.MICROSECONDS.sleep(1000); System.out.println(Thread.currentThread() + \" \" + this); &#125; &#125; catch (InterruptedException e) &#123; System.out.println(\"sleep() interrupted\"); &#125; &#125; // main是非后台线程 public static void main(String[] args) throws InterruptedException &#123; for (int i = 0 ; i &lt; 10 ; i++)&#123; // 创建一个新线程 Thread daemon = new Thread(new SimpleDaemons()); // 设置为后台线程 daemon.setDaemon(true); daemon.start(); &#125; System.out.println(\"所有任务已启动\"); // 如果main结束，那么同时会杀死所有后台线程,多次运行你会发现，可能打印的后台线程数不定 TimeUnit.MICROSECONDS.sleep(175); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"SleepRunThread","slug":"learning/SE/thread/uncaughtexp/SleepRunThread","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.653Z","comments":true,"path":"1395/10/17/learning/SE/thread/uncaughtexp/SleepRunThread/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/thread/uncaughtexp/SleepRunThread/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839package org.javacore.thread; /* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * Thread中start和run的区别 * @author BYSocket * @since 2016-01-18 15:55:00 */public class SleepRunThread &#123; public static void main(String[] args) &#123; System.out.println(\"当前线程ID =&gt; \" + Thread.currentThread().getId()); SRThread t1 = new SRThread(\"t1\"); t1.start(); SRThread t2 = new SRThread(\"t2\"); t2.run(); &#125;&#125;class SRThread extends Thread &#123; private String name; public SRThread(String name) &#123; this.name = name; &#125; @Override public void run() &#123; System.out.println(\"name:\" + name +\", 线程ID =&gt; \" + Thread.currentThread().getId()); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"SleepingTask","slug":"learning/SE/thread/uncaughtexp/SleepingTask","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.651Z","comments":true,"path":"1395/10/17/learning/SE/thread/uncaughtexp/SleepingTask/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/thread/uncaughtexp/SleepingTask/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748package org.javacore.thread;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;import java.util.concurrent.TimeUnit;/** * Created by BYSocket on 2015/11/2. * * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-11-3 09:04:16 * 休眠线程sleep的使用 */public class SleepingTask extends LiftOff &#123; @Override public void run()&#123; while(countDown-- &gt; 0)&#123; try &#123; System.out.println(status()); // 老版本调用：Thread.sleep(1000); TimeUnit.MICROSECONDS.sleep(100); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; &#125; public static void main(String[] args) &#123; // 创建新的线程池 ExecutorService exec = Executors.newCachedThreadPool(); for (int i = 0; i &lt; 5;i++) exec.execute(new SleepingTask());// 由线程池决定执行线程 // 顺序关闭，执行以前提交的线程，不接受新的线程 exec.shutdown(); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"ThreadInfo","slug":"learning/SE/thread/uncaughtexp/ThreadInfo","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.651Z","comments":true,"path":"1395/10/17/learning/SE/thread/uncaughtexp/ThreadInfo/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/thread/uncaughtexp/ThreadInfo/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172package org.javacore.thread;import java.io.FileWriter;import java.io.IOException;import java.io.PrintWriter;/** * 描述:线程优先级案例 * Created by bysocket on 16/2/24. */public class ThreadInfo &#123; public static void main(String[] args) &#123; Thread threads[] = new Thread[10]; Thread.State status[] = new Thread.State[10]; for (int i = 0; i &lt; 10; i++) &#123; threads[i] = new Thread(new Calculator(i)); if ((i % 2) == 0) &#123; threads[i].setPriority(Thread.MAX_PRIORITY); &#125; else &#123; threads[i].setPriority(Thread.MIN_PRIORITY); &#125;// threads[i].setName(\"\"); &#125; try &#123; // 将线程的信息写入log文件 FileWriter fw = new FileWriter(\".\\\\log.txt\"); PrintWriter pw = new PrintWriter(fw); for (int i = 0; i &lt;10 ;i++) &#123; pw.println(\"Main: Status of Thread \" + i + \" : \" + threads[i].getState()); status[i] = threads[i].getState(); &#125; // 启动线程 for (int i = 0; i &lt; 10 ;i++) threads[i].start(); boolean finish = false; while (!finish) &#123; for(int i = 0;i &lt; 10 ;i++) &#123; if (threads[i].getState() != status[i]) &#123; writeThreadInfo(pw,threads[i],status[i]); status[i] = threads[i].getState(); &#125; &#125; finish = true; for (int i = 0;i &lt; 10 ;i++) &#123; finish = finish &amp;&amp; (threads[i].getState() == Thread.State.TERMINATED);//中断 &#125; &#125; &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; private static void writeThreadInfo(PrintWriter pw, Thread thread, Thread.State status) &#123; pw.printf(\"Main: Id %d - $s\\n\",thread.getId(),thread.getName()); pw.printf(\"Main: Priority: %d\\n\",thread.getPriority()); pw.printf(\"Main: OldState: %s\\n\",status); pw.printf(\"Main: New State: %s\\n\",thread.getState()); pw.printf(\"*****************************************\\n\"); &#125;&#125;class Calculator implements Runnable &#123; private int number; public Calculator(int number) &#123; this.number = number; &#125; @Override public void run() &#123; for (int i = 0;i &lt;=10; i++) &#123; System.out.printf(\"%s: %d * %d = %d\\n\", Thread.currentThread().getName(), number, i, i * number); &#125; &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"UncaughtTask","slug":"learning/SE/thread/uncaughtexp/UncaughtTask","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.647Z","comments":true,"path":"1395/10/17/learning/SE/thread/uncaughtexp/UncaughtTask/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/thread/uncaughtexp/UncaughtTask/","excerpt":"","text":"1234567891011package org.javacore.thread.uncaughtexp;/** * 描述:抛出运行时异常的线程类 * Created by bysocket on 16/3/4. */public class UncaughtTask implements Runnable &#123; @Override public void run() &#123; int numero = Integer.parseInt(\"TTTT\"); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"UncaughtTest","slug":"learning/SE/thread/uncaughtexp/UncaughtTest","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.647Z","comments":true,"path":"1395/10/17/learning/SE/thread/uncaughtexp/UncaughtTest/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/thread/uncaughtexp/UncaughtTest/","excerpt":"","text":"12345678910111213package org.javacore.thread.uncaughtexp;/** * 描述:实现异常类Test * Created by bysocket on 16/3/4. */public class UncaughtTest &#123; public static void main(String[] args) &#123; UncaughtTask uncaughtTask = new UncaughtTask(); Thread thread = new Thread(uncaughtTask); thread.setUncaughtExceptionHandler(new ExceptionHadler()); thread.start(); &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"MapMakerT","slug":"learning/SE/colgoogle/MapMakerT","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.705Z","comments":true,"path":"1395/10/17/learning/SE/colgoogle/MapMakerT/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/colgoogle/MapMakerT/","excerpt":"","text":"123456789101112131415161718192021222324252627package org.javacore.colgoogle;import com.google.common.base.Function;import com.google.common.collect.MapMaker;import java.util.concurrent.ConcurrentMap;import java.util.concurrent.TimeUnit;/** * Created by 子木 on 2016/2/20. */public class MapMakerT &#123; // 使用案例:存储验证码 // &lt;String, String&gt; == &lt;用户唯一，验证码&gt; // expiration(15, TimeUnit.MINUTES) 有效期15分钟 ConcurrentMap&lt;String,String&gt; capthcaMap = new MapMaker().expiration(15, TimeUnit.MINUTES).makeMap(); // 设置ConcurrentMap的concurrencyLevel参数 ，例如ConcurrentHashMap是用来控制其Segment数组的大小 ConcurrentMap&lt;String,Object&gt; map1 = new MapMaker().concurrencyLevel(8).makeMap(); // 构造各种不同reference作为key和value的map ConcurrentMap&lt;String,Object&gt; map2 = new MapMaker().softKeys().weakValues().makeMap(); // 提供当Map里面不包含所get的项，可以自动加入到Map的功能 ConcurrentMap&lt;String,Integer&gt; map3 = new MapMaker() .makeComputingMap( new Function&lt;String, Integer&gt;() &#123; public Integer apply(String key) &#123; return 1; &#125; &#125; );&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"ImgCircleCut","slug":"learning/SE/img/ImgCircleCut","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.639Z","comments":true,"path":"1395/10/17/learning/SE/img/ImgCircleCut/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/img/ImgCircleCut/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657package org.javacore.img;import javax.imageio.ImageIO;import java.awt.*;import java.awt.geom.Ellipse2D;import java.awt.image.BufferedImage;import java.io.File;import java.io.IOException;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2016-06-28 14:05:26 * 图片裁成椭圆 */public class ImgCircleCut &#123; public static boolean ImgCircleCut(String srcFile, String targetFile) &#123; try &#123; // 获取img的BufferedImage对象,可以考虑创建不带透明色的BufferedImage对象:BufferedImage.TYPE_INT_ARGB BufferedImage srcBi = ImageIO.read(new File(srcFile)); // 创建一个带透明色的BufferedImage对象 BufferedImage targetBi = new BufferedImage(srcBi.getWidth(), srcBi.getHeight(), BufferedImage.TYPE_INT_ARGB); // 获取img窗体矩形定义的椭圆 Ellipse2D.Double shape = new Ellipse2D.Double(0, 0, srcBi.getWidth(), srcBi.getHeight()); // 创建目标图的Graphics2D对象 Graphics2D g2 = targetBi.createGraphics(); // 创建不透明 SRC_OVER 规则的 AlphaComposite 对象 AlphaComposite ac = AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.9f); g2.setComposite(ac); g2.setBackground(new Color(22, 2, 2, 0)); // 是圆形 还是 椭圆 自定义参数 g2.fill3DRect(200, 200, 180, 80, false); g2.setClip(shape); g2.drawImage(srcBi, 0, 0, null); g2.dispose(); ImageIO.write(targetBi, \"png\", new File(targetFile)); &#125; catch (IOException e) &#123; e.printStackTrace(); return false; &#125; return true; &#125;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]},{"title":"HaspMapT","slug":"learning/SE/collection/map/HaspMapT","date":"2017-01-05T20:30:00.000Z","updated":"2017-03-12T21:48:37.722Z","comments":true,"path":"1395/10/17/learning/SE/collection/map/HaspMapT/","link":"","permalink":"http://javahosting.ir/1395/10/17/learning/SE/collection/map/HaspMapT/","excerpt":"","text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758package org.javacore.collection.map;import java.util.HashMap;import java.util.Map;/* * Copyright [2015] [Jeff Lee] * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Jeff Lee * @since 2015-6-18 21:36:04 * HashMap的Add方法 */public class HaspMapT&#123; public static void main(String[] args) &#123; objOper(); nullOper(); &#125; /** * HaspMap操作对象方法 */ public static void objOper()&#123; Map&lt;String, Employee&gt; employees = new HashMap&lt;String, Employee&gt;(); String number = \"1206010035\"; //设置对象 employees.put(number, new Employee()); System.out.println(employees); // 获取对象 System.out.println(employees.get(number)); &#125; /** * HaspMap的put方法 */ @SuppressWarnings(&#123; \"unchecked\", \"rawtypes\" &#125;) public static void nullOper()&#123; Map map = new HashMap&lt;String, String&gt;(); map.put(null, \"null01\"); map.put(null, \"null02\"); System.out.println(map); System.out.println(map.get(null)); &#125;&#125;class Employee&#123;&#125;","categories":[{"name":"آموزش جاوا","slug":"آموزش-جاوا","permalink":"http://javahosting.ir/category/آموزش-جاوا/"},{"name":"نگارش استاندارد J2SE","slug":"آموزش-جاوا/نگارش-استاندارد-J2SE","permalink":"http://javahosting.ir/category/آموزش-جاوا/نگارش-استاندارد-J2SE/"}],"tags":[{"name":"آموزش J2SE","slug":"آموزش-J2SE","permalink":"http://javahosting.ir/tag/آموزش-J2SE/"}]}]}